// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 19552;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([156,60,0,0,110,57,0,0,126,57,0,0,72,72,0,0,137,57,0,0,148,57,0,0,161,57,0,0,172,57,0,0,192,57,0,0,205,57,0,0,72,72,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,4,0,8,0,4,0,2,0,0,0,4,0,5,0,16,0,8,0,2,0,0,0,4,0,6,0,32,0,32,0,2,0,0,0,4,0,4,0,16,0,16,0,3,0,0,0,8,0,16,0,32,0,32,0,3,0,0,0,8,0,16,0,128,0,128,0,3,0,0,0,8,0,32,0,128,0,0,1,3,0,0,0,32,0,128,0,2,1,0,4,3,0,0,0,32,0,2,1,2,1,0,16,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,104,36,0,0,172,0,0,0,1,1,0,0,30,1,0,0,15,0,0,0,232,40,0,0,148,1,0,0,0,0,0,0,30,0,0,0,15,0,0,0,0,0,0,0,192,34,0,0,0,0,0,0,19,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,16,35,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,81,72,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,35,0,0,136,35,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,89,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,8,0,140,0,8,0,76,0,8,0,204,0,8,0,44,0,8,0,172,0,8,0,108,0,8,0,236,0,8,0,28,0,8,0,156,0,8,0,92,0,8,0,220,0,8,0,60,0,8,0,188,0,8,0,124,0,8,0,252,0,8,0,2,0,8,0,130,0,8,0,66,0,8,0,194,0,8,0,34,0,8,0,162,0,8,0,98,0,8,0,226,0,8,0,18,0,8,0,146,0,8,0,82,0,8,0,210,0,8,0,50,0,8,0,178,0,8,0,114,0,8,0,242,0,8,0,10,0,8,0,138,0,8,0,74,0,8,0,202,0,8,0,42,0,8,0,170,0,8,0,106,0,8,0,234,0,8,0,26,0,8,0,154,0,8,0,90,0,8,0,218,0,8,0,58,0,8,0,186,0,8,0,122,0,8,0,250,0,8,0,6,0,8,0,134,0,8,0,70,0,8,0,198,0,8,0,38,0,8,0,166,0,8,0,102,0,8,0,230,0,8,0,22,0,8,0,150,0,8,0,86,0,8,0,214,0,8,0,54,0,8,0,182,0,8,0,118,0,8,0,246,0,8,0,14,0,8,0,142,0,8,0,78,0,8,0,206,0,8,0,46,0,8,0,174,0,8,0,110,0,8,0,238,0,8,0,30,0,8,0,158,0,8,0,94,0,8,0,222,0,8,0,62,0,8,0,190,0,8,0,126,0,8,0,254,0,8,0,1,0,8,0,129,0,8,0,65,0,8,0,193,0,8,0,33,0,8,0,161,0,8,0,97,0,8,0,225,0,8,0,17,0,8,0,145,0,8,0,81,0,8,0,209,0,8,0,49,0,8,0,177,0,8,0,113,0,8,0,241,0,8,0,9,0,8,0,137,0,8,0,73,0,8,0,201,0,8,0,41,0,8,0,169,0,8,0,105,0,8,0,233,0,8,0,25,0,8,0,153,0,8,0,89,0,8,0,217,0,8,0,57,0,8,0,185,0,8,0,121,0,8,0,249,0,8,0,5,0,8,0,133,0,8,0,69,0,8,0,197,0,8,0,37,0,8,0,165,0,8,0,101,0,8,0,229,0,8,0,21,0,8,0,149,0,8,0,85,0,8,0,213,0,8,0,53,0,8,0,181,0,8,0,117,0,8,0,245,0,8,0,13,0,8,0,141,0,8,0,77,0,8,0,205,0,8,0,45,0,8,0,173,0,8,0,109,0,8,0,237,0,8,0,29,0,8,0,157,0,8,0,93,0,8,0,221,0,8,0,61,0,8,0,189,0,8,0,125,0,8,0,253,0,8,0,19,0,9,0,19,1,9,0,147,0,9,0,147,1,9,0,83,0,9,0,83,1,9,0,211,0,9,0,211,1,9,0,51,0,9,0,51,1,9,0,179,0,9,0,179,1,9,0,115,0,9,0,115,1,9,0,243,0,9,0,243,1,9,0,11,0,9,0,11,1,9,0,139,0,9,0,139,1,9,0,75,0,9,0,75,1,9,0,203,0,9,0,203,1,9,0,43,0,9,0,43,1,9,0,171,0,9,0,171,1,9,0,107,0,9,0,107,1,9,0,235,0,9,0,235,1,9,0,27,0,9,0,27,1,9,0,155,0,9,0,155,1,9,0,91,0,9,0,91,1,9,0,219,0,9,0,219,1,9,0,59,0,9,0,59,1,9,0,187,0,9,0,187,1,9,0,123,0,9,0,123,1,9,0,251,0,9,0,251,1,9,0,7,0,9,0,7,1,9,0,135,0,9,0,135,1,9,0,71,0,9,0,71,1,9,0,199,0,9,0,199,1,9,0,39,0,9,0,39,1,9,0,167,0,9,0,167,1,9,0,103,0,9,0,103,1,9,0,231,0,9,0,231,1,9,0,23,0,9,0,23,1,9,0,151,0,9,0,151,1,9,0,87,0,9,0,87,1,9,0,215,0,9,0,215,1,9,0,55,0,9,0,55,1,9,0,183,0,9,0,183,1,9,0,119,0,9,0,119,1,9,0,247,0,9,0,247,1,9,0,15,0,9,0,15,1,9,0,143,0,9,0,143,1,9,0,79,0,9,0,79,1,9,0,207,0,9,0,207,1,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_memset"] = _memset;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___lock() {}

  function ___unlock() {}

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

   
  Module["_sbrk"] = _sbrk;

   
  Module["___uremdi3"] = ___uremdi3;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vii": nullFunc_vii, "nullFunc_iii": nullFunc_iii, "nullFunc_vi": nullFunc_vi, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vii": invoke_vii, "invoke_iii": invoke_iii, "invoke_vi": invoke_vi, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall3": ___syscall3, "___lock": ___lock, "_abort": _abort, "___syscall5": ___syscall5, "___syscall6": ___syscall6, "___syscall140": ___syscall140, "___setErrNo": ___setErrNo, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "_exit": _exit, "_pthread_cleanup_push": _pthread_cleanup_push, "__exit": __exit, "___syscall146": ___syscall146, "___syscall4": ___syscall4, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_vi=env.nullFunc_vi;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vii=env.invoke_vii;
  var invoke_iii=env.invoke_iii;
  var invoke_vi=env.invoke_vi;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall3=env.___syscall3;
  var ___lock=env.___lock;
  var _abort=env._abort;
  var ___syscall5=env.___syscall5;
  var ___syscall6=env.___syscall6;
  var ___syscall140=env.___syscall140;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _exit=env._exit;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var __exit=env.__exit;
  var ___syscall146=env.___syscall146;
  var ___syscall4=env.___syscall4;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _test_compress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 44|0;
 $7 = sp + 36|0;
 $4 = $0;
 HEAP32[$5>>2] = $1;
 $6 = $2;
 HEAP32[$7>>2] = $3;
 $10 = (_strlen(13058)|0);
 $11 = (($10) + 1)|0;
 $9 = $11;
 $12 = $4;
 $13 = $9;
 $14 = (_compress($12,$5,13058,$13)|0);
 $8 = $14;
 $15 = $8;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[2273]|0;
  $18 = $8;
  HEAP32[$vararg_buffer>>2] = 13086;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  (_fprintf($17,13072,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $19 = $6;
 (_strcpy($19,13095)|0);
 $20 = $6;
 $21 = $4;
 $22 = HEAP32[$5>>2]|0;
 $23 = (_uncompress($20,$7,$21,$22)|0);
 $8 = $23;
 $24 = $8;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = HEAP32[2273]|0;
  $27 = $8;
  HEAP32[$vararg_buffer2>>2] = 13103;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $27;
  (_fprintf($26,13072,$vararg_buffer2)|0);
  _exit(1);
  // unreachable;
 }
 $28 = $6;
 $29 = (_strcmp($28,13058)|0);
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = HEAP32[2273]|0;
  (_fprintf($31,13114,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 } else {
  $32 = $6;
  HEAP32[$vararg_buffer8>>2] = $32;
  (_printf(13130,$vararg_buffer8)|0);
  STACKTOP = sp;return;
 }
}
function _test_gzio($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer33 = sp + 104|0;
 $vararg_buffer31 = sp + 96|0;
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 120|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = (_strlen(13058)|0);
 $11 = (($10) + 1)|0;
 $7 = $11;
 $12 = $3;
 $13 = (_gzopen($12,13148)|0);
 $8 = $13;
 $14 = $8;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = HEAP32[2273]|0;
  (_fprintf($16,13151,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $17 = $8;
 (_gzputc($17,104)|0);
 $18 = $8;
 $19 = (_gzputs($18,13165)|0);
 $20 = ($19|0)!=(4);
 if ($20) {
  $21 = HEAP32[2273]|0;
  $22 = $8;
  $23 = (_gzerror($22,$6)|0);
  HEAP32[$vararg_buffer1>>2] = $23;
  (_fprintf($21,13170,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 $24 = $8;
 HEAP32[$vararg_buffer3>>2] = 13192;
 $25 = (_gzprintf($24,13186,$vararg_buffer3)|0);
 $26 = ($25|0)!=(8);
 if ($26) {
  $27 = HEAP32[2273]|0;
  $28 = $8;
  $29 = (_gzerror($28,$6)|0);
  HEAP32[$vararg_buffer6>>2] = $29;
  (_fprintf($27,13198,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 $30 = $8;
 (_gzseek($30,1,1)|0);
 $31 = $8;
 (_gzclose($31)|0);
 $32 = $3;
 $33 = (_gzopen($32,13216)|0);
 $8 = $33;
 $34 = $8;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $36 = HEAP32[2273]|0;
  (_fprintf($36,13151,$vararg_buffer9)|0);
  _exit(1);
  // unreachable;
 }
 $37 = $4;
 (_strcpy($37,13095)|0);
 $38 = $8;
 $39 = $4;
 $40 = $5;
 $41 = (_gzread($38,$39,$40)|0);
 $42 = $7;
 $43 = ($41|0)!=($42|0);
 if ($43) {
  $44 = HEAP32[2273]|0;
  $45 = $8;
  $46 = (_gzerror($45,$6)|0);
  HEAP32[$vararg_buffer11>>2] = $46;
  (_fprintf($44,13219,$vararg_buffer11)|0);
  _exit(1);
  // unreachable;
 }
 $47 = $4;
 $48 = (_strcmp($47,13058)|0);
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = HEAP32[2273]|0;
  $51 = $4;
  HEAP32[$vararg_buffer14>>2] = $51;
  (_fprintf($50,13235,$vararg_buffer14)|0);
  _exit(1);
  // unreachable;
 }
 $52 = $4;
 HEAP32[$vararg_buffer17>>2] = $52;
 (_printf(13251,$vararg_buffer17)|0);
 $53 = $8;
 $54 = (_gzseek($53,-8,1)|0);
 $9 = $54;
 $55 = $9;
 $56 = ($55|0)!=(6);
 if ($56) {
  $61 = HEAP32[2273]|0;
  $62 = $9;
  $63 = $8;
  $64 = (_gztell($63)|0);
  HEAP32[$vararg_buffer20>>2] = $62;
  $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
  HEAP32[$vararg_ptr23>>2] = $64;
  (_fprintf($61,13265,$vararg_buffer20)|0);
  _exit(1);
  // unreachable;
 }
 $57 = $8;
 $58 = (_gztell($57)|0);
 $59 = $9;
 $60 = ($58|0)!=($59|0);
 if ($60) {
  $61 = HEAP32[2273]|0;
  $62 = $9;
  $63 = $8;
  $64 = (_gztell($63)|0);
  HEAP32[$vararg_buffer20>>2] = $62;
  $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
  HEAP32[$vararg_ptr23>>2] = $64;
  (_fprintf($61,13265,$vararg_buffer20)|0);
  _exit(1);
  // unreachable;
 }
 $65 = $8;
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0);
 $68 = $8;
 if ($67) {
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + -1)|0;
  HEAP32[$68>>2] = $70;
  $71 = $8;
  $72 = ((($71)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + 1)|0;
  HEAP32[$72>>2] = $74;
  $75 = $8;
  $76 = ((($75)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 1|0);
  HEAP32[$76>>2] = $78;
  $79 = HEAP8[$77>>0]|0;
  $80 = $79&255;
  $82 = $80;
 } else {
  $81 = (_gzgetc($68)|0);
  $82 = $81;
 }
 $83 = ($82|0)!=(32);
 if ($83) {
  $84 = HEAP32[2273]|0;
  (_fprintf($84,13300,$vararg_buffer24)|0);
  _exit(1);
  // unreachable;
 }
 $85 = $8;
 $86 = (_gzungetc(32,$85)|0);
 $87 = ($86|0)!=(32);
 if ($87) {
  $88 = HEAP32[2273]|0;
  (_fprintf($88,13314,$vararg_buffer26)|0);
  _exit(1);
  // unreachable;
 }
 $89 = $8;
 $90 = $4;
 $91 = $5;
 (_gzgets($89,$90,$91)|0);
 $92 = $4;
 $93 = (_strlen($92)|0);
 $94 = ($93|0)!=(7);
 if ($94) {
  $95 = HEAP32[2273]|0;
  $96 = $8;
  $97 = (_gzerror($96,$6)|0);
  HEAP32[$vararg_buffer28>>2] = $97;
  (_fprintf($95,13330,$vararg_buffer28)|0);
  _exit(1);
  // unreachable;
 }
 $98 = $4;
 $99 = (_strcmp($98,(13064))|0);
 $100 = ($99|0)!=(0);
 if ($100) {
  $101 = HEAP32[2273]|0;
  (_fprintf($101,13359,$vararg_buffer31)|0);
  _exit(1);
  // unreachable;
 } else {
  $102 = $4;
  HEAP32[$vararg_buffer33>>2] = $102;
  (_printf(13384,$vararg_buffer33)|0);
  $103 = $8;
  (_gzclose($103)|0);
  STACKTOP = sp;return;
 }
}
function _test_deflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 40|0;
 $2 = $0;
 $3 = $1;
 $7 = (_strlen(13058)|0);
 $8 = (($7) + 1)|0;
 $6 = $8;
 $9 = HEAP32[4487]|0;
 $10 = ((($4)) + 32|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[4488]|0;
 $12 = ((($4)) + 36|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($4)) + 40|0);
 HEAP32[$13>>2] = 0;
 $14 = (_deflateInit_($4,-1,15516,56)|0);
 $5 = $14;
 $15 = $5;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[2273]|0;
  $18 = $5;
  HEAP32[$vararg_buffer>>2] = 13411;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  (_fprintf($17,13072,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 HEAP32[$4>>2] = 13058;
 $19 = $2;
 $20 = ((($4)) + 12|0);
 HEAP32[$20>>2] = $19;
 while(1) {
  $21 = ((($4)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $6;
  $24 = ($22|0)!=($23|0);
  if (!($24)) {
   break;
  }
  $25 = ((($4)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $3;
  $28 = ($26>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = ((($4)) + 16|0);
  HEAP32[$29>>2] = 1;
  $30 = ((($4)) + 4|0);
  HEAP32[$30>>2] = 1;
  $31 = (_deflate($4,0)|0);
  $5 = $31;
  $32 = $5;
  $33 = ($32|0)!=(0);
  if ($33) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $34 = HEAP32[2273]|0;
  $35 = $5;
  HEAP32[$vararg_buffer2>>2] = 13423;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $35;
  (_fprintf($34,13072,$vararg_buffer2)|0);
  _exit(1);
  // unreachable;
 }
 while(1) {
  $36 = ((($4)) + 16|0);
  HEAP32[$36>>2] = 1;
  $37 = (_deflate($4,4)|0);
  $5 = $37;
  $38 = $5;
  $39 = ($38|0)==(1);
  if ($39) {
   break;
  }
  $40 = $5;
  $41 = ($40|0)!=(0);
  if ($41) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  $42 = HEAP32[2273]|0;
  $43 = $5;
  HEAP32[$vararg_buffer6>>2] = 13423;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $43;
  (_fprintf($42,13072,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 $44 = (_deflateEnd($4)|0);
 $5 = $44;
 $45 = $5;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = HEAP32[2273]|0;
  $48 = $5;
  HEAP32[$vararg_buffer10>>2] = 13431;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $48;
  (_fprintf($47,13072,$vararg_buffer10)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _test_inflate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 40|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $6;
 (_strcpy($10,13095)|0);
 $11 = HEAP32[4487]|0;
 $12 = ((($9)) + 32|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[4488]|0;
 $14 = ((($9)) + 36|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($9)) + 40|0);
 HEAP32[$15>>2] = 0;
 $16 = $4;
 HEAP32[$9>>2] = $16;
 $17 = ((($9)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = $6;
 $19 = ((($9)) + 12|0);
 HEAP32[$19>>2] = $18;
 $20 = (_inflateInit_($9,15516,56)|0);
 $8 = $20;
 $21 = $8;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = HEAP32[2273]|0;
  $24 = $8;
  HEAP32[$vararg_buffer>>2] = 13442;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  (_fprintf($23,13072,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 while(1) {
  $25 = ((($9)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $7;
  $28 = ($26>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = ((($9)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $5;
  $32 = ($30>>>0)<($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = ((($9)) + 16|0);
  HEAP32[$33>>2] = 1;
  $34 = ((($9)) + 4|0);
  HEAP32[$34>>2] = 1;
  $35 = (_inflate($9,0)|0);
  $8 = $35;
  $36 = $8;
  $37 = ($36|0)==(1);
  if ($37) {
   break;
  }
  $38 = $8;
  $39 = ($38|0)!=(0);
  if ($39) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $40 = HEAP32[2273]|0;
  $41 = $8;
  HEAP32[$vararg_buffer2>>2] = 13454;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $41;
  (_fprintf($40,13072,$vararg_buffer2)|0);
  _exit(1);
  // unreachable;
 }
 $42 = (_inflateEnd($9)|0);
 $8 = $42;
 $43 = $8;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = HEAP32[2273]|0;
  $46 = $8;
  HEAP32[$vararg_buffer6>>2] = 13462;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $46;
  (_fprintf($45,13072,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 $47 = $6;
 $48 = (_strcmp($47,13058)|0);
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = HEAP32[2273]|0;
  (_fprintf($50,13473,$vararg_buffer10)|0);
  _exit(1);
  // unreachable;
 } else {
  $51 = $6;
  HEAP32[$vararg_buffer12>>2] = $51;
  (_printf(13486,$vararg_buffer12)|0);
  STACKTOP = sp;return;
 }
}
function _test_large_deflate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr21 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 64|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = HEAP32[4487]|0;
 $11 = ((($8)) + 32|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[4488]|0;
 $13 = ((($8)) + 36|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($8)) + 40|0);
 HEAP32[$14>>2] = 0;
 $15 = (_deflateInit_($8,1,15516,56)|0);
 $9 = $15;
 $16 = $9;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = HEAP32[2273]|0;
  $19 = $9;
  HEAP32[$vararg_buffer>>2] = 13411;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $19;
  (_fprintf($18,13072,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $20 = $4;
 $21 = ((($8)) + 12|0);
 HEAP32[$21>>2] = $20;
 $22 = $5;
 $23 = ((($8)) + 16|0);
 HEAP32[$23>>2] = $22;
 $24 = $6;
 HEAP32[$8>>2] = $24;
 $25 = $7;
 $26 = ((($8)) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = (_deflate($8,0)|0);
 $9 = $27;
 $28 = $9;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = HEAP32[2273]|0;
  $31 = $9;
  HEAP32[$vararg_buffer2>>2] = 13423;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $31;
  (_fprintf($30,13072,$vararg_buffer2)|0);
  _exit(1);
  // unreachable;
 }
 $32 = ((($8)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = HEAP32[2273]|0;
  (_fprintf($35,13501,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 (_deflateParams($8,0,0)|0);
 $36 = $4;
 HEAP32[$8>>2] = $36;
 $37 = $5;
 $38 = (($37>>>0) / 2)&-1;
 $39 = ((($8)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (_deflate($8,0)|0);
 $9 = $40;
 $41 = $9;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = HEAP32[2273]|0;
  $44 = $9;
  HEAP32[$vararg_buffer8>>2] = 13423;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $44;
  (_fprintf($43,13072,$vararg_buffer8)|0);
  _exit(1);
  // unreachable;
 }
 (_deflateParams($8,9,1)|0);
 $45 = $6;
 HEAP32[$8>>2] = $45;
 $46 = $7;
 $47 = ((($8)) + 4|0);
 HEAP32[$47>>2] = $46;
 $48 = (_deflate($8,0)|0);
 $9 = $48;
 $49 = $9;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = HEAP32[2273]|0;
  $52 = $9;
  HEAP32[$vararg_buffer12>>2] = 13423;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $52;
  (_fprintf($51,13072,$vararg_buffer12)|0);
  _exit(1);
  // unreachable;
 }
 $53 = (_deflate($8,4)|0);
 $9 = $53;
 $54 = $9;
 $55 = ($54|0)!=(1);
 if ($55) {
  $56 = HEAP32[2273]|0;
  (_fprintf($56,13521,$vararg_buffer16)|0);
  _exit(1);
  // unreachable;
 }
 $57 = (_deflateEnd($8)|0);
 $9 = $57;
 $58 = $9;
 $59 = ($58|0)!=(0);
 if ($59) {
  $60 = HEAP32[2273]|0;
  $61 = $9;
  HEAP32[$vararg_buffer18>>2] = 13431;
  $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
  HEAP32[$vararg_ptr21>>2] = $61;
  (_fprintf($60,13072,$vararg_buffer18)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _test_large_inflate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 40|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $6;
 (_strcpy($10,13095)|0);
 $11 = HEAP32[4487]|0;
 $12 = ((($9)) + 32|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[4488]|0;
 $14 = ((($9)) + 36|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($9)) + 40|0);
 HEAP32[$15>>2] = 0;
 $16 = $4;
 HEAP32[$9>>2] = $16;
 $17 = $5;
 $18 = ((($9)) + 4|0);
 HEAP32[$18>>2] = $17;
 $19 = (_inflateInit_($9,15516,56)|0);
 $8 = $19;
 $20 = $8;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = HEAP32[2273]|0;
  $23 = $8;
  HEAP32[$vararg_buffer>>2] = 13442;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $23;
  (_fprintf($22,13072,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 while(1) {
  $24 = $6;
  $25 = ((($9)) + 12|0);
  HEAP32[$25>>2] = $24;
  $26 = $7;
  $27 = ((($9)) + 16|0);
  HEAP32[$27>>2] = $26;
  $28 = (_inflate($9,0)|0);
  $8 = $28;
  $29 = $8;
  $30 = ($29|0)==(1);
  if ($30) {
   break;
  }
  $31 = $8;
  $32 = ($31|0)!=(0);
  if ($32) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $33 = HEAP32[2273]|0;
  $34 = $8;
  HEAP32[$vararg_buffer2>>2] = 13557;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $34;
  (_fprintf($33,13072,$vararg_buffer2)|0);
  _exit(1);
  // unreachable;
 }
 $35 = (_inflateEnd($9)|0);
 $8 = $35;
 $36 = $8;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = HEAP32[2273]|0;
  $39 = $8;
  HEAP32[$vararg_buffer6>>2] = 13462;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $39;
  (_fprintf($38,13072,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 $40 = ((($9)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $7;
 $43 = $42<<1;
 $44 = $5;
 $45 = (($44>>>0) / 2)&-1;
 $46 = (($43) + ($45))|0;
 $47 = ($41|0)!=($46|0);
 if ($47) {
  $48 = HEAP32[2273]|0;
  $49 = ((($9)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $50;
  (_fprintf($48,13571,$vararg_buffer10)|0);
  _exit(1);
  // unreachable;
 } else {
  (_printf(13595,$vararg_buffer13)|0);
  STACKTOP = sp;return;
 }
}
function _test_flush($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 40|0;
 $2 = $0;
 $3 = $1;
 $7 = (_strlen(13058)|0);
 $8 = (($7) + 1)|0;
 $6 = $8;
 $9 = HEAP32[4487]|0;
 $10 = ((($4)) + 32|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[4488]|0;
 $12 = ((($4)) + 36|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($4)) + 40|0);
 HEAP32[$13>>2] = 0;
 $14 = (_deflateInit_($4,-1,15516,56)|0);
 $5 = $14;
 $15 = $5;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[2273]|0;
  $18 = $5;
  HEAP32[$vararg_buffer>>2] = 13411;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $18;
  (_fprintf($17,13072,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 HEAP32[$4>>2] = 13058;
 $19 = $2;
 $20 = ((($4)) + 12|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($4)) + 4|0);
 HEAP32[$21>>2] = 3;
 $22 = $3;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($4)) + 16|0);
 HEAP32[$24>>2] = $23;
 $25 = (_deflate($4,3)|0);
 $5 = $25;
 $26 = $5;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = HEAP32[2273]|0;
  $29 = $5;
  HEAP32[$vararg_buffer3>>2] = 13423;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $29;
  (_fprintf($28,13072,$vararg_buffer3)|0);
  _exit(1);
  // unreachable;
 }
 $30 = $2;
 $31 = ((($30)) + 3|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = (($32) + 1)<<24>>24;
 HEAP8[$31>>0] = $33;
 $34 = $6;
 $35 = (($34) - 3)|0;
 $36 = ((($4)) + 4|0);
 HEAP32[$36>>2] = $35;
 $37 = (_deflate($4,4)|0);
 $5 = $37;
 $38 = $5;
 $39 = ($38|0)!=(1);
 $40 = $5;
 $41 = ($40|0)!=(0);
 $or$cond = $39 & $41;
 if ($or$cond) {
  $42 = HEAP32[2273]|0;
  $43 = $5;
  HEAP32[$vararg_buffer7>>2] = 13423;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $43;
  (_fprintf($42,13072,$vararg_buffer7)|0);
  _exit(1);
  // unreachable;
 }
 $44 = (_deflateEnd($4)|0);
 $5 = $44;
 $45 = $5;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = HEAP32[2273]|0;
  $48 = $5;
  HEAP32[$vararg_buffer11>>2] = 13431;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $48;
  (_fprintf($47,13072,$vararg_buffer11)|0);
  _exit(1);
  // unreachable;
 } else {
  $49 = ((($4)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $3;
  HEAP32[$51>>2] = $50;
  STACKTOP = sp;return;
 }
}
function _test_sync($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 48|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $6;
 (_strcpy($10,13095)|0);
 $11 = HEAP32[4487]|0;
 $12 = ((($9)) + 32|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[4488]|0;
 $14 = ((($9)) + 36|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($9)) + 40|0);
 HEAP32[$15>>2] = 0;
 $16 = $4;
 HEAP32[$9>>2] = $16;
 $17 = ((($9)) + 4|0);
 HEAP32[$17>>2] = 2;
 $18 = (_inflateInit_($9,15516,56)|0);
 $8 = $18;
 $19 = $8;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = HEAP32[2273]|0;
  $22 = $8;
  HEAP32[$vararg_buffer>>2] = 13442;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $22;
  (_fprintf($21,13072,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $23 = $6;
 $24 = ((($9)) + 12|0);
 HEAP32[$24>>2] = $23;
 $25 = $7;
 $26 = ((($9)) + 16|0);
 HEAP32[$26>>2] = $25;
 (_inflate($9,0)|0);
 $27 = $8;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = HEAP32[2273]|0;
  $30 = $8;
  HEAP32[$vararg_buffer2>>2] = 13454;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $30;
  (_fprintf($29,13072,$vararg_buffer2)|0);
  _exit(1);
  // unreachable;
 }
 $31 = $5;
 $32 = (($31) - 2)|0;
 $33 = ((($9)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = (_inflateSync($9)|0);
 $8 = $34;
 $35 = $8;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = HEAP32[2273]|0;
  $38 = $8;
  HEAP32[$vararg_buffer6>>2] = 13616;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $38;
  (_fprintf($37,13072,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 $39 = (_inflate($9,4)|0);
 $8 = $39;
 $40 = $8;
 $41 = ($40|0)!=(-3);
 if ($41) {
  $42 = HEAP32[2273]|0;
  (_fprintf($42,13628,$vararg_buffer10)|0);
  _exit(1);
  // unreachable;
 }
 $43 = (_inflateEnd($9)|0);
 $8 = $43;
 $44 = $8;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = HEAP32[2273]|0;
  $47 = $8;
  HEAP32[$vararg_buffer12>>2] = 13462;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $47;
  (_fprintf($46,13072,$vararg_buffer12)|0);
  _exit(1);
  // unreachable;
 } else {
  $48 = $6;
  HEAP32[$vararg_buffer16>>2] = $48;
  (_printf(13662,$vararg_buffer16)|0);
  STACKTOP = sp;return;
 }
}
function _test_dict_deflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
 var $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 40|0;
 $2 = $0;
 $3 = $1;
 $6 = HEAP32[4487]|0;
 $7 = ((($4)) + 32|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[4488]|0;
 $9 = ((($4)) + 36|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($4)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = (_deflateInit_($4,9,15516,56)|0);
 $5 = $11;
 $12 = $5;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = HEAP32[2273]|0;
  $15 = $5;
  HEAP32[$vararg_buffer>>2] = 13411;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  (_fprintf($14,13072,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $16 = (_deflateSetDictionary($4,13192,6)|0);
 $5 = $16;
 $17 = $5;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = HEAP32[2273]|0;
  $20 = $5;
  HEAP32[$vararg_buffer2>>2] = 13690;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $20;
  (_fprintf($19,13072,$vararg_buffer2)|0);
  _exit(1);
  // unreachable;
 }
 $21 = ((($4)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[4489] = $22;
 $23 = $2;
 $24 = ((($4)) + 12|0);
 HEAP32[$24>>2] = $23;
 $25 = $3;
 $26 = ((($4)) + 16|0);
 HEAP32[$26>>2] = $25;
 HEAP32[$4>>2] = 13058;
 $27 = (_strlen(13058)|0);
 $28 = (($27) + 1)|0;
 $29 = ((($4)) + 4|0);
 HEAP32[$29>>2] = $28;
 $30 = (_deflate($4,4)|0);
 $5 = $30;
 $31 = $5;
 $32 = ($31|0)!=(1);
 if ($32) {
  $33 = HEAP32[2273]|0;
  (_fprintf($33,13521,$vararg_buffer6)|0);
  _exit(1);
  // unreachable;
 }
 $34 = (_deflateEnd($4)|0);
 $5 = $34;
 $35 = $5;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = HEAP32[2273]|0;
  $38 = $5;
  HEAP32[$vararg_buffer8>>2] = 13431;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $38;
  (_fprintf($37,13072,$vararg_buffer8)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _test_dict_inflate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 48|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $6;
 (_strcpy($10,13095)|0);
 $11 = HEAP32[4487]|0;
 $12 = ((($9)) + 32|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[4488]|0;
 $14 = ((($9)) + 36|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($9)) + 40|0);
 HEAP32[$15>>2] = 0;
 $16 = $4;
 HEAP32[$9>>2] = $16;
 $17 = $5;
 $18 = ((($9)) + 4|0);
 HEAP32[$18>>2] = $17;
 $19 = (_inflateInit_($9,15516,56)|0);
 $8 = $19;
 $20 = $8;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = HEAP32[2273]|0;
  $23 = $8;
  HEAP32[$vararg_buffer>>2] = 13442;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $23;
  (_fprintf($22,13072,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $24 = $6;
 $25 = ((($9)) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = $7;
 $27 = ((($9)) + 16|0);
 HEAP32[$27>>2] = $26;
 while(1) {
  $28 = (_inflate($9,0)|0);
  $8 = $28;
  $29 = $8;
  $30 = ($29|0)==(1);
  if ($30) {
   label = 11;
   break;
  }
  $31 = $8;
  $32 = ($31|0)==(2);
  if ($32) {
   $33 = ((($9)) + 48|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[4489]|0;
   $36 = ($34|0)!=($35|0);
   if ($36) {
    label = 7;
    break;
   }
   $38 = (_inflateSetDictionary($9,13192,6)|0);
   $8 = $38;
  }
  $39 = $8;
  $40 = ($39|0)!=(0);
  if ($40) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 7) {
  $37 = HEAP32[2273]|0;
  (_fprintf($37,13711,$vararg_buffer2)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 10) {
  $41 = HEAP32[2273]|0;
  $42 = $8;
  HEAP32[$vararg_buffer4>>2] = 13733;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $42;
  (_fprintf($41,13072,$vararg_buffer4)|0);
  _exit(1);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $43 = (_inflateEnd($9)|0);
  $8 = $43;
  $44 = $8;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = HEAP32[2273]|0;
   $47 = $8;
   HEAP32[$vararg_buffer8>>2] = 13462;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $47;
   (_fprintf($46,13072,$vararg_buffer8)|0);
   _exit(1);
   // unreachable;
  }
  $48 = $6;
  $49 = (_strcmp($48,13058)|0);
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = HEAP32[2273]|0;
   (_fprintf($51,13751,$vararg_buffer12)|0);
   _exit(1);
   // unreachable;
  } else {
   $52 = $6;
   HEAP32[$vararg_buffer14>>2] = $52;
   (_printf(13774,$vararg_buffer14)|0);
   STACKTOP = sp;return;
  }
 }
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 40|0;
 $2 = 0;
 $3 = $0;
 $4 = $1;
 HEAP32[$7>>2] = 40000;
 $9 = HEAP32[$7>>2]|0;
 $8 = $9;
 $10 = (_zlibVersion()|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = HEAP32[2]|0;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($12|0)!=($15|0);
 if ($16) {
  $17 = HEAP32[2273]|0;
  (_fprintf($17,13803,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $18 = (_zlibVersion()|0);
 $19 = (_strcmp($18,15516)|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = HEAP32[2273]|0;
  (_fprintf($21,13830,$vararg_buffer2)|0);
 }
 $22 = (_zlibCompileFlags()|0);
 HEAP32[$vararg_buffer4>>2] = 15516;
 $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = 4736;
 $vararg_ptr7 = ((($vararg_buffer4)) + 8|0);
 HEAP32[$vararg_ptr7>>2] = $22;
 (_printf(13863,$vararg_buffer4)|0);
 $23 = HEAP32[$7>>2]|0;
 $24 = (_calloc($23,1)|0);
 $5 = $24;
 $25 = $8;
 $26 = (_calloc($25,1)|0);
 $6 = $26;
 $27 = $5;
 $28 = ($27|0)==(0|0);
 $29 = $6;
 $30 = ($29|0)==(0|0);
 $or$cond = $28 | $30;
 if ($or$cond) {
  (_printf(13912,$vararg_buffer8)|0);
  _exit(1);
  // unreachable;
 }
 $31 = $5;
 $32 = HEAP32[$7>>2]|0;
 $33 = $6;
 $34 = $8;
 _test_compress($31,$32,$33,$34);
 $35 = $3;
 $36 = ($35|0)>(1);
 if ($36) {
  $37 = $4;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $42 = $39;
 } else {
  $42 = 13927;
 }
 $40 = $6;
 $41 = $8;
 _test_gzio($42,$40,$41);
 $43 = $5;
 $44 = HEAP32[$7>>2]|0;
 _test_deflate($43,$44);
 $45 = $5;
 $46 = HEAP32[$7>>2]|0;
 $47 = $6;
 $48 = $8;
 _test_inflate($45,$46,$47,$48);
 $49 = $5;
 $50 = HEAP32[$7>>2]|0;
 $51 = $6;
 $52 = $8;
 _test_large_deflate($49,$50,$51,$52);
 $53 = $5;
 $54 = HEAP32[$7>>2]|0;
 $55 = $6;
 $56 = $8;
 _test_large_inflate($53,$54,$55,$56);
 $57 = $5;
 _test_flush($57,$7);
 $58 = $5;
 $59 = HEAP32[$7>>2]|0;
 $60 = $6;
 $61 = $8;
 _test_sync($58,$59,$60,$61);
 $62 = $8;
 HEAP32[$7>>2] = $62;
 $63 = $5;
 $64 = HEAP32[$7>>2]|0;
 _test_dict_deflate($63,$64);
 $65 = $5;
 $66 = HEAP32[$7>>2]|0;
 $67 = $6;
 $68 = $8;
 _test_dict_inflate($65,$66,$67,$68);
 $69 = $5;
 _free($69);
 $70 = $6;
 _free($70);
 STACKTOP = sp;return 0;
}
function _adler32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = $9 >>> 16;
 $11 = $10 & 65535;
 $7 = $11;
 $12 = $4;
 $13 = $12 & 65535;
 $4 = $13;
 $14 = $6;
 $15 = ($14|0)==(1);
 $16 = $5;
 if ($15) {
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $4;
  $20 = (($19) + ($18))|0;
  $4 = $20;
  $21 = $4;
  $22 = ($21>>>0)>=(65521);
  if ($22) {
   $23 = $4;
   $24 = (($23) - 65521)|0;
   $4 = $24;
  }
  $25 = $4;
  $26 = $7;
  $27 = (($26) + ($25))|0;
  $7 = $27;
  $28 = $7;
  $29 = ($28>>>0)>=(65521);
  if ($29) {
   $30 = $7;
   $31 = (($30) - 65521)|0;
   $7 = $31;
  }
  $32 = $4;
  $33 = $7;
  $34 = $33 << 16;
  $35 = $32 | $34;
  $3 = $35;
  $387 = $3;
  STACKTOP = sp;return ($387|0);
 }
 $36 = ($16|0)==(0|0);
 if ($36) {
  $3 = 1;
  $387 = $3;
  STACKTOP = sp;return ($387|0);
 }
 $37 = $6;
 $38 = ($37>>>0)<(16);
 if ($38) {
  while(1) {
   $39 = $6;
   $40 = (($39) + -1)|0;
   $6 = $40;
   $41 = ($39|0)!=(0);
   if (!($41)) {
    break;
   }
   $42 = $5;
   $43 = ((($42)) + 1|0);
   $5 = $43;
   $44 = HEAP8[$42>>0]|0;
   $45 = $44&255;
   $46 = $4;
   $47 = (($46) + ($45))|0;
   $4 = $47;
   $48 = $4;
   $49 = $7;
   $50 = (($49) + ($48))|0;
   $7 = $50;
  }
  $51 = $4;
  $52 = ($51>>>0)>=(65521);
  if ($52) {
   $53 = $4;
   $54 = (($53) - 65521)|0;
   $4 = $54;
  }
  $55 = $7;
  $56 = (($55>>>0) % 65521)&-1;
  $7 = $56;
  $57 = $4;
  $58 = $7;
  $59 = $58 << 16;
  $60 = $57 | $59;
  $3 = $60;
  $387 = $3;
  STACKTOP = sp;return ($387|0);
 }
 while(1) {
  $61 = $6;
  $62 = ($61>>>0)>=(5552);
  $63 = $6;
  if (!($62)) {
   break;
  }
  $64 = (($63) - 5552)|0;
  $6 = $64;
  $8 = 347;
  while(1) {
   $65 = $5;
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = $4;
   $69 = (($68) + ($67))|0;
   $4 = $69;
   $70 = $4;
   $71 = $7;
   $72 = (($71) + ($70))|0;
   $7 = $72;
   $73 = $5;
   $74 = ((($73)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $4;
   $78 = (($77) + ($76))|0;
   $4 = $78;
   $79 = $4;
   $80 = $7;
   $81 = (($80) + ($79))|0;
   $7 = $81;
   $82 = $5;
   $83 = ((($82)) + 2|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $4;
   $87 = (($86) + ($85))|0;
   $4 = $87;
   $88 = $4;
   $89 = $7;
   $90 = (($89) + ($88))|0;
   $7 = $90;
   $91 = $5;
   $92 = ((($91)) + 3|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $4;
   $96 = (($95) + ($94))|0;
   $4 = $96;
   $97 = $4;
   $98 = $7;
   $99 = (($98) + ($97))|0;
   $7 = $99;
   $100 = $5;
   $101 = ((($100)) + 4|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $4;
   $105 = (($104) + ($103))|0;
   $4 = $105;
   $106 = $4;
   $107 = $7;
   $108 = (($107) + ($106))|0;
   $7 = $108;
   $109 = $5;
   $110 = ((($109)) + 5|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = $4;
   $114 = (($113) + ($112))|0;
   $4 = $114;
   $115 = $4;
   $116 = $7;
   $117 = (($116) + ($115))|0;
   $7 = $117;
   $118 = $5;
   $119 = ((($118)) + 6|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $4;
   $123 = (($122) + ($121))|0;
   $4 = $123;
   $124 = $4;
   $125 = $7;
   $126 = (($125) + ($124))|0;
   $7 = $126;
   $127 = $5;
   $128 = ((($127)) + 7|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = $4;
   $132 = (($131) + ($130))|0;
   $4 = $132;
   $133 = $4;
   $134 = $7;
   $135 = (($134) + ($133))|0;
   $7 = $135;
   $136 = $5;
   $137 = ((($136)) + 8|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = $4;
   $141 = (($140) + ($139))|0;
   $4 = $141;
   $142 = $4;
   $143 = $7;
   $144 = (($143) + ($142))|0;
   $7 = $144;
   $145 = $5;
   $146 = ((($145)) + 9|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $4;
   $150 = (($149) + ($148))|0;
   $4 = $150;
   $151 = $4;
   $152 = $7;
   $153 = (($152) + ($151))|0;
   $7 = $153;
   $154 = $5;
   $155 = ((($154)) + 10|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = $4;
   $159 = (($158) + ($157))|0;
   $4 = $159;
   $160 = $4;
   $161 = $7;
   $162 = (($161) + ($160))|0;
   $7 = $162;
   $163 = $5;
   $164 = ((($163)) + 11|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = $4;
   $168 = (($167) + ($166))|0;
   $4 = $168;
   $169 = $4;
   $170 = $7;
   $171 = (($170) + ($169))|0;
   $7 = $171;
   $172 = $5;
   $173 = ((($172)) + 12|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = $4;
   $177 = (($176) + ($175))|0;
   $4 = $177;
   $178 = $4;
   $179 = $7;
   $180 = (($179) + ($178))|0;
   $7 = $180;
   $181 = $5;
   $182 = ((($181)) + 13|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = $4;
   $186 = (($185) + ($184))|0;
   $4 = $186;
   $187 = $4;
   $188 = $7;
   $189 = (($188) + ($187))|0;
   $7 = $189;
   $190 = $5;
   $191 = ((($190)) + 14|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = $4;
   $195 = (($194) + ($193))|0;
   $4 = $195;
   $196 = $4;
   $197 = $7;
   $198 = (($197) + ($196))|0;
   $7 = $198;
   $199 = $5;
   $200 = ((($199)) + 15|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = $4;
   $204 = (($203) + ($202))|0;
   $4 = $204;
   $205 = $4;
   $206 = $7;
   $207 = (($206) + ($205))|0;
   $7 = $207;
   $208 = $5;
   $209 = ((($208)) + 16|0);
   $5 = $209;
   $210 = $8;
   $211 = (($210) + -1)|0;
   $8 = $211;
   $212 = ($211|0)!=(0);
   if (!($212)) {
    break;
   }
  }
  $213 = $4;
  $214 = (($213>>>0) % 65521)&-1;
  $4 = $214;
  $215 = $7;
  $216 = (($215>>>0) % 65521)&-1;
  $7 = $216;
 }
 $217 = ($63|0)!=(0);
 if ($217) {
  while(1) {
   $218 = $6;
   $219 = ($218>>>0)>=(16);
   if (!($219)) {
    break;
   }
   $220 = $6;
   $221 = (($220) - 16)|0;
   $6 = $221;
   $222 = $5;
   $223 = HEAP8[$222>>0]|0;
   $224 = $223&255;
   $225 = $4;
   $226 = (($225) + ($224))|0;
   $4 = $226;
   $227 = $4;
   $228 = $7;
   $229 = (($228) + ($227))|0;
   $7 = $229;
   $230 = $5;
   $231 = ((($230)) + 1|0);
   $232 = HEAP8[$231>>0]|0;
   $233 = $232&255;
   $234 = $4;
   $235 = (($234) + ($233))|0;
   $4 = $235;
   $236 = $4;
   $237 = $7;
   $238 = (($237) + ($236))|0;
   $7 = $238;
   $239 = $5;
   $240 = ((($239)) + 2|0);
   $241 = HEAP8[$240>>0]|0;
   $242 = $241&255;
   $243 = $4;
   $244 = (($243) + ($242))|0;
   $4 = $244;
   $245 = $4;
   $246 = $7;
   $247 = (($246) + ($245))|0;
   $7 = $247;
   $248 = $5;
   $249 = ((($248)) + 3|0);
   $250 = HEAP8[$249>>0]|0;
   $251 = $250&255;
   $252 = $4;
   $253 = (($252) + ($251))|0;
   $4 = $253;
   $254 = $4;
   $255 = $7;
   $256 = (($255) + ($254))|0;
   $7 = $256;
   $257 = $5;
   $258 = ((($257)) + 4|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = $259&255;
   $261 = $4;
   $262 = (($261) + ($260))|0;
   $4 = $262;
   $263 = $4;
   $264 = $7;
   $265 = (($264) + ($263))|0;
   $7 = $265;
   $266 = $5;
   $267 = ((($266)) + 5|0);
   $268 = HEAP8[$267>>0]|0;
   $269 = $268&255;
   $270 = $4;
   $271 = (($270) + ($269))|0;
   $4 = $271;
   $272 = $4;
   $273 = $7;
   $274 = (($273) + ($272))|0;
   $7 = $274;
   $275 = $5;
   $276 = ((($275)) + 6|0);
   $277 = HEAP8[$276>>0]|0;
   $278 = $277&255;
   $279 = $4;
   $280 = (($279) + ($278))|0;
   $4 = $280;
   $281 = $4;
   $282 = $7;
   $283 = (($282) + ($281))|0;
   $7 = $283;
   $284 = $5;
   $285 = ((($284)) + 7|0);
   $286 = HEAP8[$285>>0]|0;
   $287 = $286&255;
   $288 = $4;
   $289 = (($288) + ($287))|0;
   $4 = $289;
   $290 = $4;
   $291 = $7;
   $292 = (($291) + ($290))|0;
   $7 = $292;
   $293 = $5;
   $294 = ((($293)) + 8|0);
   $295 = HEAP8[$294>>0]|0;
   $296 = $295&255;
   $297 = $4;
   $298 = (($297) + ($296))|0;
   $4 = $298;
   $299 = $4;
   $300 = $7;
   $301 = (($300) + ($299))|0;
   $7 = $301;
   $302 = $5;
   $303 = ((($302)) + 9|0);
   $304 = HEAP8[$303>>0]|0;
   $305 = $304&255;
   $306 = $4;
   $307 = (($306) + ($305))|0;
   $4 = $307;
   $308 = $4;
   $309 = $7;
   $310 = (($309) + ($308))|0;
   $7 = $310;
   $311 = $5;
   $312 = ((($311)) + 10|0);
   $313 = HEAP8[$312>>0]|0;
   $314 = $313&255;
   $315 = $4;
   $316 = (($315) + ($314))|0;
   $4 = $316;
   $317 = $4;
   $318 = $7;
   $319 = (($318) + ($317))|0;
   $7 = $319;
   $320 = $5;
   $321 = ((($320)) + 11|0);
   $322 = HEAP8[$321>>0]|0;
   $323 = $322&255;
   $324 = $4;
   $325 = (($324) + ($323))|0;
   $4 = $325;
   $326 = $4;
   $327 = $7;
   $328 = (($327) + ($326))|0;
   $7 = $328;
   $329 = $5;
   $330 = ((($329)) + 12|0);
   $331 = HEAP8[$330>>0]|0;
   $332 = $331&255;
   $333 = $4;
   $334 = (($333) + ($332))|0;
   $4 = $334;
   $335 = $4;
   $336 = $7;
   $337 = (($336) + ($335))|0;
   $7 = $337;
   $338 = $5;
   $339 = ((($338)) + 13|0);
   $340 = HEAP8[$339>>0]|0;
   $341 = $340&255;
   $342 = $4;
   $343 = (($342) + ($341))|0;
   $4 = $343;
   $344 = $4;
   $345 = $7;
   $346 = (($345) + ($344))|0;
   $7 = $346;
   $347 = $5;
   $348 = ((($347)) + 14|0);
   $349 = HEAP8[$348>>0]|0;
   $350 = $349&255;
   $351 = $4;
   $352 = (($351) + ($350))|0;
   $4 = $352;
   $353 = $4;
   $354 = $7;
   $355 = (($354) + ($353))|0;
   $7 = $355;
   $356 = $5;
   $357 = ((($356)) + 15|0);
   $358 = HEAP8[$357>>0]|0;
   $359 = $358&255;
   $360 = $4;
   $361 = (($360) + ($359))|0;
   $4 = $361;
   $362 = $4;
   $363 = $7;
   $364 = (($363) + ($362))|0;
   $7 = $364;
   $365 = $5;
   $366 = ((($365)) + 16|0);
   $5 = $366;
  }
  while(1) {
   $367 = $6;
   $368 = (($367) + -1)|0;
   $6 = $368;
   $369 = ($367|0)!=(0);
   if (!($369)) {
    break;
   }
   $370 = $5;
   $371 = ((($370)) + 1|0);
   $5 = $371;
   $372 = HEAP8[$370>>0]|0;
   $373 = $372&255;
   $374 = $4;
   $375 = (($374) + ($373))|0;
   $4 = $375;
   $376 = $4;
   $377 = $7;
   $378 = (($377) + ($376))|0;
   $7 = $378;
  }
  $379 = $4;
  $380 = (($379>>>0) % 65521)&-1;
  $4 = $380;
  $381 = $7;
  $382 = (($381>>>0) % 65521)&-1;
  $7 = $382;
 }
 $383 = $4;
 $384 = $7;
 $385 = $384 << 16;
 $386 = $383 | $385;
 $3 = $386;
 $387 = $3;
 STACKTOP = sp;return ($387|0);
}
function _compress2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $11 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $8;
 HEAP32[$11>>2] = $13;
 $14 = $9;
 $15 = ((($11)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = $6;
 $17 = ((($11)) + 12|0);
 HEAP32[$17>>2] = $16;
 $18 = $7;
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($11)) + 16|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($11)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $7;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($22|0)!=($24|0);
 if ($25) {
  $5 = -5;
  $46 = $5;
  STACKTOP = sp;return ($46|0);
 }
 $26 = ((($11)) + 32|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($11)) + 36|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($11)) + 40|0);
 HEAP32[$28>>2] = 0;
 $29 = $10;
 $30 = (_deflateInit_($11,$29,15516,56)|0);
 $12 = $30;
 $31 = $12;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $12;
  $5 = $33;
  $46 = $5;
  STACKTOP = sp;return ($46|0);
 }
 $34 = (_deflate($11,4)|0);
 $12 = $34;
 $35 = $12;
 $36 = ($35|0)!=(1);
 if ($36) {
  (_deflateEnd($11)|0);
  $37 = $12;
  $38 = ($37|0)==(0);
  $39 = $12;
  $40 = $38 ? -5 : $39;
  $5 = $40;
  $46 = $5;
  STACKTOP = sp;return ($46|0);
 } else {
  $41 = ((($11)) + 20|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $7;
  HEAP32[$43>>2] = $42;
  $44 = (_deflateEnd($11)|0);
  $12 = $44;
  $45 = $12;
  $5 = $45;
  $46 = $5;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _deflateInit_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (_deflateInit2_($8,$9,8,15,8,0,$10,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _deflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $15 = $3;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = $3;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  $21 = $4;
  $22 = ($21|0)>(5);
  $or$cond = $20 | $22;
  $23 = $4;
  $24 = ($23|0)<(0);
  $or$cond3 = $or$cond | $24;
  if (!($or$cond3)) {
   $25 = $3;
   $26 = ((($25)) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $6 = $27;
   $28 = $3;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   do {
    if (!($31)) {
     $32 = $3;
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $35 = $3;
      $36 = ((($35)) + 4|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)!=(0);
      if ($38) {
       break;
      }
     }
     $39 = $6;
     $40 = ((($39)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(666);
     $43 = $4;
     $44 = ($43|0)!=(4);
     $or$cond5 = $42 & $44;
     if (!($or$cond5)) {
      $48 = $3;
      $49 = ((($48)) + 16|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = HEAP32[(40)>>2]|0;
       $53 = $3;
       $54 = ((($53)) + 24|0);
       HEAP32[$54>>2] = $52;
       $2 = -5;
       $1147 = $2;
       STACKTOP = sp;return ($1147|0);
      }
      $55 = $3;
      $56 = $6;
      HEAP32[$56>>2] = $55;
      $57 = $6;
      $58 = ((($57)) + 40|0);
      $59 = HEAP32[$58>>2]|0;
      $5 = $59;
      $60 = $4;
      $61 = $6;
      $62 = ((($61)) + 40|0);
      HEAP32[$62>>2] = $60;
      $63 = $6;
      $64 = ((($63)) + 4|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(42);
      do {
       if ($66) {
        $67 = $6;
        $68 = ((($67)) + 24|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(2);
        if (!($70)) {
         $383 = $6;
         $384 = ((($383)) + 48|0);
         $385 = HEAP32[$384>>2]|0;
         $386 = (($385) - 8)|0;
         $387 = $386 << 4;
         $388 = (8 + ($387))|0;
         $389 = $388 << 8;
         $7 = $389;
         $390 = $6;
         $391 = ((($390)) + 136|0);
         $392 = HEAP32[$391>>2]|0;
         $393 = ($392|0)>=(2);
         do {
          if ($393) {
           label = 30;
          } else {
           $394 = $6;
           $395 = ((($394)) + 132|0);
           $396 = HEAP32[$395>>2]|0;
           $397 = ($396|0)<(2);
           if ($397) {
            label = 30;
           } else {
            $398 = $6;
            $399 = ((($398)) + 132|0);
            $400 = HEAP32[$399>>2]|0;
            $401 = ($400|0)<(6);
            if ($401) {
             $8 = 1;
             break;
            }
            $402 = $6;
            $403 = ((($402)) + 132|0);
            $404 = HEAP32[$403>>2]|0;
            $405 = ($404|0)==(6);
            if ($405) {
             $8 = 2;
             break;
            } else {
             $8 = 3;
             break;
            }
           }
          }
         } while(0);
         if ((label|0) == 30) {
          $8 = 0;
         }
         $406 = $8;
         $407 = $406 << 6;
         $408 = $7;
         $409 = $408 | $407;
         $7 = $409;
         $410 = $6;
         $411 = ((($410)) + 108|0);
         $412 = HEAP32[$411>>2]|0;
         $413 = ($412|0)!=(0);
         if ($413) {
          $414 = $7;
          $415 = $414 | 32;
          $7 = $415;
         }
         $416 = $7;
         $417 = (($416>>>0) % 31)&-1;
         $418 = (31 - ($417))|0;
         $419 = $7;
         $420 = (($419) + ($418))|0;
         $7 = $420;
         $421 = $6;
         $422 = ((($421)) + 4|0);
         HEAP32[$422>>2] = 113;
         $423 = $6;
         $424 = $7;
         _putShortMSB($423,$424);
         $425 = $6;
         $426 = ((($425)) + 108|0);
         $427 = HEAP32[$426>>2]|0;
         $428 = ($427|0)!=(0);
         if ($428) {
          $429 = $6;
          $430 = $3;
          $431 = ((($430)) + 48|0);
          $432 = HEAP32[$431>>2]|0;
          $433 = $432 >>> 16;
          _putShortMSB($429,$433);
          $434 = $6;
          $435 = $3;
          $436 = ((($435)) + 48|0);
          $437 = HEAP32[$436>>2]|0;
          $438 = $437 & 65535;
          _putShortMSB($434,$438);
         }
         $439 = (_adler32(0,0,0)|0);
         $440 = $3;
         $441 = ((($440)) + 48|0);
         HEAP32[$441>>2] = $439;
         break;
        }
        $71 = (_crc32(0,0,0)|0);
        $72 = $3;
        $73 = ((($72)) + 48|0);
        HEAP32[$73>>2] = $71;
        $74 = $6;
        $75 = ((($74)) + 20|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = (($76) + 1)|0;
        HEAP32[$75>>2] = $77;
        $78 = $6;
        $79 = ((($78)) + 8|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = (($80) + ($76)|0);
        HEAP8[$81>>0] = 31;
        $82 = $6;
        $83 = ((($82)) + 20|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = (($84) + 1)|0;
        HEAP32[$83>>2] = $85;
        $86 = $6;
        $87 = ((($86)) + 8|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (($88) + ($84)|0);
        HEAP8[$89>>0] = -117;
        $90 = $6;
        $91 = ((($90)) + 20|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = (($92) + 1)|0;
        HEAP32[$91>>2] = $93;
        $94 = $6;
        $95 = ((($94)) + 8|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = (($96) + ($92)|0);
        HEAP8[$97>>0] = 8;
        $98 = $6;
        $99 = ((($98)) + 28|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = ($100|0)==(0|0);
        $102 = $6;
        if ($101) {
         $103 = ((($102)) + 20|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = (($104) + 1)|0;
         HEAP32[$103>>2] = $105;
         $106 = $6;
         $107 = ((($106)) + 8|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = (($108) + ($104)|0);
         HEAP8[$109>>0] = 0;
         $110 = $6;
         $111 = ((($110)) + 20|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = (($112) + 1)|0;
         HEAP32[$111>>2] = $113;
         $114 = $6;
         $115 = ((($114)) + 8|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (($116) + ($112)|0);
         HEAP8[$117>>0] = 0;
         $118 = $6;
         $119 = ((($118)) + 20|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = (($120) + 1)|0;
         HEAP32[$119>>2] = $121;
         $122 = $6;
         $123 = ((($122)) + 8|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = (($124) + ($120)|0);
         HEAP8[$125>>0] = 0;
         $126 = $6;
         $127 = ((($126)) + 20|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = (($128) + 1)|0;
         HEAP32[$127>>2] = $129;
         $130 = $6;
         $131 = ((($130)) + 8|0);
         $132 = HEAP32[$131>>2]|0;
         $133 = (($132) + ($128)|0);
         HEAP8[$133>>0] = 0;
         $134 = $6;
         $135 = ((($134)) + 20|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = (($136) + 1)|0;
         HEAP32[$135>>2] = $137;
         $138 = $6;
         $139 = ((($138)) + 8|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = (($140) + ($136)|0);
         HEAP8[$141>>0] = 0;
         $142 = $6;
         $143 = ((($142)) + 132|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = ($144|0)==(9);
         if ($145) {
          $157 = 2;
         } else {
          $146 = $6;
          $147 = ((($146)) + 136|0);
          $148 = HEAP32[$147>>2]|0;
          $149 = ($148|0)>=(2);
          if ($149) {
           $154 = 1;
          } else {
           $150 = $6;
           $151 = ((($150)) + 132|0);
           $152 = HEAP32[$151>>2]|0;
           $153 = ($152|0)<(2);
           $154 = $153;
          }
          $155 = $154 ? 4 : 0;
          $157 = $155;
         }
         $156 = $157&255;
         $158 = $6;
         $159 = ((($158)) + 20|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = (($160) + 1)|0;
         HEAP32[$159>>2] = $161;
         $162 = $6;
         $163 = ((($162)) + 8|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = (($164) + ($160)|0);
         HEAP8[$165>>0] = $156;
         $166 = $6;
         $167 = ((($166)) + 20|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = (($168) + 1)|0;
         HEAP32[$167>>2] = $169;
         $170 = $6;
         $171 = ((($170)) + 8|0);
         $172 = HEAP32[$171>>2]|0;
         $173 = (($172) + ($168)|0);
         HEAP8[$173>>0] = 3;
         $174 = $6;
         $175 = ((($174)) + 4|0);
         HEAP32[$175>>2] = 113;
         break;
        }
        $176 = ((($102)) + 28|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)!=(0);
        $180 = $179 ? 1 : 0;
        $181 = $6;
        $182 = ((($181)) + 28|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ((($183)) + 44|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)!=(0);
        $187 = $186 ? 2 : 0;
        $188 = (($180) + ($187))|0;
        $189 = $6;
        $190 = ((($189)) + 28|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ((($191)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==(0|0);
        $195 = $194 ? 0 : 4;
        $196 = (($188) + ($195))|0;
        $197 = $6;
        $198 = ((($197)) + 28|0);
        $199 = HEAP32[$198>>2]|0;
        $200 = ((($199)) + 28|0);
        $201 = HEAP32[$200>>2]|0;
        $202 = ($201|0)==(0|0);
        $203 = $202 ? 0 : 8;
        $204 = (($196) + ($203))|0;
        $205 = $6;
        $206 = ((($205)) + 28|0);
        $207 = HEAP32[$206>>2]|0;
        $208 = ((($207)) + 36|0);
        $209 = HEAP32[$208>>2]|0;
        $210 = ($209|0)==(0|0);
        $211 = $210 ? 0 : 16;
        $212 = (($204) + ($211))|0;
        $213 = $212&255;
        $214 = $6;
        $215 = ((($214)) + 20|0);
        $216 = HEAP32[$215>>2]|0;
        $217 = (($216) + 1)|0;
        HEAP32[$215>>2] = $217;
        $218 = $6;
        $219 = ((($218)) + 8|0);
        $220 = HEAP32[$219>>2]|0;
        $221 = (($220) + ($216)|0);
        HEAP8[$221>>0] = $213;
        $222 = $6;
        $223 = ((($222)) + 28|0);
        $224 = HEAP32[$223>>2]|0;
        $225 = ((($224)) + 4|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = $226 & 255;
        $228 = $227&255;
        $229 = $6;
        $230 = ((($229)) + 20|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = (($231) + 1)|0;
        HEAP32[$230>>2] = $232;
        $233 = $6;
        $234 = ((($233)) + 8|0);
        $235 = HEAP32[$234>>2]|0;
        $236 = (($235) + ($231)|0);
        HEAP8[$236>>0] = $228;
        $237 = $6;
        $238 = ((($237)) + 28|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = ((($239)) + 4|0);
        $241 = HEAP32[$240>>2]|0;
        $242 = $241 >>> 8;
        $243 = $242 & 255;
        $244 = $243&255;
        $245 = $6;
        $246 = ((($245)) + 20|0);
        $247 = HEAP32[$246>>2]|0;
        $248 = (($247) + 1)|0;
        HEAP32[$246>>2] = $248;
        $249 = $6;
        $250 = ((($249)) + 8|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = (($251) + ($247)|0);
        HEAP8[$252>>0] = $244;
        $253 = $6;
        $254 = ((($253)) + 28|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = ((($255)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 >>> 16;
        $259 = $258 & 255;
        $260 = $259&255;
        $261 = $6;
        $262 = ((($261)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = (($263) + 1)|0;
        HEAP32[$262>>2] = $264;
        $265 = $6;
        $266 = ((($265)) + 8|0);
        $267 = HEAP32[$266>>2]|0;
        $268 = (($267) + ($263)|0);
        HEAP8[$268>>0] = $260;
        $269 = $6;
        $270 = ((($269)) + 28|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = ((($271)) + 4|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = $273 >>> 24;
        $275 = $274 & 255;
        $276 = $275&255;
        $277 = $6;
        $278 = ((($277)) + 20|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = (($279) + 1)|0;
        HEAP32[$278>>2] = $280;
        $281 = $6;
        $282 = ((($281)) + 8|0);
        $283 = HEAP32[$282>>2]|0;
        $284 = (($283) + ($279)|0);
        HEAP8[$284>>0] = $276;
        $285 = $6;
        $286 = ((($285)) + 132|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = ($287|0)==(9);
        if ($288) {
         $300 = 2;
        } else {
         $289 = $6;
         $290 = ((($289)) + 136|0);
         $291 = HEAP32[$290>>2]|0;
         $292 = ($291|0)>=(2);
         if ($292) {
          $297 = 1;
         } else {
          $293 = $6;
          $294 = ((($293)) + 132|0);
          $295 = HEAP32[$294>>2]|0;
          $296 = ($295|0)<(2);
          $297 = $296;
         }
         $298 = $297 ? 4 : 0;
         $300 = $298;
        }
        $299 = $300&255;
        $301 = $6;
        $302 = ((($301)) + 20|0);
        $303 = HEAP32[$302>>2]|0;
        $304 = (($303) + 1)|0;
        HEAP32[$302>>2] = $304;
        $305 = $6;
        $306 = ((($305)) + 8|0);
        $307 = HEAP32[$306>>2]|0;
        $308 = (($307) + ($303)|0);
        HEAP8[$308>>0] = $299;
        $309 = $6;
        $310 = ((($309)) + 28|0);
        $311 = HEAP32[$310>>2]|0;
        $312 = ((($311)) + 12|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = $313 & 255;
        $315 = $314&255;
        $316 = $6;
        $317 = ((($316)) + 20|0);
        $318 = HEAP32[$317>>2]|0;
        $319 = (($318) + 1)|0;
        HEAP32[$317>>2] = $319;
        $320 = $6;
        $321 = ((($320)) + 8|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = (($322) + ($318)|0);
        HEAP8[$323>>0] = $315;
        $324 = $6;
        $325 = ((($324)) + 28|0);
        $326 = HEAP32[$325>>2]|0;
        $327 = ((($326)) + 16|0);
        $328 = HEAP32[$327>>2]|0;
        $329 = ($328|0)!=(0|0);
        if ($329) {
         $330 = $6;
         $331 = ((($330)) + 28|0);
         $332 = HEAP32[$331>>2]|0;
         $333 = ((($332)) + 20|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = $334 & 255;
         $336 = $335&255;
         $337 = $6;
         $338 = ((($337)) + 20|0);
         $339 = HEAP32[$338>>2]|0;
         $340 = (($339) + 1)|0;
         HEAP32[$338>>2] = $340;
         $341 = $6;
         $342 = ((($341)) + 8|0);
         $343 = HEAP32[$342>>2]|0;
         $344 = (($343) + ($339)|0);
         HEAP8[$344>>0] = $336;
         $345 = $6;
         $346 = ((($345)) + 28|0);
         $347 = HEAP32[$346>>2]|0;
         $348 = ((($347)) + 20|0);
         $349 = HEAP32[$348>>2]|0;
         $350 = $349 >>> 8;
         $351 = $350 & 255;
         $352 = $351&255;
         $353 = $6;
         $354 = ((($353)) + 20|0);
         $355 = HEAP32[$354>>2]|0;
         $356 = (($355) + 1)|0;
         HEAP32[$354>>2] = $356;
         $357 = $6;
         $358 = ((($357)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = (($359) + ($355)|0);
         HEAP8[$360>>0] = $352;
        }
        $361 = $6;
        $362 = ((($361)) + 28|0);
        $363 = HEAP32[$362>>2]|0;
        $364 = ((($363)) + 44|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = ($365|0)!=(0);
        if ($366) {
         $367 = $3;
         $368 = ((($367)) + 48|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = $6;
         $371 = ((($370)) + 8|0);
         $372 = HEAP32[$371>>2]|0;
         $373 = $6;
         $374 = ((($373)) + 20|0);
         $375 = HEAP32[$374>>2]|0;
         $376 = (_crc32($369,$372,$375)|0);
         $377 = $3;
         $378 = ((($377)) + 48|0);
         HEAP32[$378>>2] = $376;
        }
        $379 = $6;
        $380 = ((($379)) + 32|0);
        HEAP32[$380>>2] = 0;
        $381 = $6;
        $382 = ((($381)) + 4|0);
        HEAP32[$382>>2] = 69;
       }
      } while(0);
      $442 = $6;
      $443 = ((($442)) + 4|0);
      $444 = HEAP32[$443>>2]|0;
      $445 = ($444|0)==(69);
      do {
       if ($445) {
        $446 = $6;
        $447 = ((($446)) + 28|0);
        $448 = HEAP32[$447>>2]|0;
        $449 = ((($448)) + 16|0);
        $450 = HEAP32[$449>>2]|0;
        $451 = ($450|0)!=(0|0);
        $452 = $6;
        if (!($451)) {
         $572 = ((($452)) + 4|0);
         HEAP32[$572>>2] = 73;
         break;
        }
        $453 = ((($452)) + 20|0);
        $454 = HEAP32[$453>>2]|0;
        $9 = $454;
        while(1) {
         $455 = $6;
         $456 = ((($455)) + 32|0);
         $457 = HEAP32[$456>>2]|0;
         $458 = $6;
         $459 = ((($458)) + 28|0);
         $460 = HEAP32[$459>>2]|0;
         $461 = ((($460)) + 20|0);
         $462 = HEAP32[$461>>2]|0;
         $463 = $462 & 65535;
         $464 = ($457>>>0)<($463>>>0);
         if (!($464)) {
          break;
         }
         $465 = $6;
         $466 = ((($465)) + 20|0);
         $467 = HEAP32[$466>>2]|0;
         $468 = $6;
         $469 = ((($468)) + 12|0);
         $470 = HEAP32[$469>>2]|0;
         $471 = ($467|0)==($470|0);
         if ($471) {
          $472 = $6;
          $473 = ((($472)) + 28|0);
          $474 = HEAP32[$473>>2]|0;
          $475 = ((($474)) + 44|0);
          $476 = HEAP32[$475>>2]|0;
          $477 = ($476|0)!=(0);
          if ($477) {
           $478 = $6;
           $479 = ((($478)) + 20|0);
           $480 = HEAP32[$479>>2]|0;
           $481 = $9;
           $482 = ($480>>>0)>($481>>>0);
           if ($482) {
            $483 = $3;
            $484 = ((($483)) + 48|0);
            $485 = HEAP32[$484>>2]|0;
            $486 = $6;
            $487 = ((($486)) + 8|0);
            $488 = HEAP32[$487>>2]|0;
            $489 = $9;
            $490 = (($488) + ($489)|0);
            $491 = $6;
            $492 = ((($491)) + 20|0);
            $493 = HEAP32[$492>>2]|0;
            $494 = $9;
            $495 = (($493) - ($494))|0;
            $496 = (_crc32($485,$490,$495)|0);
            $497 = $3;
            $498 = ((($497)) + 48|0);
            HEAP32[$498>>2] = $496;
           }
          }
          $499 = $3;
          _flush_pending($499);
          $500 = $6;
          $501 = ((($500)) + 20|0);
          $502 = HEAP32[$501>>2]|0;
          $9 = $502;
          $503 = $6;
          $504 = ((($503)) + 20|0);
          $505 = HEAP32[$504>>2]|0;
          $506 = $6;
          $507 = ((($506)) + 12|0);
          $508 = HEAP32[$507>>2]|0;
          $509 = ($505|0)==($508|0);
          if ($509) {
           break;
          }
         }
         $510 = $6;
         $511 = ((($510)) + 32|0);
         $512 = HEAP32[$511>>2]|0;
         $513 = $6;
         $514 = ((($513)) + 28|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ((($515)) + 16|0);
         $517 = HEAP32[$516>>2]|0;
         $518 = (($517) + ($512)|0);
         $519 = HEAP8[$518>>0]|0;
         $520 = $6;
         $521 = ((($520)) + 20|0);
         $522 = HEAP32[$521>>2]|0;
         $523 = (($522) + 1)|0;
         HEAP32[$521>>2] = $523;
         $524 = $6;
         $525 = ((($524)) + 8|0);
         $526 = HEAP32[$525>>2]|0;
         $527 = (($526) + ($522)|0);
         HEAP8[$527>>0] = $519;
         $528 = $6;
         $529 = ((($528)) + 32|0);
         $530 = HEAP32[$529>>2]|0;
         $531 = (($530) + 1)|0;
         HEAP32[$529>>2] = $531;
        }
        $532 = $6;
        $533 = ((($532)) + 28|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = ((($534)) + 44|0);
        $536 = HEAP32[$535>>2]|0;
        $537 = ($536|0)!=(0);
        if ($537) {
         $538 = $6;
         $539 = ((($538)) + 20|0);
         $540 = HEAP32[$539>>2]|0;
         $541 = $9;
         $542 = ($540>>>0)>($541>>>0);
         if ($542) {
          $543 = $3;
          $544 = ((($543)) + 48|0);
          $545 = HEAP32[$544>>2]|0;
          $546 = $6;
          $547 = ((($546)) + 8|0);
          $548 = HEAP32[$547>>2]|0;
          $549 = $9;
          $550 = (($548) + ($549)|0);
          $551 = $6;
          $552 = ((($551)) + 20|0);
          $553 = HEAP32[$552>>2]|0;
          $554 = $9;
          $555 = (($553) - ($554))|0;
          $556 = (_crc32($545,$550,$555)|0);
          $557 = $3;
          $558 = ((($557)) + 48|0);
          HEAP32[$558>>2] = $556;
         }
        }
        $559 = $6;
        $560 = ((($559)) + 32|0);
        $561 = HEAP32[$560>>2]|0;
        $562 = $6;
        $563 = ((($562)) + 28|0);
        $564 = HEAP32[$563>>2]|0;
        $565 = ((($564)) + 20|0);
        $566 = HEAP32[$565>>2]|0;
        $567 = ($561|0)==($566|0);
        if ($567) {
         $568 = $6;
         $569 = ((($568)) + 32|0);
         HEAP32[$569>>2] = 0;
         $570 = $6;
         $571 = ((($570)) + 4|0);
         HEAP32[$571>>2] = 73;
        }
       }
      } while(0);
      $573 = $6;
      $574 = ((($573)) + 4|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = ($575|0)==(73);
      do {
       if ($576) {
        $577 = $6;
        $578 = ((($577)) + 28|0);
        $579 = HEAP32[$578>>2]|0;
        $580 = ((($579)) + 28|0);
        $581 = HEAP32[$580>>2]|0;
        $582 = ($581|0)!=(0|0);
        $583 = $6;
        if (!($582)) {
         $688 = ((($583)) + 4|0);
         HEAP32[$688>>2] = 91;
         break;
        }
        $584 = ((($583)) + 20|0);
        $585 = HEAP32[$584>>2]|0;
        $10 = $585;
        while(1) {
         $586 = $6;
         $587 = ((($586)) + 20|0);
         $588 = HEAP32[$587>>2]|0;
         $589 = $6;
         $590 = ((($589)) + 12|0);
         $591 = HEAP32[$590>>2]|0;
         $592 = ($588|0)==($591|0);
         if ($592) {
          $593 = $6;
          $594 = ((($593)) + 28|0);
          $595 = HEAP32[$594>>2]|0;
          $596 = ((($595)) + 44|0);
          $597 = HEAP32[$596>>2]|0;
          $598 = ($597|0)!=(0);
          if ($598) {
           $599 = $6;
           $600 = ((($599)) + 20|0);
           $601 = HEAP32[$600>>2]|0;
           $602 = $10;
           $603 = ($601>>>0)>($602>>>0);
           if ($603) {
            $604 = $3;
            $605 = ((($604)) + 48|0);
            $606 = HEAP32[$605>>2]|0;
            $607 = $6;
            $608 = ((($607)) + 8|0);
            $609 = HEAP32[$608>>2]|0;
            $610 = $10;
            $611 = (($609) + ($610)|0);
            $612 = $6;
            $613 = ((($612)) + 20|0);
            $614 = HEAP32[$613>>2]|0;
            $615 = $10;
            $616 = (($614) - ($615))|0;
            $617 = (_crc32($606,$611,$616)|0);
            $618 = $3;
            $619 = ((($618)) + 48|0);
            HEAP32[$619>>2] = $617;
           }
          }
          $620 = $3;
          _flush_pending($620);
          $621 = $6;
          $622 = ((($621)) + 20|0);
          $623 = HEAP32[$622>>2]|0;
          $10 = $623;
          $624 = $6;
          $625 = ((($624)) + 20|0);
          $626 = HEAP32[$625>>2]|0;
          $627 = $6;
          $628 = ((($627)) + 12|0);
          $629 = HEAP32[$628>>2]|0;
          $630 = ($626|0)==($629|0);
          if ($630) {
           label = 65;
           break;
          }
         }
         $631 = $6;
         $632 = ((($631)) + 32|0);
         $633 = HEAP32[$632>>2]|0;
         $634 = (($633) + 1)|0;
         HEAP32[$632>>2] = $634;
         $635 = $6;
         $636 = ((($635)) + 28|0);
         $637 = HEAP32[$636>>2]|0;
         $638 = ((($637)) + 28|0);
         $639 = HEAP32[$638>>2]|0;
         $640 = (($639) + ($633)|0);
         $641 = HEAP8[$640>>0]|0;
         $642 = $641&255;
         $11 = $642;
         $643 = $11;
         $644 = $643&255;
         $645 = $6;
         $646 = ((($645)) + 20|0);
         $647 = HEAP32[$646>>2]|0;
         $648 = (($647) + 1)|0;
         HEAP32[$646>>2] = $648;
         $649 = $6;
         $650 = ((($649)) + 8|0);
         $651 = HEAP32[$650>>2]|0;
         $652 = (($651) + ($647)|0);
         HEAP8[$652>>0] = $644;
         $653 = $11;
         $654 = ($653|0)!=(0);
         if (!($654)) {
          break;
         }
        }
        if ((label|0) == 65) {
         $11 = 1;
        }
        $655 = $6;
        $656 = ((($655)) + 28|0);
        $657 = HEAP32[$656>>2]|0;
        $658 = ((($657)) + 44|0);
        $659 = HEAP32[$658>>2]|0;
        $660 = ($659|0)!=(0);
        if ($660) {
         $661 = $6;
         $662 = ((($661)) + 20|0);
         $663 = HEAP32[$662>>2]|0;
         $664 = $10;
         $665 = ($663>>>0)>($664>>>0);
         if ($665) {
          $666 = $3;
          $667 = ((($666)) + 48|0);
          $668 = HEAP32[$667>>2]|0;
          $669 = $6;
          $670 = ((($669)) + 8|0);
          $671 = HEAP32[$670>>2]|0;
          $672 = $10;
          $673 = (($671) + ($672)|0);
          $674 = $6;
          $675 = ((($674)) + 20|0);
          $676 = HEAP32[$675>>2]|0;
          $677 = $10;
          $678 = (($676) - ($677))|0;
          $679 = (_crc32($668,$673,$678)|0);
          $680 = $3;
          $681 = ((($680)) + 48|0);
          HEAP32[$681>>2] = $679;
         }
        }
        $682 = $11;
        $683 = ($682|0)==(0);
        if ($683) {
         $684 = $6;
         $685 = ((($684)) + 32|0);
         HEAP32[$685>>2] = 0;
         $686 = $6;
         $687 = ((($686)) + 4|0);
         HEAP32[$687>>2] = 91;
        }
       }
      } while(0);
      $689 = $6;
      $690 = ((($689)) + 4|0);
      $691 = HEAP32[$690>>2]|0;
      $692 = ($691|0)==(91);
      do {
       if ($692) {
        $693 = $6;
        $694 = ((($693)) + 28|0);
        $695 = HEAP32[$694>>2]|0;
        $696 = ((($695)) + 36|0);
        $697 = HEAP32[$696>>2]|0;
        $698 = ($697|0)!=(0|0);
        $699 = $6;
        if (!($698)) {
         $802 = ((($699)) + 4|0);
         HEAP32[$802>>2] = 103;
         break;
        }
        $700 = ((($699)) + 20|0);
        $701 = HEAP32[$700>>2]|0;
        $12 = $701;
        while(1) {
         $702 = $6;
         $703 = ((($702)) + 20|0);
         $704 = HEAP32[$703>>2]|0;
         $705 = $6;
         $706 = ((($705)) + 12|0);
         $707 = HEAP32[$706>>2]|0;
         $708 = ($704|0)==($707|0);
         if ($708) {
          $709 = $6;
          $710 = ((($709)) + 28|0);
          $711 = HEAP32[$710>>2]|0;
          $712 = ((($711)) + 44|0);
          $713 = HEAP32[$712>>2]|0;
          $714 = ($713|0)!=(0);
          if ($714) {
           $715 = $6;
           $716 = ((($715)) + 20|0);
           $717 = HEAP32[$716>>2]|0;
           $718 = $12;
           $719 = ($717>>>0)>($718>>>0);
           if ($719) {
            $720 = $3;
            $721 = ((($720)) + 48|0);
            $722 = HEAP32[$721>>2]|0;
            $723 = $6;
            $724 = ((($723)) + 8|0);
            $725 = HEAP32[$724>>2]|0;
            $726 = $12;
            $727 = (($725) + ($726)|0);
            $728 = $6;
            $729 = ((($728)) + 20|0);
            $730 = HEAP32[$729>>2]|0;
            $731 = $12;
            $732 = (($730) - ($731))|0;
            $733 = (_crc32($722,$727,$732)|0);
            $734 = $3;
            $735 = ((($734)) + 48|0);
            HEAP32[$735>>2] = $733;
           }
          }
          $736 = $3;
          _flush_pending($736);
          $737 = $6;
          $738 = ((($737)) + 20|0);
          $739 = HEAP32[$738>>2]|0;
          $12 = $739;
          $740 = $6;
          $741 = ((($740)) + 20|0);
          $742 = HEAP32[$741>>2]|0;
          $743 = $6;
          $744 = ((($743)) + 12|0);
          $745 = HEAP32[$744>>2]|0;
          $746 = ($742|0)==($745|0);
          if ($746) {
           label = 81;
           break;
          }
         }
         $747 = $6;
         $748 = ((($747)) + 32|0);
         $749 = HEAP32[$748>>2]|0;
         $750 = (($749) + 1)|0;
         HEAP32[$748>>2] = $750;
         $751 = $6;
         $752 = ((($751)) + 28|0);
         $753 = HEAP32[$752>>2]|0;
         $754 = ((($753)) + 36|0);
         $755 = HEAP32[$754>>2]|0;
         $756 = (($755) + ($749)|0);
         $757 = HEAP8[$756>>0]|0;
         $758 = $757&255;
         $13 = $758;
         $759 = $13;
         $760 = $759&255;
         $761 = $6;
         $762 = ((($761)) + 20|0);
         $763 = HEAP32[$762>>2]|0;
         $764 = (($763) + 1)|0;
         HEAP32[$762>>2] = $764;
         $765 = $6;
         $766 = ((($765)) + 8|0);
         $767 = HEAP32[$766>>2]|0;
         $768 = (($767) + ($763)|0);
         HEAP8[$768>>0] = $760;
         $769 = $13;
         $770 = ($769|0)!=(0);
         if (!($770)) {
          break;
         }
        }
        if ((label|0) == 81) {
         $13 = 1;
        }
        $771 = $6;
        $772 = ((($771)) + 28|0);
        $773 = HEAP32[$772>>2]|0;
        $774 = ((($773)) + 44|0);
        $775 = HEAP32[$774>>2]|0;
        $776 = ($775|0)!=(0);
        if ($776) {
         $777 = $6;
         $778 = ((($777)) + 20|0);
         $779 = HEAP32[$778>>2]|0;
         $780 = $12;
         $781 = ($779>>>0)>($780>>>0);
         if ($781) {
          $782 = $3;
          $783 = ((($782)) + 48|0);
          $784 = HEAP32[$783>>2]|0;
          $785 = $6;
          $786 = ((($785)) + 8|0);
          $787 = HEAP32[$786>>2]|0;
          $788 = $12;
          $789 = (($787) + ($788)|0);
          $790 = $6;
          $791 = ((($790)) + 20|0);
          $792 = HEAP32[$791>>2]|0;
          $793 = $12;
          $794 = (($792) - ($793))|0;
          $795 = (_crc32($784,$789,$794)|0);
          $796 = $3;
          $797 = ((($796)) + 48|0);
          HEAP32[$797>>2] = $795;
         }
        }
        $798 = $13;
        $799 = ($798|0)==(0);
        if ($799) {
         $800 = $6;
         $801 = ((($800)) + 4|0);
         HEAP32[$801>>2] = 103;
        }
       }
      } while(0);
      $803 = $6;
      $804 = ((($803)) + 4|0);
      $805 = HEAP32[$804>>2]|0;
      $806 = ($805|0)==(103);
      do {
       if ($806) {
        $807 = $6;
        $808 = ((($807)) + 28|0);
        $809 = HEAP32[$808>>2]|0;
        $810 = ((($809)) + 44|0);
        $811 = HEAP32[$810>>2]|0;
        $812 = ($811|0)!=(0);
        $813 = $6;
        if (!($812)) {
         $862 = ((($813)) + 4|0);
         HEAP32[$862>>2] = 113;
         break;
        }
        $814 = ((($813)) + 20|0);
        $815 = HEAP32[$814>>2]|0;
        $816 = (($815) + 2)|0;
        $817 = $6;
        $818 = ((($817)) + 12|0);
        $819 = HEAP32[$818>>2]|0;
        $820 = ($816>>>0)>($819>>>0);
        if ($820) {
         $821 = $3;
         _flush_pending($821);
        }
        $822 = $6;
        $823 = ((($822)) + 20|0);
        $824 = HEAP32[$823>>2]|0;
        $825 = (($824) + 2)|0;
        $826 = $6;
        $827 = ((($826)) + 12|0);
        $828 = HEAP32[$827>>2]|0;
        $829 = ($825>>>0)<=($828>>>0);
        if ($829) {
         $830 = $3;
         $831 = ((($830)) + 48|0);
         $832 = HEAP32[$831>>2]|0;
         $833 = $832 & 255;
         $834 = $833&255;
         $835 = $6;
         $836 = ((($835)) + 20|0);
         $837 = HEAP32[$836>>2]|0;
         $838 = (($837) + 1)|0;
         HEAP32[$836>>2] = $838;
         $839 = $6;
         $840 = ((($839)) + 8|0);
         $841 = HEAP32[$840>>2]|0;
         $842 = (($841) + ($837)|0);
         HEAP8[$842>>0] = $834;
         $843 = $3;
         $844 = ((($843)) + 48|0);
         $845 = HEAP32[$844>>2]|0;
         $846 = $845 >>> 8;
         $847 = $846 & 255;
         $848 = $847&255;
         $849 = $6;
         $850 = ((($849)) + 20|0);
         $851 = HEAP32[$850>>2]|0;
         $852 = (($851) + 1)|0;
         HEAP32[$850>>2] = $852;
         $853 = $6;
         $854 = ((($853)) + 8|0);
         $855 = HEAP32[$854>>2]|0;
         $856 = (($855) + ($851)|0);
         HEAP8[$856>>0] = $848;
         $857 = (_crc32(0,0,0)|0);
         $858 = $3;
         $859 = ((($858)) + 48|0);
         HEAP32[$859>>2] = $857;
         $860 = $6;
         $861 = ((($860)) + 4|0);
         HEAP32[$861>>2] = 113;
        }
       }
      } while(0);
      $863 = $6;
      $864 = ((($863)) + 20|0);
      $865 = HEAP32[$864>>2]|0;
      $866 = ($865|0)!=(0);
      $867 = $3;
      if ($866) {
       _flush_pending($867);
       $868 = $3;
       $869 = ((($868)) + 16|0);
       $870 = HEAP32[$869>>2]|0;
       $871 = ($870|0)==(0);
       if ($871) {
        $872 = $6;
        $873 = ((($872)) + 40|0);
        HEAP32[$873>>2] = -1;
        $2 = 0;
        $1147 = $2;
        STACKTOP = sp;return ($1147|0);
       }
      } else {
       $874 = ((($867)) + 4|0);
       $875 = HEAP32[$874>>2]|0;
       $876 = ($875|0)==(0);
       if ($876) {
        $877 = $4;
        $878 = $877 << 1;
        $879 = $4;
        $880 = ($879|0)>(4);
        $881 = $880 ? 9 : 0;
        $882 = (($878) - ($881))|0;
        $883 = $5;
        $884 = $883 << 1;
        $885 = $5;
        $886 = ($885|0)>(4);
        $887 = $886 ? 9 : 0;
        $888 = (($884) - ($887))|0;
        $889 = ($882|0)<=($888|0);
        $890 = $4;
        $891 = ($890|0)!=(4);
        $or$cond7 = $889 & $891;
        if ($or$cond7) {
         $892 = HEAP32[(40)>>2]|0;
         $893 = $3;
         $894 = ((($893)) + 24|0);
         HEAP32[$894>>2] = $892;
         $2 = -5;
         $1147 = $2;
         STACKTOP = sp;return ($1147|0);
        }
       }
      }
      $895 = $6;
      $896 = ((($895)) + 4|0);
      $897 = HEAP32[$896>>2]|0;
      $898 = ($897|0)==(666);
      if ($898) {
       $899 = $3;
       $900 = ((($899)) + 4|0);
       $901 = HEAP32[$900>>2]|0;
       $902 = ($901|0)!=(0);
       if ($902) {
        $903 = HEAP32[(40)>>2]|0;
        $904 = $3;
        $905 = ((($904)) + 24|0);
        HEAP32[$905>>2] = $903;
        $2 = -5;
        $1147 = $2;
        STACKTOP = sp;return ($1147|0);
       }
      }
      $906 = $3;
      $907 = ((($906)) + 4|0);
      $908 = HEAP32[$907>>2]|0;
      $909 = ($908|0)!=(0);
      if ($909) {
       label = 109;
      } else {
       $910 = $6;
       $911 = ((($910)) + 116|0);
       $912 = HEAP32[$911>>2]|0;
       $913 = ($912|0)!=(0);
       if ($913) {
        label = 109;
       } else {
        $914 = $4;
        $915 = ($914|0)!=(0);
        if ($915) {
         $916 = $6;
         $917 = ((($916)) + 4|0);
         $918 = HEAP32[$917>>2]|0;
         $919 = ($918|0)!=(666);
         if ($919) {
          label = 109;
         }
        }
       }
      }
      do {
       if ((label|0) == 109) {
        $920 = $6;
        $921 = ((($920)) + 136|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = ($922|0)==(2);
        $924 = $6;
        do {
         if ($923) {
          $925 = $4;
          $926 = (_deflate_huff($924,$925)|0);
          $941 = $926;
         } else {
          $927 = ((($924)) + 136|0);
          $928 = HEAP32[$927>>2]|0;
          $929 = ($928|0)==(3);
          $930 = $6;
          if ($929) {
           $931 = $4;
           $932 = (_deflate_rle($930,$931)|0);
           $941 = $932;
           break;
          } else {
           $933 = ((($930)) + 132|0);
           $934 = HEAP32[$933>>2]|0;
           $935 = (52 + (($934*12)|0)|0);
           $936 = ((($935)) + 8|0);
           $937 = HEAP32[$936>>2]|0;
           $938 = $6;
           $939 = $4;
           $940 = (FUNCTION_TABLE_iii[$937 & 3]($938,$939)|0);
           $941 = $940;
           break;
          }
         }
        } while(0);
        $14 = $941;
        $942 = $14;
        $943 = ($942|0)==(2);
        $944 = $14;
        $945 = ($944|0)==(3);
        $or$cond9 = $943 | $945;
        if ($or$cond9) {
         $946 = $6;
         $947 = ((($946)) + 4|0);
         HEAP32[$947>>2] = 666;
        }
        $948 = $14;
        $949 = ($948|0)==(0);
        $950 = $14;
        $951 = ($950|0)==(2);
        $or$cond11 = $949 | $951;
        if ($or$cond11) {
         $952 = $3;
         $953 = ((($952)) + 16|0);
         $954 = HEAP32[$953>>2]|0;
         $955 = ($954|0)==(0);
         if ($955) {
          $956 = $6;
          $957 = ((($956)) + 40|0);
          HEAP32[$957>>2] = -1;
         }
         $2 = 0;
         $1147 = $2;
         STACKTOP = sp;return ($1147|0);
        }
        $958 = $14;
        $959 = ($958|0)==(1);
        if (!($959)) {
         break;
        }
        $960 = $4;
        $961 = ($960|0)==(1);
        do {
         if ($961) {
          $962 = $6;
          __tr_align($962);
         } else {
          $963 = $4;
          $964 = ($963|0)!=(5);
          if (!($964)) {
           break;
          }
          $965 = $6;
          __tr_stored_block($965,0,0,0);
          $966 = $4;
          $967 = ($966|0)==(3);
          if (!($967)) {
           break;
          }
          $968 = $6;
          $969 = ((($968)) + 76|0);
          $970 = HEAP32[$969>>2]|0;
          $971 = (($970) - 1)|0;
          $972 = $6;
          $973 = ((($972)) + 68|0);
          $974 = HEAP32[$973>>2]|0;
          $975 = (($974) + ($971<<1)|0);
          HEAP16[$975>>1] = 0;
          $976 = $6;
          $977 = ((($976)) + 68|0);
          $978 = HEAP32[$977>>2]|0;
          $979 = $6;
          $980 = ((($979)) + 76|0);
          $981 = HEAP32[$980>>2]|0;
          $982 = (($981) - 1)|0;
          $983 = $982<<1;
          _memset(($978|0),0,($983|0))|0;
          $984 = $6;
          $985 = ((($984)) + 116|0);
          $986 = HEAP32[$985>>2]|0;
          $987 = ($986|0)==(0);
          if (!($987)) {
           break;
          }
          $988 = $6;
          $989 = ((($988)) + 108|0);
          HEAP32[$989>>2] = 0;
          $990 = $6;
          $991 = ((($990)) + 92|0);
          HEAP32[$991>>2] = 0;
          $992 = $6;
          $993 = ((($992)) + 5812|0);
          HEAP32[$993>>2] = 0;
         }
        } while(0);
        $994 = $3;
        _flush_pending($994);
        $995 = $3;
        $996 = ((($995)) + 16|0);
        $997 = HEAP32[$996>>2]|0;
        $998 = ($997|0)==(0);
        if (!($998)) {
         break;
        }
        $999 = $6;
        $1000 = ((($999)) + 40|0);
        HEAP32[$1000>>2] = -1;
        $2 = 0;
        $1147 = $2;
        STACKTOP = sp;return ($1147|0);
       }
      } while(0);
      $1001 = $4;
      $1002 = ($1001|0)!=(4);
      if ($1002) {
       $2 = 0;
       $1147 = $2;
       STACKTOP = sp;return ($1147|0);
      }
      $1003 = $6;
      $1004 = ((($1003)) + 24|0);
      $1005 = HEAP32[$1004>>2]|0;
      $1006 = ($1005|0)<=(0);
      if ($1006) {
       $2 = 1;
       $1147 = $2;
       STACKTOP = sp;return ($1147|0);
      }
      $1007 = $6;
      $1008 = ((($1007)) + 24|0);
      $1009 = HEAP32[$1008>>2]|0;
      $1010 = ($1009|0)==(2);
      if ($1010) {
       $1011 = $3;
       $1012 = ((($1011)) + 48|0);
       $1013 = HEAP32[$1012>>2]|0;
       $1014 = $1013 & 255;
       $1015 = $1014&255;
       $1016 = $6;
       $1017 = ((($1016)) + 20|0);
       $1018 = HEAP32[$1017>>2]|0;
       $1019 = (($1018) + 1)|0;
       HEAP32[$1017>>2] = $1019;
       $1020 = $6;
       $1021 = ((($1020)) + 8|0);
       $1022 = HEAP32[$1021>>2]|0;
       $1023 = (($1022) + ($1018)|0);
       HEAP8[$1023>>0] = $1015;
       $1024 = $3;
       $1025 = ((($1024)) + 48|0);
       $1026 = HEAP32[$1025>>2]|0;
       $1027 = $1026 >>> 8;
       $1028 = $1027 & 255;
       $1029 = $1028&255;
       $1030 = $6;
       $1031 = ((($1030)) + 20|0);
       $1032 = HEAP32[$1031>>2]|0;
       $1033 = (($1032) + 1)|0;
       HEAP32[$1031>>2] = $1033;
       $1034 = $6;
       $1035 = ((($1034)) + 8|0);
       $1036 = HEAP32[$1035>>2]|0;
       $1037 = (($1036) + ($1032)|0);
       HEAP8[$1037>>0] = $1029;
       $1038 = $3;
       $1039 = ((($1038)) + 48|0);
       $1040 = HEAP32[$1039>>2]|0;
       $1041 = $1040 >>> 16;
       $1042 = $1041 & 255;
       $1043 = $1042&255;
       $1044 = $6;
       $1045 = ((($1044)) + 20|0);
       $1046 = HEAP32[$1045>>2]|0;
       $1047 = (($1046) + 1)|0;
       HEAP32[$1045>>2] = $1047;
       $1048 = $6;
       $1049 = ((($1048)) + 8|0);
       $1050 = HEAP32[$1049>>2]|0;
       $1051 = (($1050) + ($1046)|0);
       HEAP8[$1051>>0] = $1043;
       $1052 = $3;
       $1053 = ((($1052)) + 48|0);
       $1054 = HEAP32[$1053>>2]|0;
       $1055 = $1054 >>> 24;
       $1056 = $1055 & 255;
       $1057 = $1056&255;
       $1058 = $6;
       $1059 = ((($1058)) + 20|0);
       $1060 = HEAP32[$1059>>2]|0;
       $1061 = (($1060) + 1)|0;
       HEAP32[$1059>>2] = $1061;
       $1062 = $6;
       $1063 = ((($1062)) + 8|0);
       $1064 = HEAP32[$1063>>2]|0;
       $1065 = (($1064) + ($1060)|0);
       HEAP8[$1065>>0] = $1057;
       $1066 = $3;
       $1067 = ((($1066)) + 8|0);
       $1068 = HEAP32[$1067>>2]|0;
       $1069 = $1068 & 255;
       $1070 = $1069&255;
       $1071 = $6;
       $1072 = ((($1071)) + 20|0);
       $1073 = HEAP32[$1072>>2]|0;
       $1074 = (($1073) + 1)|0;
       HEAP32[$1072>>2] = $1074;
       $1075 = $6;
       $1076 = ((($1075)) + 8|0);
       $1077 = HEAP32[$1076>>2]|0;
       $1078 = (($1077) + ($1073)|0);
       HEAP8[$1078>>0] = $1070;
       $1079 = $3;
       $1080 = ((($1079)) + 8|0);
       $1081 = HEAP32[$1080>>2]|0;
       $1082 = $1081 >>> 8;
       $1083 = $1082 & 255;
       $1084 = $1083&255;
       $1085 = $6;
       $1086 = ((($1085)) + 20|0);
       $1087 = HEAP32[$1086>>2]|0;
       $1088 = (($1087) + 1)|0;
       HEAP32[$1086>>2] = $1088;
       $1089 = $6;
       $1090 = ((($1089)) + 8|0);
       $1091 = HEAP32[$1090>>2]|0;
       $1092 = (($1091) + ($1087)|0);
       HEAP8[$1092>>0] = $1084;
       $1093 = $3;
       $1094 = ((($1093)) + 8|0);
       $1095 = HEAP32[$1094>>2]|0;
       $1096 = $1095 >>> 16;
       $1097 = $1096 & 255;
       $1098 = $1097&255;
       $1099 = $6;
       $1100 = ((($1099)) + 20|0);
       $1101 = HEAP32[$1100>>2]|0;
       $1102 = (($1101) + 1)|0;
       HEAP32[$1100>>2] = $1102;
       $1103 = $6;
       $1104 = ((($1103)) + 8|0);
       $1105 = HEAP32[$1104>>2]|0;
       $1106 = (($1105) + ($1101)|0);
       HEAP8[$1106>>0] = $1098;
       $1107 = $3;
       $1108 = ((($1107)) + 8|0);
       $1109 = HEAP32[$1108>>2]|0;
       $1110 = $1109 >>> 24;
       $1111 = $1110 & 255;
       $1112 = $1111&255;
       $1113 = $6;
       $1114 = ((($1113)) + 20|0);
       $1115 = HEAP32[$1114>>2]|0;
       $1116 = (($1115) + 1)|0;
       HEAP32[$1114>>2] = $1116;
       $1117 = $6;
       $1118 = ((($1117)) + 8|0);
       $1119 = HEAP32[$1118>>2]|0;
       $1120 = (($1119) + ($1115)|0);
       HEAP8[$1120>>0] = $1112;
      } else {
       $1121 = $6;
       $1122 = $3;
       $1123 = ((($1122)) + 48|0);
       $1124 = HEAP32[$1123>>2]|0;
       $1125 = $1124 >>> 16;
       _putShortMSB($1121,$1125);
       $1126 = $6;
       $1127 = $3;
       $1128 = ((($1127)) + 48|0);
       $1129 = HEAP32[$1128>>2]|0;
       $1130 = $1129 & 65535;
       _putShortMSB($1126,$1130);
      }
      $1131 = $3;
      _flush_pending($1131);
      $1132 = $6;
      $1133 = ((($1132)) + 24|0);
      $1134 = HEAP32[$1133>>2]|0;
      $1135 = ($1134|0)>(0);
      if ($1135) {
       $1136 = $6;
       $1137 = ((($1136)) + 24|0);
       $1138 = HEAP32[$1137>>2]|0;
       $1139 = (0 - ($1138))|0;
       $1140 = $6;
       $1141 = ((($1140)) + 24|0);
       HEAP32[$1141>>2] = $1139;
      }
      $1142 = $6;
      $1143 = ((($1142)) + 20|0);
      $1144 = HEAP32[$1143>>2]|0;
      $1145 = ($1144|0)!=(0);
      $1146 = $1145 ? 0 : 1;
      $2 = $1146;
      $1147 = $2;
      STACKTOP = sp;return ($1147|0);
     }
    }
   } while(0);
   $45 = HEAP32[(28)>>2]|0;
   $46 = $3;
   $47 = ((($46)) + 24|0);
   HEAP32[$47>>2] = $45;
   $2 = -2;
   $1147 = $2;
   STACKTOP = sp;return ($1147|0);
  }
 }
 $2 = -2;
 $1147 = $2;
 STACKTOP = sp;return ($1147|0);
}
function _deflateEnd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $2;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = $2;
   $11 = ((($10)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $3 = $14;
   $15 = $3;
   $16 = ($15|0)!=(42);
   $17 = $3;
   $18 = ($17|0)!=(69);
   $or$cond = $16 & $18;
   $19 = $3;
   $20 = ($19|0)!=(73);
   $or$cond3 = $or$cond & $20;
   $21 = $3;
   $22 = ($21|0)!=(91);
   $or$cond5 = $or$cond3 & $22;
   $23 = $3;
   $24 = ($23|0)!=(103);
   $or$cond7 = $or$cond5 & $24;
   $25 = $3;
   $26 = ($25|0)!=(113);
   $or$cond9 = $or$cond7 & $26;
   $27 = $3;
   $28 = ($27|0)!=(666);
   $or$cond11 = $or$cond9 & $28;
   if ($or$cond11) {
    $1 = -2;
    $111 = $1;
    STACKTOP = sp;return ($111|0);
   }
   $29 = $2;
   $30 = ((($29)) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = $2;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $2;
    $39 = ((($38)) + 40|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $2;
    $42 = ((($41)) + 28|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($43)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    FUNCTION_TABLE_vii[$37 & 15]($40,$45);
   }
   $46 = $2;
   $47 = ((($46)) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 68|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)!=(0|0);
   if ($51) {
    $52 = $2;
    $53 = ((($52)) + 36|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $2;
    $56 = ((($55)) + 40|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $2;
    $59 = ((($58)) + 28|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ((($60)) + 68|0);
    $62 = HEAP32[$61>>2]|0;
    FUNCTION_TABLE_vii[$54 & 15]($57,$62);
   }
   $63 = $2;
   $64 = ((($63)) + 28|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 64|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)!=(0|0);
   if ($68) {
    $69 = $2;
    $70 = ((($69)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $2;
    $73 = ((($72)) + 40|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $2;
    $76 = ((($75)) + 28|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ((($77)) + 64|0);
    $79 = HEAP32[$78>>2]|0;
    FUNCTION_TABLE_vii[$71 & 15]($74,$79);
   }
   $80 = $2;
   $81 = ((($80)) + 28|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($82)) + 56|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = $2;
    $87 = ((($86)) + 36|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $2;
    $90 = ((($89)) + 40|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $2;
    $93 = ((($92)) + 28|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ((($94)) + 56|0);
    $96 = HEAP32[$95>>2]|0;
    FUNCTION_TABLE_vii[$88 & 15]($91,$96);
   }
   $97 = $2;
   $98 = ((($97)) + 36|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $2;
   $101 = ((($100)) + 40|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $2;
   $104 = ((($103)) + 28|0);
   $105 = HEAP32[$104>>2]|0;
   FUNCTION_TABLE_vii[$99 & 15]($102,$105);
   $106 = $2;
   $107 = ((($106)) + 28|0);
   HEAP32[$107>>2] = 0;
   $108 = $3;
   $109 = ($108|0)==(113);
   $110 = $109 ? -3 : 0;
   $1 = $110;
   $111 = $1;
   STACKTOP = sp;return ($111|0);
  }
 }
 $1 = -2;
 $111 = $1;
 STACKTOP = sp;return ($111|0);
}
function _crc32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   $3 = 0;
  } else {
   HEAP32[$7>>2] = 1;
   $10 = HEAP8[$7>>0]|0;
   $11 = ($10<<24>>24)!=(0);
   $12 = $4;
   $13 = $5;
   $14 = $6;
   if ($11) {
    $15 = (_crc32_little($12,$13,$14)|0);
    $3 = $15;
    break;
   } else {
    $16 = (_crc32_big($12,$13,$14)|0);
    $3 = $16;
    break;
   }
  }
 } while(0);
 $17 = $3;
 STACKTOP = sp;return ($17|0);
}
function _putShortMSB($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4 >>> 8;
 $6 = $5&255;
 $7 = $2;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($9)|0);
 HEAP8[$14>>0] = $6;
 $15 = $3;
 $16 = $15 & 255;
 $17 = $16&255;
 $18 = $2;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$19>>2] = $21;
 $22 = $2;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($20)|0);
 HEAP8[$25>>0] = $17;
 STACKTOP = sp;return;
}
function _flush_pending($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 __tr_flush_bits($7);
 $8 = $3;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $2 = $10;
 $11 = $2;
 $12 = $1;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>($14>>>0);
 if ($15) {
  $16 = $1;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $2 = $18;
 }
 $19 = $2;
 $20 = ($19|0)==(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $1;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $2;
 _memcpy(($23|0),($26|0),($27|0))|0;
 $28 = $2;
 $29 = $1;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($28)|0);
 HEAP32[$30>>2] = $32;
 $33 = $2;
 $34 = $3;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($33)|0);
 HEAP32[$35>>2] = $37;
 $38 = $2;
 $39 = $1;
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($38))|0;
 HEAP32[$40>>2] = $42;
 $43 = $2;
 $44 = $1;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) - ($43))|0;
 HEAP32[$45>>2] = $47;
 $48 = $2;
 $49 = $3;
 $50 = ((($49)) + 20|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) - ($48))|0;
 HEAP32[$50>>2] = $52;
 $53 = $3;
 $54 = ((($53)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $57 = $3;
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $3;
 $61 = ((($60)) + 16|0);
 HEAP32[$61>>2] = $59;
 STACKTOP = sp;return;
}
function _deflate_huff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $7 = $3;
  $8 = ((($7)) + 116|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = $3;
   _fill_window($11);
   $12 = $3;
   $13 = ((($12)) + 116|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   }
  }
  $18 = $3;
  $19 = ((($18)) + 96|0);
  HEAP32[$19>>2] = 0;
  $20 = $3;
  $21 = ((($20)) + 108|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = ((($23)) + 56|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22)|0);
  $27 = HEAP8[$26>>0]|0;
  $6 = $27;
  $28 = $3;
  $29 = ((($28)) + 5792|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $3;
  $32 = ((($31)) + 5796|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<1)|0);
  HEAP16[$34>>1] = 0;
  $35 = $6;
  $36 = $3;
  $37 = ((($36)) + 5792|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$37>>2] = $39;
  $40 = $3;
  $41 = ((($40)) + 5784|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($38)|0);
  HEAP8[$43>>0] = $35;
  $44 = $6;
  $45 = $44&255;
  $46 = $3;
  $47 = ((($46)) + 148|0);
  $48 = (($47) + ($45<<2)|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = (($49) + 1)<<16>>16;
  HEAP16[$48>>1] = $50;
  $51 = $3;
  $52 = ((($51)) + 5792|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $3;
  $55 = ((($54)) + 5788|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) - 1)|0;
  $58 = ($53|0)==($57|0);
  $59 = $58&1;
  $5 = $59;
  $60 = $3;
  $61 = ((($60)) + 116|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + -1)|0;
  HEAP32[$61>>2] = $63;
  $64 = $3;
  $65 = ((($64)) + 108|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[$65>>2] = $67;
  $68 = $5;
  $69 = ($68|0)!=(0);
  if (!($69)) {
   continue;
  }
  $70 = $3;
  $71 = $3;
  $72 = ((($71)) + 92|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)>=(0);
  if ($74) {
   $75 = $3;
   $76 = ((($75)) + 92|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $3;
   $79 = ((($78)) + 56|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + ($77)|0);
   $89 = $81;
  } else {
   $89 = 0;
  }
  $82 = $3;
  $83 = ((($82)) + 108|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $3;
  $86 = ((($85)) + 92|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($84) - ($87))|0;
  __tr_flush_block($70,$89,$88,0);
  $90 = $3;
  $91 = ((($90)) + 108|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $3;
  $94 = ((($93)) + 92|0);
  HEAP32[$94>>2] = $92;
  $95 = $3;
  $96 = HEAP32[$95>>2]|0;
  _flush_pending($96);
  $97 = $3;
  $98 = HEAP32[$97>>2]|0;
  $99 = ((($98)) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)==(0);
  if ($101) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  $2 = 0;
  $173 = $2;
  STACKTOP = sp;return ($173|0);
 }
 $16 = $4;
 $17 = ($16|0)==(0);
 if ($17) {
  $2 = 0;
  $173 = $2;
  STACKTOP = sp;return ($173|0);
 }
 $102 = $3;
 $103 = ((($102)) + 5812|0);
 HEAP32[$103>>2] = 0;
 $104 = $4;
 $105 = ($104|0)==(4);
 $106 = $3;
 if ($105) {
  $107 = $3;
  $108 = ((($107)) + 92|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)>=(0);
  if ($110) {
   $111 = $3;
   $112 = ((($111)) + 92|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $3;
   $115 = ((($114)) + 56|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + ($113)|0);
   $125 = $117;
  } else {
   $125 = 0;
  }
  $118 = $3;
  $119 = ((($118)) + 108|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $3;
  $122 = ((($121)) + 92|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($120) - ($123))|0;
  __tr_flush_block($106,$125,$124,1);
  $126 = $3;
  $127 = ((($126)) + 108|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $3;
  $130 = ((($129)) + 92|0);
  HEAP32[$130>>2] = $128;
  $131 = $3;
  $132 = HEAP32[$131>>2]|0;
  _flush_pending($132);
  $133 = $3;
  $134 = HEAP32[$133>>2]|0;
  $135 = ((($134)) + 16|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($136|0)==(0);
  if ($137) {
   $2 = 2;
   $173 = $2;
   STACKTOP = sp;return ($173|0);
  } else {
   $2 = 3;
   $173 = $2;
   STACKTOP = sp;return ($173|0);
  }
 }
 $138 = ((($106)) + 5792|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)!=(0);
 if ($140) {
  $141 = $3;
  $142 = $3;
  $143 = ((($142)) + 92|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)>=(0);
  if ($145) {
   $146 = $3;
   $147 = ((($146)) + 92|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $3;
   $150 = ((($149)) + 56|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($151) + ($148)|0);
   $160 = $152;
  } else {
   $160 = 0;
  }
  $153 = $3;
  $154 = ((($153)) + 108|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $3;
  $157 = ((($156)) + 92|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($155) - ($158))|0;
  __tr_flush_block($141,$160,$159,0);
  $161 = $3;
  $162 = ((($161)) + 108|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $3;
  $165 = ((($164)) + 92|0);
  HEAP32[$165>>2] = $163;
  $166 = $3;
  $167 = HEAP32[$166>>2]|0;
  _flush_pending($167);
  $168 = $3;
  $169 = HEAP32[$168>>2]|0;
  $170 = ((($169)) + 16|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ($171|0)==(0);
  if ($172) {
   $2 = 0;
   $173 = $2;
   STACKTOP = sp;return ($173|0);
  }
 }
 $2 = 1;
 $173 = $2;
 STACKTOP = sp;return ($173|0);
}
function _deflate_rle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $12 = $3;
  $13 = ((($12)) + 116|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14>>>0)<=(258);
  if ($15) {
   $16 = $3;
   _fill_window($16);
   $17 = $3;
   $18 = ((($17)) + 116|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19>>>0)<=(258);
   $21 = $4;
   $22 = ($21|0)==(0);
   $or$cond = $20 & $22;
   if ($or$cond) {
    label = 4;
    break;
   }
   $23 = $3;
   $24 = ((($23)) + 116|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    label = 34;
    break;
   }
  }
  $27 = $3;
  $28 = ((($27)) + 96|0);
  HEAP32[$28>>2] = 0;
  $29 = $3;
  $30 = ((($29)) + 116|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31>>>0)>=(3);
  if ($32) {
   $33 = $3;
   $34 = ((($33)) + 108|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35>>>0)>(0);
   if ($36) {
    $37 = $3;
    $38 = ((($37)) + 56|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $3;
    $41 = ((($40)) + 108|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($39) + ($42)|0);
    $44 = ((($43)) + -1|0);
    $7 = $44;
    $45 = $7;
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $6 = $47;
    $48 = $6;
    $49 = $7;
    $50 = ((($49)) + 1|0);
    $7 = $50;
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    $53 = ($48|0)==($52|0);
    if ($53) {
     $54 = $6;
     $55 = $7;
     $56 = ((($55)) + 1|0);
     $7 = $56;
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&255;
     $59 = ($54|0)==($58|0);
     if ($59) {
      $60 = $6;
      $61 = $7;
      $62 = ((($61)) + 1|0);
      $7 = $62;
      $63 = HEAP8[$62>>0]|0;
      $64 = $63&255;
      $65 = ($60|0)==($64|0);
      if ($65) {
       $66 = $3;
       $67 = ((($66)) + 56|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = $3;
       $70 = ((($69)) + 108|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (($68) + ($71)|0);
       $73 = ((($72)) + 258|0);
       $8 = $73;
       while(1) {
        $74 = $6;
        $75 = $7;
        $76 = ((($75)) + 1|0);
        $7 = $76;
        $77 = HEAP8[$76>>0]|0;
        $78 = $77&255;
        $79 = ($74|0)==($78|0);
        if (!($79)) {
         break;
        }
        $80 = $6;
        $81 = $7;
        $82 = ((($81)) + 1|0);
        $7 = $82;
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $85 = ($80|0)==($84|0);
        if (!($85)) {
         break;
        }
        $86 = $6;
        $87 = $7;
        $88 = ((($87)) + 1|0);
        $7 = $88;
        $89 = HEAP8[$88>>0]|0;
        $90 = $89&255;
        $91 = ($86|0)==($90|0);
        if (!($91)) {
         break;
        }
        $92 = $6;
        $93 = $7;
        $94 = ((($93)) + 1|0);
        $7 = $94;
        $95 = HEAP8[$94>>0]|0;
        $96 = $95&255;
        $97 = ($92|0)==($96|0);
        if (!($97)) {
         break;
        }
        $98 = $6;
        $99 = $7;
        $100 = ((($99)) + 1|0);
        $7 = $100;
        $101 = HEAP8[$100>>0]|0;
        $102 = $101&255;
        $103 = ($98|0)==($102|0);
        if (!($103)) {
         break;
        }
        $104 = $6;
        $105 = $7;
        $106 = ((($105)) + 1|0);
        $7 = $106;
        $107 = HEAP8[$106>>0]|0;
        $108 = $107&255;
        $109 = ($104|0)==($108|0);
        if (!($109)) {
         break;
        }
        $110 = $6;
        $111 = $7;
        $112 = ((($111)) + 1|0);
        $7 = $112;
        $113 = HEAP8[$112>>0]|0;
        $114 = $113&255;
        $115 = ($110|0)==($114|0);
        if (!($115)) {
         break;
        }
        $116 = $6;
        $117 = $7;
        $118 = ((($117)) + 1|0);
        $7 = $118;
        $119 = HEAP8[$118>>0]|0;
        $120 = $119&255;
        $121 = ($116|0)==($120|0);
        if (!($121)) {
         break;
        }
        $122 = $7;
        $123 = $8;
        $124 = ($122>>>0)<($123>>>0);
        if (!($124)) {
         break;
        }
       }
       $125 = $8;
       $126 = $7;
       $127 = $125;
       $128 = $126;
       $129 = (($127) - ($128))|0;
       $130 = (258 - ($129))|0;
       $131 = $3;
       $132 = ((($131)) + 96|0);
       HEAP32[$132>>2] = $130;
       $133 = $3;
       $134 = ((($133)) + 96|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = $3;
       $137 = ((($136)) + 116|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = ($135>>>0)>($138>>>0);
       if ($139) {
        $140 = $3;
        $141 = ((($140)) + 116|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = $3;
        $144 = ((($143)) + 96|0);
        HEAP32[$144>>2] = $142;
       }
      }
     }
    }
   }
  }
  $145 = $3;
  $146 = ((($145)) + 96|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147>>>0)>=(3);
  $149 = $3;
  if ($148) {
   $150 = ((($149)) + 96|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($151) - 3)|0;
   $153 = $152&255;
   $9 = $153;
   $10 = 1;
   $154 = $10;
   $155 = $3;
   $156 = ((($155)) + 5792|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $3;
   $159 = ((($158)) + 5796|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + ($157<<1)|0);
   HEAP16[$161>>1] = $154;
   $162 = $9;
   $163 = $3;
   $164 = ((($163)) + 5792|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($165) + 1)|0;
   HEAP32[$164>>2] = $166;
   $167 = $3;
   $168 = ((($167)) + 5784|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (($169) + ($165)|0);
   HEAP8[$170>>0] = $162;
   $171 = $10;
   $172 = (($171) + -1)<<16>>16;
   $10 = $172;
   $173 = $9;
   $174 = $173&255;
   $175 = (14446 + ($174)|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = (($177) + 256)|0;
   $179 = (($178) + 1)|0;
   $180 = $3;
   $181 = ((($180)) + 148|0);
   $182 = (($181) + ($179<<2)|0);
   $183 = HEAP16[$182>>1]|0;
   $184 = (($183) + 1)<<16>>16;
   HEAP16[$182>>1] = $184;
   $185 = $10;
   $186 = $185&65535;
   $187 = ($186|0)<(256);
   $188 = $10;
   $189 = $188&65535;
   if ($187) {
    $190 = (13934 + ($189)|0);
    $191 = HEAP8[$190>>0]|0;
    $$sink = $191;
   } else {
    $192 = $189 >> 7;
    $193 = (256 + ($192))|0;
    $194 = (13934 + ($193)|0);
    $195 = HEAP8[$194>>0]|0;
    $$sink = $195;
   }
   $196 = $$sink&255;
   $197 = $3;
   $198 = ((($197)) + 2440|0);
   $199 = (($198) + ($196<<2)|0);
   $200 = HEAP16[$199>>1]|0;
   $201 = (($200) + 1)<<16>>16;
   HEAP16[$199>>1] = $201;
   $202 = $3;
   $203 = ((($202)) + 5792|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $3;
   $206 = ((($205)) + 5788|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = (($207) - 1)|0;
   $209 = ($204|0)==($208|0);
   $210 = $209&1;
   $5 = $210;
   $211 = $3;
   $212 = ((($211)) + 96|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $3;
   $215 = ((($214)) + 116|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) - ($213))|0;
   HEAP32[$215>>2] = $217;
   $218 = $3;
   $219 = ((($218)) + 96|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $3;
   $222 = ((($221)) + 108|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (($223) + ($220))|0;
   HEAP32[$222>>2] = $224;
   $225 = $3;
   $226 = ((($225)) + 96|0);
   HEAP32[$226>>2] = 0;
  } else {
   $227 = ((($149)) + 108|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = $3;
   $230 = ((($229)) + 56|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (($231) + ($228)|0);
   $233 = HEAP8[$232>>0]|0;
   $11 = $233;
   $234 = $3;
   $235 = ((($234)) + 5792|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $3;
   $238 = ((($237)) + 5796|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = (($239) + ($236<<1)|0);
   HEAP16[$240>>1] = 0;
   $241 = $11;
   $242 = $3;
   $243 = ((($242)) + 5792|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (($244) + 1)|0;
   HEAP32[$243>>2] = $245;
   $246 = $3;
   $247 = ((($246)) + 5784|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = (($248) + ($244)|0);
   HEAP8[$249>>0] = $241;
   $250 = $11;
   $251 = $250&255;
   $252 = $3;
   $253 = ((($252)) + 148|0);
   $254 = (($253) + ($251<<2)|0);
   $255 = HEAP16[$254>>1]|0;
   $256 = (($255) + 1)<<16>>16;
   HEAP16[$254>>1] = $256;
   $257 = $3;
   $258 = ((($257)) + 5792|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = $3;
   $261 = ((($260)) + 5788|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = (($262) - 1)|0;
   $264 = ($259|0)==($263|0);
   $265 = $264&1;
   $5 = $265;
   $266 = $3;
   $267 = ((($266)) + 116|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = (($268) + -1)|0;
   HEAP32[$267>>2] = $269;
   $270 = $3;
   $271 = ((($270)) + 108|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = (($272) + 1)|0;
   HEAP32[$271>>2] = $273;
  }
  $274 = $5;
  $275 = ($274|0)!=(0);
  if (!($275)) {
   continue;
  }
  $276 = $3;
  $277 = $3;
  $278 = ((($277)) + 92|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = ($279|0)>=(0);
  if ($280) {
   $281 = $3;
   $282 = ((($281)) + 92|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $3;
   $285 = ((($284)) + 56|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = (($286) + ($283)|0);
   $295 = $287;
  } else {
   $295 = 0;
  }
  $288 = $3;
  $289 = ((($288)) + 108|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = $3;
  $292 = ((($291)) + 92|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = (($290) - ($293))|0;
  __tr_flush_block($276,$295,$294,0);
  $296 = $3;
  $297 = ((($296)) + 108|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $3;
  $300 = ((($299)) + 92|0);
  HEAP32[$300>>2] = $298;
  $301 = $3;
  $302 = HEAP32[$301>>2]|0;
  _flush_pending($302);
  $303 = $3;
  $304 = HEAP32[$303>>2]|0;
  $305 = ((($304)) + 16|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = ($306|0)==(0);
  if ($307) {
   label = 33;
   break;
  }
 }
 if ((label|0) == 4) {
  $2 = 0;
  $379 = $2;
  STACKTOP = sp;return ($379|0);
 }
 else if ((label|0) == 33) {
  $2 = 0;
  $379 = $2;
  STACKTOP = sp;return ($379|0);
 }
 else if ((label|0) == 34) {
  $308 = $3;
  $309 = ((($308)) + 5812|0);
  HEAP32[$309>>2] = 0;
  $310 = $4;
  $311 = ($310|0)==(4);
  $312 = $3;
  if ($311) {
   $313 = $3;
   $314 = ((($313)) + 92|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = ($315|0)>=(0);
   if ($316) {
    $317 = $3;
    $318 = ((($317)) + 92|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = $3;
    $321 = ((($320)) + 56|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (($322) + ($319)|0);
    $331 = $323;
   } else {
    $331 = 0;
   }
   $324 = $3;
   $325 = ((($324)) + 108|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = $3;
   $328 = ((($327)) + 92|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = (($326) - ($329))|0;
   __tr_flush_block($312,$331,$330,1);
   $332 = $3;
   $333 = ((($332)) + 108|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = $3;
   $336 = ((($335)) + 92|0);
   HEAP32[$336>>2] = $334;
   $337 = $3;
   $338 = HEAP32[$337>>2]|0;
   _flush_pending($338);
   $339 = $3;
   $340 = HEAP32[$339>>2]|0;
   $341 = ((($340)) + 16|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = ($342|0)==(0);
   if ($343) {
    $2 = 2;
    $379 = $2;
    STACKTOP = sp;return ($379|0);
   } else {
    $2 = 3;
    $379 = $2;
    STACKTOP = sp;return ($379|0);
   }
  }
  $344 = ((($312)) + 5792|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = ($345|0)!=(0);
  if ($346) {
   $347 = $3;
   $348 = $3;
   $349 = ((($348)) + 92|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($350|0)>=(0);
   if ($351) {
    $352 = $3;
    $353 = ((($352)) + 92|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = $3;
    $356 = ((($355)) + 56|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = (($357) + ($354)|0);
    $366 = $358;
   } else {
    $366 = 0;
   }
   $359 = $3;
   $360 = ((($359)) + 108|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = $3;
   $363 = ((($362)) + 92|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = (($361) - ($364))|0;
   __tr_flush_block($347,$366,$365,0);
   $367 = $3;
   $368 = ((($367)) + 108|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = $3;
   $371 = ((($370)) + 92|0);
   HEAP32[$371>>2] = $369;
   $372 = $3;
   $373 = HEAP32[$372>>2]|0;
   _flush_pending($373);
   $374 = $3;
   $375 = HEAP32[$374>>2]|0;
   $376 = ((($375)) + 16|0);
   $377 = HEAP32[$376>>2]|0;
   $378 = ($377|0)==(0);
   if ($378) {
    $2 = 0;
    $379 = $2;
    STACKTOP = sp;return ($379|0);
   }
  }
  $2 = 1;
  $379 = $2;
  STACKTOP = sp;return ($379|0);
 }
 return (0)|0;
}
function __tr_align($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = 3;
 $6 = $1;
 $7 = ((($6)) + 5820|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = (16 - ($9))|0;
 $11 = ($8|0)>($10|0);
 if ($11) {
  $3 = 2;
  $12 = $3;
  $13 = $12&65535;
  $14 = $13&65535;
  $15 = $1;
  $16 = ((($15)) + 5820|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14 << $17;
  $19 = $1;
  $20 = ((($19)) + 5816|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 | $18;
  $24 = $23&65535;
  HEAP16[$20>>1] = $24;
  $25 = $1;
  $26 = ((($25)) + 5816|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $28 & 255;
  $30 = $29&255;
  $31 = $1;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
  $35 = $1;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($33)|0);
  HEAP8[$38>>0] = $30;
  $39 = $1;
  $40 = ((($39)) + 5816|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42 >> 8;
  $44 = $43&255;
  $45 = $1;
  $46 = ((($45)) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$46>>2] = $48;
  $49 = $1;
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($47)|0);
  HEAP8[$52>>0] = $44;
  $53 = $3;
  $54 = $53&65535;
  $55 = $54&65535;
  $56 = $1;
  $57 = ((($56)) + 5820|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (16 - ($58))|0;
  $60 = $55 >> $59;
  $61 = $60&65535;
  $62 = $1;
  $63 = ((($62)) + 5816|0);
  HEAP16[$63>>1] = $61;
  $64 = $2;
  $65 = (($64) - 16)|0;
  $66 = $1;
  $67 = ((($66)) + 5820|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($65))|0;
  HEAP32[$67>>2] = $69;
 } else {
  $70 = $1;
  $71 = ((($70)) + 5820|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = 2 << $72;
  $74 = $1;
  $75 = ((($74)) + 5816|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76&65535;
  $78 = $77 | $73;
  $79 = $78&65535;
  HEAP16[$75>>1] = $79;
  $80 = $2;
  $81 = $1;
  $82 = ((($81)) + 5820|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + ($80))|0;
  HEAP32[$82>>2] = $84;
 }
 $85 = HEAP16[(10346)>>1]|0;
 $86 = $85&65535;
 $4 = $86;
 $87 = $1;
 $88 = ((($87)) + 5820|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $4;
 $91 = (16 - ($90))|0;
 $92 = ($89|0)>($91|0);
 $93 = HEAP16[(10344)>>1]|0;
 $94 = $93&65535;
 if ($92) {
  $5 = $94;
  $95 = $5;
  $96 = $95&65535;
  $97 = $96&65535;
  $98 = $1;
  $99 = ((($98)) + 5820|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $97 << $100;
  $102 = $1;
  $103 = ((($102)) + 5816|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104&65535;
  $106 = $105 | $101;
  $107 = $106&65535;
  HEAP16[$103>>1] = $107;
  $108 = $1;
  $109 = ((($108)) + 5816|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110&65535;
  $112 = $111 & 255;
  $113 = $112&255;
  $114 = $1;
  $115 = ((($114)) + 20|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 1)|0;
  HEAP32[$115>>2] = $117;
  $118 = $1;
  $119 = ((($118)) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + ($116)|0);
  HEAP8[$121>>0] = $113;
  $122 = $1;
  $123 = ((($122)) + 5816|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $124&65535;
  $126 = $125 >> 8;
  $127 = $126&255;
  $128 = $1;
  $129 = ((($128)) + 20|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + 1)|0;
  HEAP32[$129>>2] = $131;
  $132 = $1;
  $133 = ((($132)) + 8|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) + ($130)|0);
  HEAP8[$135>>0] = $127;
  $136 = $5;
  $137 = $136&65535;
  $138 = $137&65535;
  $139 = $1;
  $140 = ((($139)) + 5820|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (16 - ($141))|0;
  $143 = $138 >> $142;
  $144 = $143&65535;
  $145 = $1;
  $146 = ((($145)) + 5816|0);
  HEAP16[$146>>1] = $144;
  $147 = $4;
  $148 = (($147) - 16)|0;
  $149 = $1;
  $150 = ((($149)) + 5820|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($148))|0;
  HEAP32[$150>>2] = $152;
  $168 = $1;
  _bi_flush($168);
  STACKTOP = sp;return;
 } else {
  $153 = $1;
  $154 = ((($153)) + 5820|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $94 << $155;
  $157 = $1;
  $158 = ((($157)) + 5816|0);
  $159 = HEAP16[$158>>1]|0;
  $160 = $159&65535;
  $161 = $160 | $156;
  $162 = $161&65535;
  HEAP16[$158>>1] = $162;
  $163 = $4;
  $164 = $1;
  $165 = ((($164)) + 5820|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($166) + ($163))|0;
  HEAP32[$165>>2] = $167;
  $168 = $1;
  _bi_flush($168);
  STACKTOP = sp;return;
 }
}
function __tr_stored_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 3;
 $10 = $4;
 $11 = ((($10)) + 5820|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $8;
 $14 = (16 - ($13))|0;
 $15 = ($12|0)>($14|0);
 $16 = $7;
 $17 = (0 + ($16))|0;
 if ($15) {
  $9 = $17;
  $18 = $9;
  $19 = $18&65535;
  $20 = $19&65535;
  $21 = $4;
  $22 = ((($21)) + 5820|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $20 << $23;
  $25 = $4;
  $26 = ((($25)) + 5816|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $28 | $24;
  $30 = $29&65535;
  HEAP16[$26>>1] = $30;
  $31 = $4;
  $32 = ((($31)) + 5816|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $35 = $34 & 255;
  $36 = $35&255;
  $37 = $4;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$38>>2] = $40;
  $41 = $4;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($39)|0);
  HEAP8[$44>>0] = $36;
  $45 = $4;
  $46 = ((($45)) + 5816|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = $48 >> 8;
  $50 = $49&255;
  $51 = $4;
  $52 = ((($51)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 1)|0;
  HEAP32[$52>>2] = $54;
  $55 = $4;
  $56 = ((($55)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($53)|0);
  HEAP8[$58>>0] = $50;
  $59 = $9;
  $60 = $59&65535;
  $61 = $60&65535;
  $62 = $4;
  $63 = ((($62)) + 5820|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (16 - ($64))|0;
  $66 = $61 >> $65;
  $67 = $66&65535;
  $68 = $4;
  $69 = ((($68)) + 5816|0);
  HEAP16[$69>>1] = $67;
  $70 = $8;
  $71 = (($70) - 16)|0;
  $72 = $4;
  $73 = ((($72)) + 5820|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + ($71))|0;
  HEAP32[$73>>2] = $75;
  $93 = $4;
  $94 = $5;
  $95 = $6;
  _copy_block($93,$94,$95,1);
  STACKTOP = sp;return;
 } else {
  $76 = $17&65535;
  $77 = $76&65535;
  $78 = $4;
  $79 = ((($78)) + 5820|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $77 << $80;
  $82 = $4;
  $83 = ((($82)) + 5816|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84&65535;
  $86 = $85 | $81;
  $87 = $86&65535;
  HEAP16[$83>>1] = $87;
  $88 = $8;
  $89 = $4;
  $90 = ((($89)) + 5820|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + ($88))|0;
  HEAP32[$90>>2] = $92;
  $93 = $4;
  $94 = $5;
  $95 = $6;
  _copy_block($93,$94,$95,1);
  STACKTOP = sp;return;
 }
}
function _copy_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 _bi_windup($8);
 $9 = $7;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $6;
  $12 = $11&65535;
  $13 = $12&65535;
  $14 = $13 & 255;
  $15 = $14&255;
  $16 = $4;
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
  $20 = $4;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($18)|0);
  HEAP8[$23>>0] = $15;
  $24 = $6;
  $25 = $24&65535;
  $26 = $25&65535;
  $27 = $26 >> 8;
  $28 = $27&255;
  $29 = $4;
  $30 = ((($29)) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$30>>2] = $32;
  $33 = $4;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($31)|0);
  HEAP8[$36>>0] = $28;
  $37 = $6;
  $38 = $37 ^ -1;
  $39 = $38&65535;
  $40 = $39&65535;
  $41 = $40 & 255;
  $42 = $41&255;
  $43 = $4;
  $44 = ((($43)) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$44>>2] = $46;
  $47 = $4;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($45)|0);
  HEAP8[$50>>0] = $42;
  $51 = $6;
  $52 = $51 ^ -1;
  $53 = $52&65535;
  $54 = $53&65535;
  $55 = $54 >> 8;
  $56 = $55&255;
  $57 = $4;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[$58>>2] = $60;
  $61 = $4;
  $62 = ((($61)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($59)|0);
  HEAP8[$64>>0] = $56;
 }
 while(1) {
  $65 = $6;
  $66 = (($65) + -1)|0;
  $6 = $66;
  $67 = ($65|0)!=(0);
  if (!($67)) {
   break;
  }
  $68 = $5;
  $69 = ((($68)) + 1|0);
  $5 = $69;
  $70 = HEAP8[$68>>0]|0;
  $71 = $4;
  $72 = ((($71)) + 20|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + 1)|0;
  HEAP32[$72>>2] = $74;
  $75 = $4;
  $76 = ((($75)) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($73)|0);
  HEAP8[$78>>0] = $70;
 }
 STACKTOP = sp;return;
}
function _bi_windup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 5820|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(8);
 $6 = $1;
 if ($5) {
  $7 = ((($6)) + 5816|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = $9 & 255;
  $11 = $10&255;
  $12 = $1;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = $1;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($14)|0);
  HEAP8[$19>>0] = $11;
  $20 = $1;
  $21 = ((($20)) + 5816|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = $23 >> 8;
  $25 = $24&255;
  $26 = $1;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($28)|0);
  HEAP8[$33>>0] = $25;
 } else {
  $34 = ((($6)) + 5820|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)>(0);
  if ($36) {
   $37 = $1;
   $38 = ((($37)) + 5816|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39&255;
   $41 = $1;
   $42 = ((($41)) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + 1)|0;
   HEAP32[$42>>2] = $44;
   $45 = $1;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($43)|0);
   HEAP8[$48>>0] = $40;
  }
 }
 $49 = $1;
 $50 = ((($49)) + 5816|0);
 HEAP16[$50>>1] = 0;
 $51 = $1;
 $52 = ((($51)) + 5820|0);
 HEAP32[$52>>2] = 0;
 STACKTOP = sp;return;
}
function _bi_flush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 5820|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(16);
 $6 = $1;
 if ($5) {
  $7 = ((($6)) + 5816|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = $9 & 255;
  $11 = $10&255;
  $12 = $1;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = $1;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($14)|0);
  HEAP8[$19>>0] = $11;
  $20 = $1;
  $21 = ((($20)) + 5816|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = $23 >> 8;
  $25 = $24&255;
  $26 = $1;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
  $30 = $1;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($28)|0);
  HEAP8[$33>>0] = $25;
  $34 = $1;
  $35 = ((($34)) + 5816|0);
  HEAP16[$35>>1] = 0;
  $36 = $1;
  $37 = ((($36)) + 5820|0);
  HEAP32[$37>>2] = 0;
  STACKTOP = sp;return;
 }
 $38 = ((($6)) + 5820|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)>=(8);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $41 = $1;
 $42 = ((($41)) + 5816|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&255;
 $45 = $1;
 $46 = ((($45)) + 20|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 1)|0;
 HEAP32[$46>>2] = $48;
 $49 = $1;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($47)|0);
 HEAP8[$52>>0] = $44;
 $53 = $1;
 $54 = ((($53)) + 5816|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = $55&65535;
 $57 = $56 >> 8;
 $58 = $57&65535;
 HEAP16[$54>>1] = $58;
 $59 = $1;
 $60 = ((($59)) + 5820|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) - 8)|0;
 HEAP32[$60>>2] = $62;
 STACKTOP = sp;return;
}
function _deflate_stored($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 65535;
 $7 = $5;
 $8 = $3;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - 5)|0;
 $12 = ($7>>>0)>($11>>>0);
 if ($12) {
  $13 = $3;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) - 5)|0;
  $5 = $16;
 }
 while(1) {
  $17 = $3;
  $18 = ((($17)) + 116|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19>>>0)<=(1);
  if ($20) {
   $21 = $3;
   _fill_window($21);
   $22 = $3;
   $23 = ((($22)) + 116|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   $26 = $4;
   $27 = ($26|0)==(0);
   $or$cond = $25 & $27;
   if ($or$cond) {
    label = 5;
    break;
   }
   $28 = $3;
   $29 = ((($28)) + 116|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0);
   if ($31) {
    label = 18;
    break;
   }
  }
  $32 = $3;
  $33 = ((($32)) + 116|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $36 = ((($35)) + 108|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34))|0;
  HEAP32[$36>>2] = $38;
  $39 = $3;
  $40 = ((($39)) + 116|0);
  HEAP32[$40>>2] = 0;
  $41 = $3;
  $42 = ((($41)) + 92|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $5;
  $45 = (($43) + ($44))|0;
  $6 = $45;
  $46 = $3;
  $47 = ((($46)) + 108|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0);
  if ($49) {
   label = 9;
  } else {
   $50 = $3;
   $51 = ((($50)) + 108|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $6;
   $54 = ($52>>>0)>=($53>>>0);
   if ($54) {
    label = 9;
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $55 = $3;
   $56 = ((($55)) + 108|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $6;
   $59 = (($57) - ($58))|0;
   $60 = $3;
   $61 = ((($60)) + 116|0);
   HEAP32[$61>>2] = $59;
   $62 = $6;
   $63 = $3;
   $64 = ((($63)) + 108|0);
   HEAP32[$64>>2] = $62;
   $65 = $3;
   $66 = $3;
   $67 = ((($66)) + 92|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)>=(0);
   if ($69) {
    $70 = $3;
    $71 = ((($70)) + 92|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $3;
    $74 = ((($73)) + 56|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + ($72)|0);
    $84 = $76;
   } else {
    $84 = 0;
   }
   $77 = $3;
   $78 = ((($77)) + 108|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $3;
   $81 = ((($80)) + 92|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($79) - ($82))|0;
   __tr_flush_block($65,$84,$83,0);
   $85 = $3;
   $86 = ((($85)) + 108|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $3;
   $89 = ((($88)) + 92|0);
   HEAP32[$89>>2] = $87;
   $90 = $3;
   $91 = HEAP32[$90>>2]|0;
   _flush_pending($91);
   $92 = $3;
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($93)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)==(0);
   if ($96) {
    label = 12;
    break;
   }
  }
  $97 = $3;
  $98 = ((($97)) + 108|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $3;
  $101 = ((($100)) + 92|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($99) - ($102))|0;
  $104 = $3;
  $105 = ((($104)) + 44|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) - 262)|0;
  $108 = ($103>>>0)>=($107>>>0);
  if (!($108)) {
   continue;
  }
  $109 = $3;
  $110 = $3;
  $111 = ((($110)) + 92|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)>=(0);
  if ($113) {
   $114 = $3;
   $115 = ((($114)) + 92|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $3;
   $118 = ((($117)) + 56|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + ($116)|0);
   $128 = $120;
  } else {
   $128 = 0;
  }
  $121 = $3;
  $122 = ((($121)) + 108|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $3;
  $125 = ((($124)) + 92|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($123) - ($126))|0;
  __tr_flush_block($109,$128,$127,0);
  $129 = $3;
  $130 = ((($129)) + 108|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $3;
  $133 = ((($132)) + 92|0);
  HEAP32[$133>>2] = $131;
  $134 = $3;
  $135 = HEAP32[$134>>2]|0;
  _flush_pending($135);
  $136 = $3;
  $137 = HEAP32[$136>>2]|0;
  $138 = ((($137)) + 16|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($139|0)==(0);
  if ($140) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 5) {
  $2 = 0;
  $215 = $2;
  STACKTOP = sp;return ($215|0);
 }
 else if ((label|0) == 12) {
  $2 = 0;
  $215 = $2;
  STACKTOP = sp;return ($215|0);
 }
 else if ((label|0) == 17) {
  $2 = 0;
  $215 = $2;
  STACKTOP = sp;return ($215|0);
 }
 else if ((label|0) == 18) {
  $141 = $3;
  $142 = ((($141)) + 5812|0);
  HEAP32[$142>>2] = 0;
  $143 = $4;
  $144 = ($143|0)==(4);
  $145 = $3;
  if ($144) {
   $146 = $3;
   $147 = ((($146)) + 92|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ($148|0)>=(0);
   if ($149) {
    $150 = $3;
    $151 = ((($150)) + 92|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $3;
    $154 = ((($153)) + 56|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (($155) + ($152)|0);
    $164 = $156;
   } else {
    $164 = 0;
   }
   $157 = $3;
   $158 = ((($157)) + 108|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $3;
   $161 = ((($160)) + 92|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (($159) - ($162))|0;
   __tr_flush_block($145,$164,$163,1);
   $165 = $3;
   $166 = ((($165)) + 108|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $3;
   $169 = ((($168)) + 92|0);
   HEAP32[$169>>2] = $167;
   $170 = $3;
   $171 = HEAP32[$170>>2]|0;
   _flush_pending($171);
   $172 = $3;
   $173 = HEAP32[$172>>2]|0;
   $174 = ((($173)) + 16|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ($175|0)==(0);
   if ($176) {
    $2 = 2;
    $215 = $2;
    STACKTOP = sp;return ($215|0);
   } else {
    $2 = 3;
    $215 = $2;
    STACKTOP = sp;return ($215|0);
   }
  }
  $177 = ((($145)) + 108|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $3;
  $180 = ((($179)) + 92|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ($178|0)>($181|0);
  if ($182) {
   $183 = $3;
   $184 = $3;
   $185 = ((($184)) + 92|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = ($186|0)>=(0);
   if ($187) {
    $188 = $3;
    $189 = ((($188)) + 92|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $3;
    $192 = ((($191)) + 56|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (($193) + ($190)|0);
    $202 = $194;
   } else {
    $202 = 0;
   }
   $195 = $3;
   $196 = ((($195)) + 108|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $3;
   $199 = ((($198)) + 92|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($197) - ($200))|0;
   __tr_flush_block($183,$202,$201,0);
   $203 = $3;
   $204 = ((($203)) + 108|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $3;
   $207 = ((($206)) + 92|0);
   HEAP32[$207>>2] = $205;
   $208 = $3;
   $209 = HEAP32[$208>>2]|0;
   _flush_pending($209);
   $210 = $3;
   $211 = HEAP32[$210>>2]|0;
   $212 = ((($211)) + 16|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = ($213|0)==(0);
   if ($214) {
    $2 = 0;
    $215 = $2;
    STACKTOP = sp;return ($215|0);
   }
  }
  $2 = 1;
  $215 = $2;
  STACKTOP = sp;return ($215|0);
 }
 return (0)|0;
}
function _deflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $10 = $3;
  $11 = ((($10)) + 116|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12>>>0)<(262);
  if ($13) {
   $14 = $3;
   _fill_window($14);
   $15 = $3;
   $16 = ((($15)) + 116|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17>>>0)<(262);
   $19 = $4;
   $20 = ($19|0)==(0);
   $or$cond = $18 & $20;
   if ($or$cond) {
    label = 4;
    break;
   }
   $21 = $3;
   $22 = ((($21)) + 116|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0);
   if ($24) {
    label = 27;
    break;
   }
  }
  $5 = 0;
  $25 = $3;
  $26 = ((($25)) + 116|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27>>>0)>=(3);
  if ($28) {
   $29 = $3;
   $30 = ((($29)) + 72|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $3;
   $33 = ((($32)) + 88|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $31 << $34;
   $36 = $3;
   $37 = ((($36)) + 108|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 2)|0;
   $40 = $3;
   $41 = ((($40)) + 56|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $35 ^ $45;
   $47 = $3;
   $48 = ((($47)) + 84|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $46 & $49;
   $51 = $3;
   $52 = ((($51)) + 72|0);
   HEAP32[$52>>2] = $50;
   $53 = $3;
   $54 = ((($53)) + 72|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $3;
   $57 = ((($56)) + 68|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + ($55<<1)|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = $3;
   $62 = ((($61)) + 108|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $3;
   $65 = ((($64)) + 52|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $63 & $66;
   $68 = $3;
   $69 = ((($68)) + 64|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + ($67<<1)|0);
   HEAP16[$71>>1] = $60;
   $72 = $60&65535;
   $5 = $72;
   $73 = $3;
   $74 = ((($73)) + 108|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75&65535;
   $77 = $3;
   $78 = ((($77)) + 72|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $3;
   $81 = ((($80)) + 68|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + ($79<<1)|0);
   HEAP16[$83>>1] = $76;
  }
  $84 = $5;
  $85 = ($84|0)!=(0);
  if ($85) {
   $86 = $3;
   $87 = ((($86)) + 108|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $5;
   $90 = (($88) - ($89))|0;
   $91 = $3;
   $92 = ((($91)) + 44|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) - 262)|0;
   $95 = ($90>>>0)<=($94>>>0);
   if ($95) {
    $96 = $3;
    $97 = $5;
    $98 = (_longest_match($96,$97)|0);
    $99 = $3;
    $100 = ((($99)) + 96|0);
    HEAP32[$100>>2] = $98;
   }
  }
  $101 = $3;
  $102 = ((($101)) + 96|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103>>>0)>=(3);
  $105 = $3;
  do {
   if ($104) {
    $106 = ((($105)) + 96|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) - 3)|0;
    $109 = $108&255;
    $7 = $109;
    $110 = $3;
    $111 = ((($110)) + 108|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $3;
    $114 = ((($113)) + 112|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($112) - ($115))|0;
    $117 = $116&65535;
    $8 = $117;
    $118 = $8;
    $119 = $3;
    $120 = ((($119)) + 5792|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = $3;
    $123 = ((($122)) + 5796|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($124) + ($121<<1)|0);
    HEAP16[$125>>1] = $118;
    $126 = $7;
    $127 = $3;
    $128 = ((($127)) + 5792|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + 1)|0;
    HEAP32[$128>>2] = $130;
    $131 = $3;
    $132 = ((($131)) + 5784|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($133) + ($129)|0);
    HEAP8[$134>>0] = $126;
    $135 = $8;
    $136 = (($135) + -1)<<16>>16;
    $8 = $136;
    $137 = $7;
    $138 = $137&255;
    $139 = (14446 + ($138)|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $142 = (($141) + 256)|0;
    $143 = (($142) + 1)|0;
    $144 = $3;
    $145 = ((($144)) + 148|0);
    $146 = (($145) + ($143<<2)|0);
    $147 = HEAP16[$146>>1]|0;
    $148 = (($147) + 1)<<16>>16;
    HEAP16[$146>>1] = $148;
    $149 = $8;
    $150 = $149&65535;
    $151 = ($150|0)<(256);
    $152 = $8;
    $153 = $152&65535;
    if ($151) {
     $154 = (13934 + ($153)|0);
     $155 = HEAP8[$154>>0]|0;
     $$sink = $155;
    } else {
     $156 = $153 >> 7;
     $157 = (256 + ($156))|0;
     $158 = (13934 + ($157)|0);
     $159 = HEAP8[$158>>0]|0;
     $$sink = $159;
    }
    $160 = $$sink&255;
    $161 = $3;
    $162 = ((($161)) + 2440|0);
    $163 = (($162) + ($160<<2)|0);
    $164 = HEAP16[$163>>1]|0;
    $165 = (($164) + 1)<<16>>16;
    HEAP16[$163>>1] = $165;
    $166 = $3;
    $167 = ((($166)) + 5792|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $3;
    $170 = ((($169)) + 5788|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (($171) - 1)|0;
    $173 = ($168|0)==($172|0);
    $174 = $173&1;
    $6 = $174;
    $175 = $3;
    $176 = ((($175)) + 96|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $3;
    $179 = ((($178)) + 116|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (($180) - ($177))|0;
    HEAP32[$179>>2] = $181;
    $182 = $3;
    $183 = ((($182)) + 96|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $3;
    $186 = ((($185)) + 128|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = ($184>>>0)<=($187>>>0);
    if ($188) {
     $189 = $3;
     $190 = ((($189)) + 116|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ($191>>>0)>=(3);
     if ($192) {
      $193 = $3;
      $194 = ((($193)) + 96|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195) + -1)|0;
      HEAP32[$194>>2] = $196;
      while(1) {
       $197 = $3;
       $198 = ((($197)) + 108|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = (($199) + 1)|0;
       HEAP32[$198>>2] = $200;
       $201 = $3;
       $202 = ((($201)) + 72|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $3;
       $205 = ((($204)) + 88|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = $203 << $206;
       $208 = $3;
       $209 = ((($208)) + 108|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + 2)|0;
       $212 = $3;
       $213 = ((($212)) + 56|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = (($214) + ($211)|0);
       $216 = HEAP8[$215>>0]|0;
       $217 = $216&255;
       $218 = $207 ^ $217;
       $219 = $3;
       $220 = ((($219)) + 84|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $218 & $221;
       $223 = $3;
       $224 = ((($223)) + 72|0);
       HEAP32[$224>>2] = $222;
       $225 = $3;
       $226 = ((($225)) + 72|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = $3;
       $229 = ((($228)) + 68|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = (($230) + ($227<<1)|0);
       $232 = HEAP16[$231>>1]|0;
       $233 = $3;
       $234 = ((($233)) + 108|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = $3;
       $237 = ((($236)) + 52|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = $235 & $238;
       $240 = $3;
       $241 = ((($240)) + 64|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = (($242) + ($239<<1)|0);
       HEAP16[$243>>1] = $232;
       $244 = $232&65535;
       $5 = $244;
       $245 = $3;
       $246 = ((($245)) + 108|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = $247&65535;
       $249 = $3;
       $250 = ((($249)) + 72|0);
       $251 = HEAP32[$250>>2]|0;
       $252 = $3;
       $253 = ((($252)) + 68|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = (($254) + ($251<<1)|0);
       HEAP16[$255>>1] = $248;
       $256 = $3;
       $257 = ((($256)) + 96|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = (($258) + -1)|0;
       HEAP32[$257>>2] = $259;
       $260 = ($259|0)!=(0);
       if (!($260)) {
        break;
       }
      }
      $261 = $3;
      $262 = ((($261)) + 108|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = (($263) + 1)|0;
      HEAP32[$262>>2] = $264;
      break;
     }
    }
    $265 = $3;
    $266 = ((($265)) + 96|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = $3;
    $269 = ((($268)) + 108|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = (($270) + ($267))|0;
    HEAP32[$269>>2] = $271;
    $272 = $3;
    $273 = ((($272)) + 96|0);
    HEAP32[$273>>2] = 0;
    $274 = $3;
    $275 = ((($274)) + 108|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = $3;
    $278 = ((($277)) + 56|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = (($279) + ($276)|0);
    $281 = HEAP8[$280>>0]|0;
    $282 = $281&255;
    $283 = $3;
    $284 = ((($283)) + 72|0);
    HEAP32[$284>>2] = $282;
    $285 = $3;
    $286 = ((($285)) + 72|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = $3;
    $289 = ((($288)) + 88|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $287 << $290;
    $292 = $3;
    $293 = ((($292)) + 108|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = (($294) + 1)|0;
    $296 = $3;
    $297 = ((($296)) + 56|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = (($298) + ($295)|0);
    $300 = HEAP8[$299>>0]|0;
    $301 = $300&255;
    $302 = $291 ^ $301;
    $303 = $3;
    $304 = ((($303)) + 84|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = $302 & $305;
    $307 = $3;
    $308 = ((($307)) + 72|0);
    HEAP32[$308>>2] = $306;
   } else {
    $309 = ((($105)) + 108|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = $3;
    $312 = ((($311)) + 56|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = (($313) + ($310)|0);
    $315 = HEAP8[$314>>0]|0;
    $9 = $315;
    $316 = $3;
    $317 = ((($316)) + 5792|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = $3;
    $320 = ((($319)) + 5796|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = (($321) + ($318<<1)|0);
    HEAP16[$322>>1] = 0;
    $323 = $9;
    $324 = $3;
    $325 = ((($324)) + 5792|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = (($326) + 1)|0;
    HEAP32[$325>>2] = $327;
    $328 = $3;
    $329 = ((($328)) + 5784|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = (($330) + ($326)|0);
    HEAP8[$331>>0] = $323;
    $332 = $9;
    $333 = $332&255;
    $334 = $3;
    $335 = ((($334)) + 148|0);
    $336 = (($335) + ($333<<2)|0);
    $337 = HEAP16[$336>>1]|0;
    $338 = (($337) + 1)<<16>>16;
    HEAP16[$336>>1] = $338;
    $339 = $3;
    $340 = ((($339)) + 5792|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = $3;
    $343 = ((($342)) + 5788|0);
    $344 = HEAP32[$343>>2]|0;
    $345 = (($344) - 1)|0;
    $346 = ($341|0)==($345|0);
    $347 = $346&1;
    $6 = $347;
    $348 = $3;
    $349 = ((($348)) + 116|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = (($350) + -1)|0;
    HEAP32[$349>>2] = $351;
    $352 = $3;
    $353 = ((($352)) + 108|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = (($354) + 1)|0;
    HEAP32[$353>>2] = $355;
   }
  } while(0);
  $356 = $6;
  $357 = ($356|0)!=(0);
  if (!($357)) {
   continue;
  }
  $358 = $3;
  $359 = $3;
  $360 = ((($359)) + 92|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = ($361|0)>=(0);
  if ($362) {
   $363 = $3;
   $364 = ((($363)) + 92|0);
   $365 = HEAP32[$364>>2]|0;
   $366 = $3;
   $367 = ((($366)) + 56|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = (($368) + ($365)|0);
   $377 = $369;
  } else {
   $377 = 0;
  }
  $370 = $3;
  $371 = ((($370)) + 108|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = $3;
  $374 = ((($373)) + 92|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = (($372) - ($375))|0;
  __tr_flush_block($358,$377,$376,0);
  $378 = $3;
  $379 = ((($378)) + 108|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = $3;
  $382 = ((($381)) + 92|0);
  HEAP32[$382>>2] = $380;
  $383 = $3;
  $384 = HEAP32[$383>>2]|0;
  _flush_pending($384);
  $385 = $3;
  $386 = HEAP32[$385>>2]|0;
  $387 = ((($386)) + 16|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = ($388|0)==(0);
  if ($389) {
   label = 26;
   break;
  }
 }
 if ((label|0) == 4) {
  $2 = 0;
  $469 = $2;
  STACKTOP = sp;return ($469|0);
 }
 else if ((label|0) == 26) {
  $2 = 0;
  $469 = $2;
  STACKTOP = sp;return ($469|0);
 }
 else if ((label|0) == 27) {
  $390 = $3;
  $391 = ((($390)) + 108|0);
  $392 = HEAP32[$391>>2]|0;
  $393 = ($392>>>0)<(2);
  if ($393) {
   $394 = $3;
   $395 = ((($394)) + 108|0);
   $396 = HEAP32[$395>>2]|0;
   $399 = $396;
  } else {
   $399 = 2;
  }
  $397 = $3;
  $398 = ((($397)) + 5812|0);
  HEAP32[$398>>2] = $399;
  $400 = $4;
  $401 = ($400|0)==(4);
  $402 = $3;
  if ($401) {
   $403 = $3;
   $404 = ((($403)) + 92|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = ($405|0)>=(0);
   if ($406) {
    $407 = $3;
    $408 = ((($407)) + 92|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = $3;
    $411 = ((($410)) + 56|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = (($412) + ($409)|0);
    $421 = $413;
   } else {
    $421 = 0;
   }
   $414 = $3;
   $415 = ((($414)) + 108|0);
   $416 = HEAP32[$415>>2]|0;
   $417 = $3;
   $418 = ((($417)) + 92|0);
   $419 = HEAP32[$418>>2]|0;
   $420 = (($416) - ($419))|0;
   __tr_flush_block($402,$421,$420,1);
   $422 = $3;
   $423 = ((($422)) + 108|0);
   $424 = HEAP32[$423>>2]|0;
   $425 = $3;
   $426 = ((($425)) + 92|0);
   HEAP32[$426>>2] = $424;
   $427 = $3;
   $428 = HEAP32[$427>>2]|0;
   _flush_pending($428);
   $429 = $3;
   $430 = HEAP32[$429>>2]|0;
   $431 = ((($430)) + 16|0);
   $432 = HEAP32[$431>>2]|0;
   $433 = ($432|0)==(0);
   if ($433) {
    $2 = 2;
    $469 = $2;
    STACKTOP = sp;return ($469|0);
   } else {
    $2 = 3;
    $469 = $2;
    STACKTOP = sp;return ($469|0);
   }
  }
  $434 = ((($402)) + 5792|0);
  $435 = HEAP32[$434>>2]|0;
  $436 = ($435|0)!=(0);
  if ($436) {
   $437 = $3;
   $438 = $3;
   $439 = ((($438)) + 92|0);
   $440 = HEAP32[$439>>2]|0;
   $441 = ($440|0)>=(0);
   if ($441) {
    $442 = $3;
    $443 = ((($442)) + 92|0);
    $444 = HEAP32[$443>>2]|0;
    $445 = $3;
    $446 = ((($445)) + 56|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = (($447) + ($444)|0);
    $456 = $448;
   } else {
    $456 = 0;
   }
   $449 = $3;
   $450 = ((($449)) + 108|0);
   $451 = HEAP32[$450>>2]|0;
   $452 = $3;
   $453 = ((($452)) + 92|0);
   $454 = HEAP32[$453>>2]|0;
   $455 = (($451) - ($454))|0;
   __tr_flush_block($437,$456,$455,0);
   $457 = $3;
   $458 = ((($457)) + 108|0);
   $459 = HEAP32[$458>>2]|0;
   $460 = $3;
   $461 = ((($460)) + 92|0);
   HEAP32[$461>>2] = $459;
   $462 = $3;
   $463 = HEAP32[$462>>2]|0;
   _flush_pending($463);
   $464 = $3;
   $465 = HEAP32[$464>>2]|0;
   $466 = ((($465)) + 16|0);
   $467 = HEAP32[$466>>2]|0;
   $468 = ($467|0)==(0);
   if ($468) {
    $2 = 0;
    $469 = $2;
    STACKTOP = sp;return ($469|0);
   }
  }
  $2 = 1;
  $469 = $2;
  STACKTOP = sp;return ($469|0);
 }
 return (0)|0;
}
function _deflate_slow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $12 = $3;
  $13 = ((($12)) + 116|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14>>>0)<(262);
  if ($15) {
   $16 = $3;
   _fill_window($16);
   $17 = $3;
   $18 = ((($17)) + 116|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19>>>0)<(262);
   $21 = $4;
   $22 = ($21|0)==(0);
   $or$cond = $20 & $22;
   if ($or$cond) {
    label = 4;
    break;
   }
   $23 = $3;
   $24 = ((($23)) + 116|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    label = 38;
    break;
   }
  }
  $5 = 0;
  $27 = $3;
  $28 = ((($27)) + 116|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29>>>0)>=(3);
  if ($30) {
   $31 = $3;
   $32 = ((($31)) + 72|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $3;
   $35 = ((($34)) + 88|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $33 << $36;
   $38 = $3;
   $39 = ((($38)) + 108|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 2)|0;
   $42 = $3;
   $43 = ((($42)) + 56|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($41)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $37 ^ $47;
   $49 = $3;
   $50 = ((($49)) + 84|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $48 & $51;
   $53 = $3;
   $54 = ((($53)) + 72|0);
   HEAP32[$54>>2] = $52;
   $55 = $3;
   $56 = ((($55)) + 72|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $3;
   $59 = ((($58)) + 68|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($57<<1)|0);
   $62 = HEAP16[$61>>1]|0;
   $63 = $3;
   $64 = ((($63)) + 108|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $3;
   $67 = ((($66)) + 52|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $65 & $68;
   $70 = $3;
   $71 = ((($70)) + 64|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + ($69<<1)|0);
   HEAP16[$73>>1] = $62;
   $74 = $62&65535;
   $5 = $74;
   $75 = $3;
   $76 = ((($75)) + 108|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77&65535;
   $79 = $3;
   $80 = ((($79)) + 72|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $3;
   $83 = ((($82)) + 68|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($81<<1)|0);
   HEAP16[$85>>1] = $78;
  }
  $86 = $3;
  $87 = ((($86)) + 96|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = ((($89)) + 120|0);
  HEAP32[$90>>2] = $88;
  $91 = $3;
  $92 = ((($91)) + 112|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $3;
  $95 = ((($94)) + 100|0);
  HEAP32[$95>>2] = $93;
  $96 = $3;
  $97 = ((($96)) + 96|0);
  HEAP32[$97>>2] = 2;
  $98 = $5;
  $99 = ($98|0)!=(0);
  do {
   if ($99) {
    $100 = $3;
    $101 = ((($100)) + 120|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $3;
    $104 = ((($103)) + 128|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($102>>>0)<($105>>>0);
    if ($106) {
     $107 = $3;
     $108 = ((($107)) + 108|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = $5;
     $111 = (($109) - ($110))|0;
     $112 = $3;
     $113 = ((($112)) + 44|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (($114) - 262)|0;
     $116 = ($111>>>0)<=($115>>>0);
     if ($116) {
      $117 = $3;
      $118 = $5;
      $119 = (_longest_match($117,$118)|0);
      $120 = $3;
      $121 = ((($120)) + 96|0);
      HEAP32[$121>>2] = $119;
      $122 = $3;
      $123 = ((($122)) + 96|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124>>>0)<=(5);
      if ($125) {
       $126 = $3;
       $127 = ((($126)) + 136|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ($128|0)==(1);
       if (!($129)) {
        $130 = $3;
        $131 = ((($130)) + 96|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = ($132|0)==(3);
        if (!($133)) {
         break;
        }
        $134 = $3;
        $135 = ((($134)) + 108|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = $3;
        $138 = ((($137)) + 112|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (($136) - ($139))|0;
        $141 = ($140>>>0)>(4096);
        if (!($141)) {
         break;
        }
       }
       $142 = $3;
       $143 = ((($142)) + 96|0);
       HEAP32[$143>>2] = 2;
      }
     }
    }
   }
  } while(0);
  $144 = $3;
  $145 = ((($144)) + 120|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($146>>>0)>=(3);
  if ($147) {
   $148 = $3;
   $149 = ((($148)) + 96|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $3;
   $152 = ((($151)) + 120|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($150>>>0)<=($153>>>0);
   if ($154) {
    $155 = $3;
    $156 = ((($155)) + 108|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $3;
    $159 = ((($158)) + 116|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = (($157) + ($160))|0;
    $162 = (($161) - 3)|0;
    $7 = $162;
    $163 = $3;
    $164 = ((($163)) + 120|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (($165) - 3)|0;
    $167 = $166&255;
    $8 = $167;
    $168 = $3;
    $169 = ((($168)) + 108|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (($170) - 1)|0;
    $172 = $3;
    $173 = ((($172)) + 100|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($171) - ($174))|0;
    $176 = $175&65535;
    $9 = $176;
    $177 = $9;
    $178 = $3;
    $179 = ((($178)) + 5792|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = $3;
    $182 = ((($181)) + 5796|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (($183) + ($180<<1)|0);
    HEAP16[$184>>1] = $177;
    $185 = $8;
    $186 = $3;
    $187 = ((($186)) + 5792|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = (($188) + 1)|0;
    HEAP32[$187>>2] = $189;
    $190 = $3;
    $191 = ((($190)) + 5784|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = (($192) + ($188)|0);
    HEAP8[$193>>0] = $185;
    $194 = $9;
    $195 = (($194) + -1)<<16>>16;
    $9 = $195;
    $196 = $8;
    $197 = $196&255;
    $198 = (14446 + ($197)|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = $199&255;
    $201 = (($200) + 256)|0;
    $202 = (($201) + 1)|0;
    $203 = $3;
    $204 = ((($203)) + 148|0);
    $205 = (($204) + ($202<<2)|0);
    $206 = HEAP16[$205>>1]|0;
    $207 = (($206) + 1)<<16>>16;
    HEAP16[$205>>1] = $207;
    $208 = $9;
    $209 = $208&65535;
    $210 = ($209|0)<(256);
    $211 = $9;
    $212 = $211&65535;
    if ($210) {
     $213 = (13934 + ($212)|0);
     $214 = HEAP8[$213>>0]|0;
     $$sink = $214;
    } else {
     $215 = $212 >> 7;
     $216 = (256 + ($215))|0;
     $217 = (13934 + ($216)|0);
     $218 = HEAP8[$217>>0]|0;
     $$sink = $218;
    }
    $219 = $$sink&255;
    $220 = $3;
    $221 = ((($220)) + 2440|0);
    $222 = (($221) + ($219<<2)|0);
    $223 = HEAP16[$222>>1]|0;
    $224 = (($223) + 1)<<16>>16;
    HEAP16[$222>>1] = $224;
    $225 = $3;
    $226 = ((($225)) + 5792|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = $3;
    $229 = ((($228)) + 5788|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = (($230) - 1)|0;
    $232 = ($227|0)==($231|0);
    $233 = $232&1;
    $6 = $233;
    $234 = $3;
    $235 = ((($234)) + 120|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = (($236) - 1)|0;
    $238 = $3;
    $239 = ((($238)) + 116|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = (($240) - ($237))|0;
    HEAP32[$239>>2] = $241;
    $242 = $3;
    $243 = ((($242)) + 120|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = (($244) - 2)|0;
    HEAP32[$243>>2] = $245;
    while(1) {
     $246 = $3;
     $247 = ((($246)) + 108|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = (($248) + 1)|0;
     HEAP32[$247>>2] = $249;
     $250 = $7;
     $251 = ($249>>>0)<=($250>>>0);
     if ($251) {
      $252 = $3;
      $253 = ((($252)) + 72|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = $3;
      $256 = ((($255)) + 88|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = $254 << $257;
      $259 = $3;
      $260 = ((($259)) + 108|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = (($261) + 2)|0;
      $263 = $3;
      $264 = ((($263)) + 56|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = (($265) + ($262)|0);
      $267 = HEAP8[$266>>0]|0;
      $268 = $267&255;
      $269 = $258 ^ $268;
      $270 = $3;
      $271 = ((($270)) + 84|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = $269 & $272;
      $274 = $3;
      $275 = ((($274)) + 72|0);
      HEAP32[$275>>2] = $273;
      $276 = $3;
      $277 = ((($276)) + 72|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = $3;
      $280 = ((($279)) + 68|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = (($281) + ($278<<1)|0);
      $283 = HEAP16[$282>>1]|0;
      $284 = $3;
      $285 = ((($284)) + 108|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = $3;
      $288 = ((($287)) + 52|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = $286 & $289;
      $291 = $3;
      $292 = ((($291)) + 64|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = (($293) + ($290<<1)|0);
      HEAP16[$294>>1] = $283;
      $295 = $283&65535;
      $5 = $295;
      $296 = $3;
      $297 = ((($296)) + 108|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = $298&65535;
      $300 = $3;
      $301 = ((($300)) + 72|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = $3;
      $304 = ((($303)) + 68|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = (($305) + ($302<<1)|0);
      HEAP16[$306>>1] = $299;
     }
     $307 = $3;
     $308 = ((($307)) + 120|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = (($309) + -1)|0;
     HEAP32[$308>>2] = $310;
     $311 = ($310|0)!=(0);
     if (!($311)) {
      break;
     }
    }
    $312 = $3;
    $313 = ((($312)) + 104|0);
    HEAP32[$313>>2] = 0;
    $314 = $3;
    $315 = ((($314)) + 96|0);
    HEAP32[$315>>2] = 2;
    $316 = $3;
    $317 = ((($316)) + 108|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = (($318) + 1)|0;
    HEAP32[$317>>2] = $319;
    $320 = $6;
    $321 = ($320|0)!=(0);
    if (!($321)) {
     continue;
    }
    $322 = $3;
    $323 = $3;
    $324 = ((($323)) + 92|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ($325|0)>=(0);
    if ($326) {
     $327 = $3;
     $328 = ((($327)) + 92|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = $3;
     $331 = ((($330)) + 56|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = (($332) + ($329)|0);
     $341 = $333;
    } else {
     $341 = 0;
    }
    $334 = $3;
    $335 = ((($334)) + 108|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = $3;
    $338 = ((($337)) + 92|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = (($336) - ($339))|0;
    __tr_flush_block($322,$341,$340,0);
    $342 = $3;
    $343 = ((($342)) + 108|0);
    $344 = HEAP32[$343>>2]|0;
    $345 = $3;
    $346 = ((($345)) + 92|0);
    HEAP32[$346>>2] = $344;
    $347 = $3;
    $348 = HEAP32[$347>>2]|0;
    _flush_pending($348);
    $349 = $3;
    $350 = HEAP32[$349>>2]|0;
    $351 = ((($350)) + 16|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = ($352|0)==(0);
    if ($353) {
     label = 29;
     break;
    } else {
     continue;
    }
   }
  }
  $354 = $3;
  $355 = ((($354)) + 104|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = ($356|0)!=(0);
  $358 = $3;
  if (!($357)) {
   $441 = ((($358)) + 104|0);
   HEAP32[$441>>2] = 1;
   $442 = $3;
   $443 = ((($442)) + 108|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = (($444) + 1)|0;
   HEAP32[$443>>2] = $445;
   $446 = $3;
   $447 = ((($446)) + 116|0);
   $448 = HEAP32[$447>>2]|0;
   $449 = (($448) + -1)|0;
   HEAP32[$447>>2] = $449;
   continue;
  }
  $359 = ((($358)) + 108|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = (($360) - 1)|0;
  $362 = $3;
  $363 = ((($362)) + 56|0);
  $364 = HEAP32[$363>>2]|0;
  $365 = (($364) + ($361)|0);
  $366 = HEAP8[$365>>0]|0;
  $10 = $366;
  $367 = $3;
  $368 = ((($367)) + 5792|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = $3;
  $371 = ((($370)) + 5796|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = (($372) + ($369<<1)|0);
  HEAP16[$373>>1] = 0;
  $374 = $10;
  $375 = $3;
  $376 = ((($375)) + 5792|0);
  $377 = HEAP32[$376>>2]|0;
  $378 = (($377) + 1)|0;
  HEAP32[$376>>2] = $378;
  $379 = $3;
  $380 = ((($379)) + 5784|0);
  $381 = HEAP32[$380>>2]|0;
  $382 = (($381) + ($377)|0);
  HEAP8[$382>>0] = $374;
  $383 = $10;
  $384 = $383&255;
  $385 = $3;
  $386 = ((($385)) + 148|0);
  $387 = (($386) + ($384<<2)|0);
  $388 = HEAP16[$387>>1]|0;
  $389 = (($388) + 1)<<16>>16;
  HEAP16[$387>>1] = $389;
  $390 = $3;
  $391 = ((($390)) + 5792|0);
  $392 = HEAP32[$391>>2]|0;
  $393 = $3;
  $394 = ((($393)) + 5788|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = (($395) - 1)|0;
  $397 = ($392|0)==($396|0);
  $398 = $397&1;
  $6 = $398;
  $399 = $6;
  $400 = ($399|0)!=(0);
  if ($400) {
   $401 = $3;
   $402 = $3;
   $403 = ((($402)) + 92|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = ($404|0)>=(0);
   if ($405) {
    $406 = $3;
    $407 = ((($406)) + 92|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = $3;
    $410 = ((($409)) + 56|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = (($411) + ($408)|0);
    $420 = $412;
   } else {
    $420 = 0;
   }
   $413 = $3;
   $414 = ((($413)) + 108|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = $3;
   $417 = ((($416)) + 92|0);
   $418 = HEAP32[$417>>2]|0;
   $419 = (($415) - ($418))|0;
   __tr_flush_block($401,$420,$419,0);
   $421 = $3;
   $422 = ((($421)) + 108|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = $3;
   $425 = ((($424)) + 92|0);
   HEAP32[$425>>2] = $423;
   $426 = $3;
   $427 = HEAP32[$426>>2]|0;
   _flush_pending($427);
  }
  $428 = $3;
  $429 = ((($428)) + 108|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = (($430) + 1)|0;
  HEAP32[$429>>2] = $431;
  $432 = $3;
  $433 = ((($432)) + 116|0);
  $434 = HEAP32[$433>>2]|0;
  $435 = (($434) + -1)|0;
  HEAP32[$433>>2] = $435;
  $436 = $3;
  $437 = HEAP32[$436>>2]|0;
  $438 = ((($437)) + 16|0);
  $439 = HEAP32[$438>>2]|0;
  $440 = ($439|0)==(0);
  if ($440) {
   label = 36;
   break;
  }
 }
 if ((label|0) == 4) {
  $2 = 0;
  $576 = $2;
  STACKTOP = sp;return ($576|0);
 }
 else if ((label|0) == 29) {
  $2 = 0;
  $576 = $2;
  STACKTOP = sp;return ($576|0);
 }
 else if ((label|0) == 36) {
  $2 = 0;
  $576 = $2;
  STACKTOP = sp;return ($576|0);
 }
 else if ((label|0) == 38) {
  $450 = $3;
  $451 = ((($450)) + 104|0);
  $452 = HEAP32[$451>>2]|0;
  $453 = ($452|0)!=(0);
  if ($453) {
   $454 = $3;
   $455 = ((($454)) + 108|0);
   $456 = HEAP32[$455>>2]|0;
   $457 = (($456) - 1)|0;
   $458 = $3;
   $459 = ((($458)) + 56|0);
   $460 = HEAP32[$459>>2]|0;
   $461 = (($460) + ($457)|0);
   $462 = HEAP8[$461>>0]|0;
   $11 = $462;
   $463 = $3;
   $464 = ((($463)) + 5792|0);
   $465 = HEAP32[$464>>2]|0;
   $466 = $3;
   $467 = ((($466)) + 5796|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = (($468) + ($465<<1)|0);
   HEAP16[$469>>1] = 0;
   $470 = $11;
   $471 = $3;
   $472 = ((($471)) + 5792|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = (($473) + 1)|0;
   HEAP32[$472>>2] = $474;
   $475 = $3;
   $476 = ((($475)) + 5784|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = (($477) + ($473)|0);
   HEAP8[$478>>0] = $470;
   $479 = $11;
   $480 = $479&255;
   $481 = $3;
   $482 = ((($481)) + 148|0);
   $483 = (($482) + ($480<<2)|0);
   $484 = HEAP16[$483>>1]|0;
   $485 = (($484) + 1)<<16>>16;
   HEAP16[$483>>1] = $485;
   $486 = $3;
   $487 = ((($486)) + 5792|0);
   $488 = HEAP32[$487>>2]|0;
   $489 = $3;
   $490 = ((($489)) + 5788|0);
   $491 = HEAP32[$490>>2]|0;
   $492 = (($491) - 1)|0;
   $493 = ($488|0)==($492|0);
   $494 = $493&1;
   $6 = $494;
   $495 = $3;
   $496 = ((($495)) + 104|0);
   HEAP32[$496>>2] = 0;
  }
  $497 = $3;
  $498 = ((($497)) + 108|0);
  $499 = HEAP32[$498>>2]|0;
  $500 = ($499>>>0)<(2);
  if ($500) {
   $501 = $3;
   $502 = ((($501)) + 108|0);
   $503 = HEAP32[$502>>2]|0;
   $506 = $503;
  } else {
   $506 = 2;
  }
  $504 = $3;
  $505 = ((($504)) + 5812|0);
  HEAP32[$505>>2] = $506;
  $507 = $4;
  $508 = ($507|0)==(4);
  $509 = $3;
  if ($508) {
   $510 = $3;
   $511 = ((($510)) + 92|0);
   $512 = HEAP32[$511>>2]|0;
   $513 = ($512|0)>=(0);
   if ($513) {
    $514 = $3;
    $515 = ((($514)) + 92|0);
    $516 = HEAP32[$515>>2]|0;
    $517 = $3;
    $518 = ((($517)) + 56|0);
    $519 = HEAP32[$518>>2]|0;
    $520 = (($519) + ($516)|0);
    $528 = $520;
   } else {
    $528 = 0;
   }
   $521 = $3;
   $522 = ((($521)) + 108|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $3;
   $525 = ((($524)) + 92|0);
   $526 = HEAP32[$525>>2]|0;
   $527 = (($523) - ($526))|0;
   __tr_flush_block($509,$528,$527,1);
   $529 = $3;
   $530 = ((($529)) + 108|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = $3;
   $533 = ((($532)) + 92|0);
   HEAP32[$533>>2] = $531;
   $534 = $3;
   $535 = HEAP32[$534>>2]|0;
   _flush_pending($535);
   $536 = $3;
   $537 = HEAP32[$536>>2]|0;
   $538 = ((($537)) + 16|0);
   $539 = HEAP32[$538>>2]|0;
   $540 = ($539|0)==(0);
   if ($540) {
    $2 = 2;
    $576 = $2;
    STACKTOP = sp;return ($576|0);
   } else {
    $2 = 3;
    $576 = $2;
    STACKTOP = sp;return ($576|0);
   }
  }
  $541 = ((($509)) + 5792|0);
  $542 = HEAP32[$541>>2]|0;
  $543 = ($542|0)!=(0);
  if ($543) {
   $544 = $3;
   $545 = $3;
   $546 = ((($545)) + 92|0);
   $547 = HEAP32[$546>>2]|0;
   $548 = ($547|0)>=(0);
   if ($548) {
    $549 = $3;
    $550 = ((($549)) + 92|0);
    $551 = HEAP32[$550>>2]|0;
    $552 = $3;
    $553 = ((($552)) + 56|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = (($554) + ($551)|0);
    $563 = $555;
   } else {
    $563 = 0;
   }
   $556 = $3;
   $557 = ((($556)) + 108|0);
   $558 = HEAP32[$557>>2]|0;
   $559 = $3;
   $560 = ((($559)) + 92|0);
   $561 = HEAP32[$560>>2]|0;
   $562 = (($558) - ($561))|0;
   __tr_flush_block($544,$563,$562,0);
   $564 = $3;
   $565 = ((($564)) + 108|0);
   $566 = HEAP32[$565>>2]|0;
   $567 = $3;
   $568 = ((($567)) + 92|0);
   HEAP32[$568>>2] = $566;
   $569 = $3;
   $570 = HEAP32[$569>>2]|0;
   _flush_pending($570);
   $571 = $3;
   $572 = HEAP32[$571>>2]|0;
   $573 = ((($572)) + 16|0);
   $574 = HEAP32[$573>>2]|0;
   $575 = ($574|0)==(0);
   if ($575) {
    $2 = 0;
    $576 = $2;
    STACKTOP = sp;return ($576|0);
   }
  }
  $2 = 1;
  $576 = $2;
  STACKTOP = sp;return ($576|0);
 }
 return (0)|0;
}
function _fill_window($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $0;
 $10 = $1;
 $11 = ((($10)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 while(1) {
  $13 = $1;
  $14 = ((($13)) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = ((($16)) + 116|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) - ($18))|0;
  $20 = $1;
  $21 = ((($20)) + 108|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($19) - ($22))|0;
  $5 = $23;
  $24 = $1;
  $25 = ((($24)) + 108|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $6;
  $28 = $1;
  $29 = ((($28)) + 44|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) - 262)|0;
  $32 = (($27) + ($31))|0;
  $33 = ($26>>>0)>=($32>>>0);
  if ($33) {
   $34 = $1;
   $35 = ((($34)) + 56|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $1;
   $38 = ((($37)) + 56|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $6;
   $41 = (($39) + ($40)|0);
   $42 = $6;
   _memcpy(($36|0),($41|0),($42|0))|0;
   $43 = $6;
   $44 = $1;
   $45 = ((($44)) + 112|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) - ($43))|0;
   HEAP32[$45>>2] = $47;
   $48 = $6;
   $49 = $1;
   $50 = ((($49)) + 108|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) - ($48))|0;
   HEAP32[$50>>2] = $52;
   $53 = $6;
   $54 = $1;
   $55 = ((($54)) + 92|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) - ($53))|0;
   HEAP32[$55>>2] = $57;
   $58 = $1;
   $59 = ((($58)) + 76|0);
   $60 = HEAP32[$59>>2]|0;
   $2 = $60;
   $61 = $2;
   $62 = $1;
   $63 = ((($62)) + 68|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + ($61<<1)|0);
   $4 = $65;
   while(1) {
    $66 = $4;
    $67 = ((($66)) + -2|0);
    $4 = $67;
    $68 = HEAP16[$67>>1]|0;
    $69 = $68&65535;
    $3 = $69;
    $70 = $3;
    $71 = $6;
    $72 = ($70>>>0)>=($71>>>0);
    if ($72) {
     $73 = $3;
     $74 = $6;
     $75 = (($73) - ($74))|0;
     $77 = $75;
    } else {
     $77 = 0;
    }
    $76 = $77&65535;
    $78 = $4;
    HEAP16[$78>>1] = $76;
    $79 = $2;
    $80 = (($79) + -1)|0;
    $2 = $80;
    $81 = ($80|0)!=(0);
    if (!($81)) {
     break;
    }
   }
   $82 = $6;
   $2 = $82;
   $83 = $2;
   $84 = $1;
   $85 = ((($84)) + 64|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + ($83<<1)|0);
   $4 = $87;
   while(1) {
    $88 = $4;
    $89 = ((($88)) + -2|0);
    $4 = $89;
    $90 = HEAP16[$89>>1]|0;
    $91 = $90&65535;
    $3 = $91;
    $92 = $3;
    $93 = $6;
    $94 = ($92>>>0)>=($93>>>0);
    if ($94) {
     $95 = $3;
     $96 = $6;
     $97 = (($95) - ($96))|0;
     $99 = $97;
    } else {
     $99 = 0;
    }
    $98 = $99&65535;
    $100 = $4;
    HEAP16[$100>>1] = $98;
    $101 = $2;
    $102 = (($101) + -1)|0;
    $2 = $102;
    $103 = ($102|0)!=(0);
    if (!($103)) {
     break;
    }
   }
   $104 = $6;
   $105 = $5;
   $106 = (($105) + ($104))|0;
   $5 = $106;
  }
  $107 = $1;
  $108 = HEAP32[$107>>2]|0;
  $109 = ((($108)) + 4|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)==(0);
  if ($111) {
   break;
  }
  $112 = $1;
  $113 = HEAP32[$112>>2]|0;
  $114 = $1;
  $115 = ((($114)) + 56|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $1;
  $118 = ((($117)) + 108|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($116) + ($119)|0);
  $121 = $1;
  $122 = ((($121)) + 116|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($120) + ($123)|0);
  $125 = $5;
  $126 = (_read_buf($113,$124,$125)|0);
  $2 = $126;
  $127 = $2;
  $128 = $1;
  $129 = ((($128)) + 116|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + ($127))|0;
  HEAP32[$129>>2] = $131;
  $132 = $1;
  $133 = ((($132)) + 116|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $1;
  $136 = ((($135)) + 5812|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($134) + ($137))|0;
  $139 = ($138>>>0)>=(3);
  L19: do {
   if ($139) {
    $140 = $1;
    $141 = ((($140)) + 108|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $1;
    $144 = ((($143)) + 5812|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($142) - ($145))|0;
    $7 = $146;
    $147 = $7;
    $148 = $1;
    $149 = ((($148)) + 56|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (($150) + ($147)|0);
    $152 = HEAP8[$151>>0]|0;
    $153 = $152&255;
    $154 = $1;
    $155 = ((($154)) + 72|0);
    HEAP32[$155>>2] = $153;
    $156 = $1;
    $157 = ((($156)) + 72|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = $1;
    $160 = ((($159)) + 88|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $158 << $161;
    $163 = $7;
    $164 = (($163) + 1)|0;
    $165 = $1;
    $166 = ((($165)) + 56|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = (($167) + ($164)|0);
    $169 = HEAP8[$168>>0]|0;
    $170 = $169&255;
    $171 = $162 ^ $170;
    $172 = $1;
    $173 = ((($172)) + 84|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = $171 & $174;
    $176 = $1;
    $177 = ((($176)) + 72|0);
    HEAP32[$177>>2] = $175;
    while(1) {
     $178 = $1;
     $179 = ((($178)) + 5812|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ($180|0)!=(0);
     if (!($181)) {
      break L19;
     }
     $182 = $1;
     $183 = ((($182)) + 72|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $1;
     $186 = ((($185)) + 88|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = $184 << $187;
     $189 = $7;
     $190 = (($189) + 3)|0;
     $191 = (($190) - 1)|0;
     $192 = $1;
     $193 = ((($192)) + 56|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (($194) + ($191)|0);
     $196 = HEAP8[$195>>0]|0;
     $197 = $196&255;
     $198 = $188 ^ $197;
     $199 = $1;
     $200 = ((($199)) + 84|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $198 & $201;
     $203 = $1;
     $204 = ((($203)) + 72|0);
     HEAP32[$204>>2] = $202;
     $205 = $1;
     $206 = ((($205)) + 72|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = $1;
     $209 = ((($208)) + 68|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = (($210) + ($207<<1)|0);
     $212 = HEAP16[$211>>1]|0;
     $213 = $7;
     $214 = $1;
     $215 = ((($214)) + 52|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = $213 & $216;
     $218 = $1;
     $219 = ((($218)) + 64|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = (($220) + ($217<<1)|0);
     HEAP16[$221>>1] = $212;
     $222 = $7;
     $223 = $222&65535;
     $224 = $1;
     $225 = ((($224)) + 72|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = $1;
     $228 = ((($227)) + 68|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = (($229) + ($226<<1)|0);
     HEAP16[$230>>1] = $223;
     $231 = $7;
     $232 = (($231) + 1)|0;
     $7 = $232;
     $233 = $1;
     $234 = ((($233)) + 5812|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = (($235) + -1)|0;
     HEAP32[$234>>2] = $236;
     $237 = $1;
     $238 = ((($237)) + 116|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = $1;
     $241 = ((($240)) + 5812|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = (($239) + ($242))|0;
     $244 = ($243>>>0)<(3);
     if ($244) {
      break;
     }
    }
   }
  } while(0);
  $245 = $1;
  $246 = ((($245)) + 116|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = ($247>>>0)<(262);
  if (!($248)) {
   break;
  }
  $249 = $1;
  $250 = HEAP32[$249>>2]|0;
  $251 = ((($250)) + 4|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = ($252|0)!=(0);
  if (!($253)) {
   break;
  }
 }
 $254 = $1;
 $255 = ((($254)) + 5824|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = $1;
 $258 = ((($257)) + 60|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = ($256>>>0)<($259>>>0);
 if (!($260)) {
  STACKTOP = sp;return;
 }
 $261 = $1;
 $262 = ((($261)) + 108|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = $1;
 $265 = ((($264)) + 116|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = (($263) + ($266))|0;
 $8 = $267;
 $268 = $1;
 $269 = ((($268)) + 5824|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = $8;
 $272 = ($270>>>0)<($271>>>0);
 $273 = $1;
 if ($272) {
  $274 = ((($273)) + 60|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = $8;
  $277 = (($275) - ($276))|0;
  $9 = $277;
  $278 = $9;
  $279 = ($278>>>0)>(258);
  $$ = $279 ? 258 : $277;
  $9 = $$;
  $280 = $1;
  $281 = ((($280)) + 56|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $8;
  $284 = (($282) + ($283)|0);
  $285 = $9;
  _memset(($284|0),0,($285|0))|0;
  $286 = $8;
  $287 = $9;
  $288 = (($286) + ($287))|0;
  $289 = $1;
  $290 = ((($289)) + 5824|0);
  HEAP32[$290>>2] = $288;
  STACKTOP = sp;return;
 }
 $291 = ((($273)) + 5824|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = $8;
 $294 = (($293) + 258)|0;
 $295 = ($292>>>0)<($294>>>0);
 if (!($295)) {
  STACKTOP = sp;return;
 }
 $296 = $8;
 $297 = (($296) + 258)|0;
 $298 = $1;
 $299 = ((($298)) + 5824|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = (($297) - ($300))|0;
 $9 = $301;
 $302 = $9;
 $303 = $1;
 $304 = ((($303)) + 60|0);
 $305 = HEAP32[$304>>2]|0;
 $306 = $1;
 $307 = ((($306)) + 5824|0);
 $308 = HEAP32[$307>>2]|0;
 $309 = (($305) - ($308))|0;
 $310 = ($302>>>0)>($309>>>0);
 if ($310) {
  $311 = $1;
  $312 = ((($311)) + 60|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = $1;
  $315 = ((($314)) + 5824|0);
  $316 = HEAP32[$315>>2]|0;
  $317 = (($313) - ($316))|0;
  $9 = $317;
 }
 $318 = $1;
 $319 = ((($318)) + 56|0);
 $320 = HEAP32[$319>>2]|0;
 $321 = $1;
 $322 = ((($321)) + 5824|0);
 $323 = HEAP32[$322>>2]|0;
 $324 = (($320) + ($323)|0);
 $325 = $9;
 _memset(($324|0),0,($325|0))|0;
 $326 = $9;
 $327 = $1;
 $328 = ((($327)) + 5824|0);
 $329 = HEAP32[$328>>2]|0;
 $330 = (($329) + ($326))|0;
 HEAP32[$328>>2] = $330;
 STACKTOP = sp;return;
}
function _longest_match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $17 = $3;
 $18 = ((($17)) + 124|0);
 $19 = HEAP32[$18>>2]|0;
 $5 = $19;
 $20 = $3;
 $21 = ((($20)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = ((($23)) + 108|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($22) + ($25)|0);
 $6 = $26;
 $27 = $3;
 $28 = ((($27)) + 120|0);
 $29 = HEAP32[$28>>2]|0;
 $9 = $29;
 $30 = $3;
 $31 = ((($30)) + 144|0);
 $32 = HEAP32[$31>>2]|0;
 $10 = $32;
 $33 = $3;
 $34 = ((($33)) + 108|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $3;
 $37 = ((($36)) + 44|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) - 262)|0;
 $40 = ($35>>>0)>($39>>>0);
 if ($40) {
  $41 = $3;
  $42 = ((($41)) + 108|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $3;
  $45 = ((($44)) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) - 262)|0;
  $48 = (($43) - ($47))|0;
  $49 = $48;
 } else {
  $49 = 0;
 }
 $11 = $49;
 $50 = $3;
 $51 = ((($50)) + 64|0);
 $52 = HEAP32[$51>>2]|0;
 $12 = $52;
 $53 = $3;
 $54 = ((($53)) + 52|0);
 $55 = HEAP32[$54>>2]|0;
 $13 = $55;
 $56 = $3;
 $57 = ((($56)) + 56|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $3;
 $60 = ((($59)) + 108|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($58) + ($61)|0);
 $63 = ((($62)) + 258|0);
 $14 = $63;
 $64 = $9;
 $65 = (($64) - 1)|0;
 $66 = $6;
 $67 = (($66) + ($65)|0);
 $68 = HEAP8[$67>>0]|0;
 $15 = $68;
 $69 = $9;
 $70 = $6;
 $71 = (($70) + ($69)|0);
 $72 = HEAP8[$71>>0]|0;
 $16 = $72;
 $73 = $3;
 $74 = ((($73)) + 120|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $3;
 $77 = ((($76)) + 140|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75>>>0)>=($78>>>0);
 if ($79) {
  $80 = $5;
  $81 = $80 >>> 2;
  $5 = $81;
 }
 $82 = $10;
 $83 = $3;
 $84 = ((($83)) + 116|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($82>>>0)>($85>>>0);
 if ($86) {
  $87 = $3;
  $88 = ((($87)) + 116|0);
  $89 = HEAP32[$88>>2]|0;
  $10 = $89;
 }
 while(1) {
  $90 = $3;
  $91 = ((($90)) + 56|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $4;
  $94 = (($92) + ($93)|0);
  $7 = $94;
  $95 = $9;
  $96 = $7;
  $97 = (($96) + ($95)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = $16;
  $101 = $100&255;
  $102 = ($99|0)!=($101|0);
  if (!($102)) {
   $103 = $9;
   $104 = (($103) - 1)|0;
   $105 = $7;
   $106 = (($105) + ($104)|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = $15;
   $110 = $109&255;
   $111 = ($108|0)!=($110|0);
   if (!($111)) {
    $112 = $7;
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $115 = $6;
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = ($114|0)!=($117|0);
    if (!($118)) {
     $119 = $7;
     $120 = ((($119)) + 1|0);
     $7 = $120;
     $121 = HEAP8[$120>>0]|0;
     $122 = $121&255;
     $123 = $6;
     $124 = ((($123)) + 1|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = $125&255;
     $127 = ($122|0)!=($126|0);
     if (!($127)) {
      $128 = $6;
      $129 = ((($128)) + 2|0);
      $6 = $129;
      $130 = $7;
      $131 = ((($130)) + 1|0);
      $7 = $131;
      while(1) {
       $132 = $6;
       $133 = ((($132)) + 1|0);
       $6 = $133;
       $134 = HEAP8[$133>>0]|0;
       $135 = $134&255;
       $136 = $7;
       $137 = ((($136)) + 1|0);
       $7 = $137;
       $138 = HEAP8[$137>>0]|0;
       $139 = $138&255;
       $140 = ($135|0)==($139|0);
       if (!($140)) {
        break;
       }
       $141 = $6;
       $142 = ((($141)) + 1|0);
       $6 = $142;
       $143 = HEAP8[$142>>0]|0;
       $144 = $143&255;
       $145 = $7;
       $146 = ((($145)) + 1|0);
       $7 = $146;
       $147 = HEAP8[$146>>0]|0;
       $148 = $147&255;
       $149 = ($144|0)==($148|0);
       if (!($149)) {
        break;
       }
       $150 = $6;
       $151 = ((($150)) + 1|0);
       $6 = $151;
       $152 = HEAP8[$151>>0]|0;
       $153 = $152&255;
       $154 = $7;
       $155 = ((($154)) + 1|0);
       $7 = $155;
       $156 = HEAP8[$155>>0]|0;
       $157 = $156&255;
       $158 = ($153|0)==($157|0);
       if (!($158)) {
        break;
       }
       $159 = $6;
       $160 = ((($159)) + 1|0);
       $6 = $160;
       $161 = HEAP8[$160>>0]|0;
       $162 = $161&255;
       $163 = $7;
       $164 = ((($163)) + 1|0);
       $7 = $164;
       $165 = HEAP8[$164>>0]|0;
       $166 = $165&255;
       $167 = ($162|0)==($166|0);
       if (!($167)) {
        break;
       }
       $168 = $6;
       $169 = ((($168)) + 1|0);
       $6 = $169;
       $170 = HEAP8[$169>>0]|0;
       $171 = $170&255;
       $172 = $7;
       $173 = ((($172)) + 1|0);
       $7 = $173;
       $174 = HEAP8[$173>>0]|0;
       $175 = $174&255;
       $176 = ($171|0)==($175|0);
       if (!($176)) {
        break;
       }
       $177 = $6;
       $178 = ((($177)) + 1|0);
       $6 = $178;
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = $7;
       $182 = ((($181)) + 1|0);
       $7 = $182;
       $183 = HEAP8[$182>>0]|0;
       $184 = $183&255;
       $185 = ($180|0)==($184|0);
       if (!($185)) {
        break;
       }
       $186 = $6;
       $187 = ((($186)) + 1|0);
       $6 = $187;
       $188 = HEAP8[$187>>0]|0;
       $189 = $188&255;
       $190 = $7;
       $191 = ((($190)) + 1|0);
       $7 = $191;
       $192 = HEAP8[$191>>0]|0;
       $193 = $192&255;
       $194 = ($189|0)==($193|0);
       if (!($194)) {
        break;
       }
       $195 = $6;
       $196 = ((($195)) + 1|0);
       $6 = $196;
       $197 = HEAP8[$196>>0]|0;
       $198 = $197&255;
       $199 = $7;
       $200 = ((($199)) + 1|0);
       $7 = $200;
       $201 = HEAP8[$200>>0]|0;
       $202 = $201&255;
       $203 = ($198|0)==($202|0);
       if (!($203)) {
        break;
       }
       $204 = $6;
       $205 = $14;
       $206 = ($204>>>0)<($205>>>0);
       if (!($206)) {
        break;
       }
      }
      $207 = $14;
      $208 = $6;
      $209 = $207;
      $210 = $208;
      $211 = (($209) - ($210))|0;
      $212 = (258 - ($211))|0;
      $8 = $212;
      $213 = $14;
      $214 = ((($213)) + -258|0);
      $6 = $214;
      $215 = $8;
      $216 = $9;
      $217 = ($215|0)>($216|0);
      if ($217) {
       $218 = $4;
       $219 = $3;
       $220 = ((($219)) + 112|0);
       HEAP32[$220>>2] = $218;
       $221 = $8;
       $9 = $221;
       $222 = $8;
       $223 = $10;
       $224 = ($222|0)>=($223|0);
       if ($224) {
        break;
       }
       $225 = $9;
       $226 = (($225) - 1)|0;
       $227 = $6;
       $228 = (($227) + ($226)|0);
       $229 = HEAP8[$228>>0]|0;
       $15 = $229;
       $230 = $9;
       $231 = $6;
       $232 = (($231) + ($230)|0);
       $233 = HEAP8[$232>>0]|0;
       $16 = $233;
      }
     }
    }
   }
  }
  $234 = $4;
  $235 = $13;
  $236 = $234 & $235;
  $237 = $12;
  $238 = (($237) + ($236<<1)|0);
  $239 = HEAP16[$238>>1]|0;
  $240 = $239&65535;
  $4 = $240;
  $241 = $11;
  $242 = ($240>>>0)>($241>>>0);
  if (!($242)) {
   break;
  }
  $243 = $5;
  $244 = (($243) + -1)|0;
  $5 = $244;
  $245 = ($244|0)!=(0);
  if (!($245)) {
   break;
  }
 }
 $246 = $9;
 $247 = $3;
 $248 = ((($247)) + 116|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = ($246>>>0)<=($249>>>0);
 if ($250) {
  $251 = $9;
  $2 = $251;
  $255 = $2;
  STACKTOP = sp;return ($255|0);
 } else {
  $252 = $3;
  $253 = ((($252)) + 116|0);
  $254 = HEAP32[$253>>2]|0;
  $2 = $254;
  $255 = $2;
  STACKTOP = sp;return ($255|0);
 }
 return (0)|0;
}
function __tr_flush_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = 0;
 $15 = $4;
 $16 = ((($15)) + 132|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = $4;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(2);
  if ($23) {
   $24 = $4;
   $25 = (_detect_data_type($24)|0);
   $26 = $4;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 44|0);
   HEAP32[$28>>2] = $25;
  }
  $29 = $4;
  $30 = $4;
  $31 = ((($30)) + 2840|0);
  _build_tree($29,$31);
  $32 = $4;
  $33 = $4;
  $34 = ((($33)) + 2852|0);
  _build_tree($32,$34);
  $35 = $4;
  $36 = (_build_bl_tree($35)|0);
  $10 = $36;
  $37 = $4;
  $38 = ((($37)) + 5800|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 3)|0;
  $41 = (($40) + 7)|0;
  $42 = $41 >>> 3;
  $8 = $42;
  $43 = $4;
  $44 = ((($43)) + 5804|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 3)|0;
  $47 = (($46) + 7)|0;
  $48 = $47 >>> 3;
  $9 = $48;
  $49 = $9;
  $50 = $8;
  $51 = ($49>>>0)<=($50>>>0);
  if ($51) {
   $52 = $9;
   $8 = $52;
  }
 } else {
  $53 = $6;
  $54 = (($53) + 5)|0;
  $9 = $54;
  $8 = $54;
 }
 $55 = $6;
 $56 = (($55) + 4)|0;
 $57 = $8;
 $58 = ($56>>>0)<=($57>>>0);
 $59 = $5;
 $60 = ($59|0)!=(0|0);
 $or$cond = $58 & $60;
 $61 = $4;
 do {
  if ($or$cond) {
   $62 = $5;
   $63 = $6;
   $64 = $7;
   __tr_stored_block($61,$62,$63,$64);
  } else {
   $65 = ((($61)) + 136|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(4);
   if (!($67)) {
    $68 = $9;
    $69 = $8;
    $70 = ($68|0)==($69|0);
    if (!($70)) {
     $13 = 3;
     $155 = $4;
     $156 = ((($155)) + 5820|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $13;
     $159 = (16 - ($158))|0;
     $160 = ($157|0)>($159|0);
     $161 = $7;
     $162 = (4 + ($161))|0;
     if ($160) {
      $14 = $162;
      $163 = $14;
      $164 = $163&65535;
      $165 = $164&65535;
      $166 = $4;
      $167 = ((($166)) + 5820|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = $165 << $168;
      $170 = $4;
      $171 = ((($170)) + 5816|0);
      $172 = HEAP16[$171>>1]|0;
      $173 = $172&65535;
      $174 = $173 | $169;
      $175 = $174&65535;
      HEAP16[$171>>1] = $175;
      $176 = $4;
      $177 = ((($176)) + 5816|0);
      $178 = HEAP16[$177>>1]|0;
      $179 = $178&65535;
      $180 = $179 & 255;
      $181 = $180&255;
      $182 = $4;
      $183 = ((($182)) + 20|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = (($184) + 1)|0;
      HEAP32[$183>>2] = $185;
      $186 = $4;
      $187 = ((($186)) + 8|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = (($188) + ($184)|0);
      HEAP8[$189>>0] = $181;
      $190 = $4;
      $191 = ((($190)) + 5816|0);
      $192 = HEAP16[$191>>1]|0;
      $193 = $192&65535;
      $194 = $193 >> 8;
      $195 = $194&255;
      $196 = $4;
      $197 = ((($196)) + 20|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = (($198) + 1)|0;
      HEAP32[$197>>2] = $199;
      $200 = $4;
      $201 = ((($200)) + 8|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = (($202) + ($198)|0);
      HEAP8[$203>>0] = $195;
      $204 = $14;
      $205 = $204&65535;
      $206 = $205&65535;
      $207 = $4;
      $208 = ((($207)) + 5820|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = (16 - ($209))|0;
      $211 = $206 >> $210;
      $212 = $211&65535;
      $213 = $4;
      $214 = ((($213)) + 5816|0);
      HEAP16[$214>>1] = $212;
      $215 = $13;
      $216 = (($215) - 16)|0;
      $217 = $4;
      $218 = ((($217)) + 5820|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = (($219) + ($216))|0;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $162&65535;
      $222 = $221&65535;
      $223 = $4;
      $224 = ((($223)) + 5820|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = $222 << $225;
      $227 = $4;
      $228 = ((($227)) + 5816|0);
      $229 = HEAP16[$228>>1]|0;
      $230 = $229&65535;
      $231 = $230 | $226;
      $232 = $231&65535;
      HEAP16[$228>>1] = $232;
      $233 = $13;
      $234 = $4;
      $235 = ((($234)) + 5820|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = (($236) + ($233))|0;
      HEAP32[$235>>2] = $237;
     }
     $238 = $4;
     $239 = $4;
     $240 = ((($239)) + 2840|0);
     $241 = ((($240)) + 4|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = (($242) + 1)|0;
     $244 = $4;
     $245 = ((($244)) + 2852|0);
     $246 = ((($245)) + 4|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (($247) + 1)|0;
     $249 = $10;
     $250 = (($249) + 1)|0;
     _send_all_trees($238,$243,$248,$250);
     $251 = $4;
     $252 = $4;
     $253 = ((($252)) + 148|0);
     $254 = $4;
     $255 = ((($254)) + 2440|0);
     _compress_block($251,$253,$255);
     break;
    }
   }
   $11 = 3;
   $71 = $4;
   $72 = ((($71)) + 5820|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $11;
   $75 = (16 - ($74))|0;
   $76 = ($73|0)>($75|0);
   $77 = $7;
   $78 = (2 + ($77))|0;
   if ($76) {
    $12 = $78;
    $79 = $12;
    $80 = $79&65535;
    $81 = $80&65535;
    $82 = $4;
    $83 = ((($82)) + 5820|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $81 << $84;
    $86 = $4;
    $87 = ((($86)) + 5816|0);
    $88 = HEAP16[$87>>1]|0;
    $89 = $88&65535;
    $90 = $89 | $85;
    $91 = $90&65535;
    HEAP16[$87>>1] = $91;
    $92 = $4;
    $93 = ((($92)) + 5816|0);
    $94 = HEAP16[$93>>1]|0;
    $95 = $94&65535;
    $96 = $95 & 255;
    $97 = $96&255;
    $98 = $4;
    $99 = ((($98)) + 20|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + 1)|0;
    HEAP32[$99>>2] = $101;
    $102 = $4;
    $103 = ((($102)) + 8|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + ($100)|0);
    HEAP8[$105>>0] = $97;
    $106 = $4;
    $107 = ((($106)) + 5816|0);
    $108 = HEAP16[$107>>1]|0;
    $109 = $108&65535;
    $110 = $109 >> 8;
    $111 = $110&255;
    $112 = $4;
    $113 = ((($112)) + 20|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + 1)|0;
    HEAP32[$113>>2] = $115;
    $116 = $4;
    $117 = ((($116)) + 8|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + ($114)|0);
    HEAP8[$119>>0] = $111;
    $120 = $12;
    $121 = $120&65535;
    $122 = $121&65535;
    $123 = $4;
    $124 = ((($123)) + 5820|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (16 - ($125))|0;
    $127 = $122 >> $126;
    $128 = $127&65535;
    $129 = $4;
    $130 = ((($129)) + 5816|0);
    HEAP16[$130>>1] = $128;
    $131 = $11;
    $132 = (($131) - 16)|0;
    $133 = $4;
    $134 = ((($133)) + 5820|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132))|0;
    HEAP32[$134>>2] = $136;
   } else {
    $137 = $78&65535;
    $138 = $137&65535;
    $139 = $4;
    $140 = ((($139)) + 5820|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $138 << $141;
    $143 = $4;
    $144 = ((($143)) + 5816|0);
    $145 = HEAP16[$144>>1]|0;
    $146 = $145&65535;
    $147 = $146 | $142;
    $148 = $147&65535;
    HEAP16[$144>>1] = $148;
    $149 = $11;
    $150 = $4;
    $151 = ((($150)) + 5820|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + ($149))|0;
    HEAP32[$151>>2] = $153;
   }
   $154 = $4;
   _compress_block($154,9320,10472);
  }
 } while(0);
 $256 = $4;
 _init_block($256);
 $257 = $7;
 $258 = ($257|0)!=(0);
 if (!($258)) {
  STACKTOP = sp;return;
 }
 $259 = $4;
 _bi_windup($259);
 STACKTOP = sp;return;
}
function _detect_data_type($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = -201342849;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = ($5|0)<=(31);
  if (!($6)) {
   break;
  }
  $7 = $3;
  $8 = $7 & 1;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $4;
   $11 = $2;
   $12 = ((($11)) + 148|0);
   $13 = (($12) + ($10<<2)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   $16 = ($15|0)!=(0);
   if ($16) {
    label = 5;
    break;
   }
  }
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
  $19 = $3;
  $20 = $19 >>> 1;
  $3 = $20;
 }
 if ((label|0) == 5) {
  $1 = 0;
  $50 = $1;
  STACKTOP = sp;return ($50|0);
 }
 $21 = $2;
 $22 = ((($21)) + 148|0);
 $23 = ((($22)) + 36|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = $2;
  $28 = ((($27)) + 148|0);
  $29 = ((($28)) + 40|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   $33 = $2;
   $34 = ((($33)) + 148|0);
   $35 = ((($34)) + 52|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = ($37|0)!=(0);
   if (!($38)) {
    $4 = 32;
    while(1) {
     $39 = $4;
     $40 = ($39|0)<(256);
     if (!($40)) {
      label = 16;
      break;
     }
     $41 = $4;
     $42 = $2;
     $43 = ((($42)) + 148|0);
     $44 = (($43) + ($41<<2)|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     $47 = ($46|0)!=(0);
     if ($47) {
      label = 14;
      break;
     }
     $48 = $4;
     $49 = (($48) + 1)|0;
     $4 = $49;
    }
    if ((label|0) == 14) {
     $1 = 1;
     $50 = $1;
     STACKTOP = sp;return ($50|0);
    }
    else if ((label|0) == 16) {
     $1 = 0;
     $50 = $1;
     STACKTOP = sp;return ($50|0);
    }
   }
  }
 }
 $1 = 1;
 $50 = $1;
 STACKTOP = sp;return ($50|0);
}
function _build_tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $4 = $12;
 $13 = $3;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $5 = $16;
 $17 = $3;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $6 = $21;
 $9 = -1;
 $22 = $2;
 $23 = ((($22)) + 5200|0);
 HEAP32[$23>>2] = 0;
 $24 = $2;
 $25 = ((($24)) + 5204|0);
 HEAP32[$25>>2] = 573;
 $7 = 0;
 while(1) {
  $26 = $7;
  $27 = $6;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $7;
  $30 = $4;
  $31 = (($30) + ($29<<2)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = ($33|0)!=(0);
  $35 = $7;
  if ($34) {
   $9 = $35;
   $36 = $2;
   $37 = ((($36)) + 5200|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$37>>2] = $39;
   $40 = $2;
   $41 = ((($40)) + 2908|0);
   $42 = (($41) + ($39<<2)|0);
   HEAP32[$42>>2] = $35;
   $43 = $7;
   $44 = $2;
   $45 = ((($44)) + 5208|0);
   $46 = (($45) + ($43)|0);
   HEAP8[$46>>0] = 0;
  } else {
   $47 = $4;
   $48 = (($47) + ($35<<2)|0);
   $49 = ((($48)) + 2|0);
   HEAP16[$49>>1] = 0;
  }
  $50 = $7;
  $51 = (($50) + 1)|0;
  $7 = $51;
 }
 while(1) {
  $52 = $2;
  $53 = ((($52)) + 5200|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)<(2);
  $56 = $9;
  if (!($55)) {
   break;
  }
  $57 = ($56|0)<(2);
  if ($57) {
   $58 = $9;
   $59 = (($58) + 1)|0;
   $9 = $59;
   $67 = $59;
  } else {
   $67 = 0;
  }
  $60 = $2;
  $61 = ((($60)) + 5200|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$61>>2] = $63;
  $64 = $2;
  $65 = ((($64)) + 2908|0);
  $66 = (($65) + ($63<<2)|0);
  HEAP32[$66>>2] = $67;
  $10 = $67;
  $68 = $10;
  $69 = $4;
  $70 = (($69) + ($68<<2)|0);
  HEAP16[$70>>1] = 1;
  $71 = $10;
  $72 = $2;
  $73 = ((($72)) + 5208|0);
  $74 = (($73) + ($71)|0);
  HEAP8[$74>>0] = 0;
  $75 = $2;
  $76 = ((($75)) + 5800|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + -1)|0;
  HEAP32[$76>>2] = $78;
  $79 = $5;
  $80 = ($79|0)!=(0|0);
  if (!($80)) {
   continue;
  }
  $81 = $10;
  $82 = $5;
  $83 = (($82) + ($81<<2)|0);
  $84 = ((($83)) + 2|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = $85&65535;
  $87 = $2;
  $88 = ((($87)) + 5804|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) - ($86))|0;
  HEAP32[$88>>2] = $90;
 }
 $91 = $3;
 $92 = ((($91)) + 4|0);
 HEAP32[$92>>2] = $56;
 $93 = $2;
 $94 = ((($93)) + 5200|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95|0) / 2)&-1;
 $7 = $96;
 while(1) {
  $97 = $7;
  $98 = ($97|0)>=(1);
  if (!($98)) {
   break;
  }
  $99 = $2;
  $100 = $4;
  $101 = $7;
  _pqdownheap($99,$100,$101);
  $102 = $7;
  $103 = (($102) + -1)|0;
  $7 = $103;
 }
 $104 = $6;
 $10 = $104;
 while(1) {
  $105 = $2;
  $106 = ((($105)) + 2908|0);
  $107 = ((($106)) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $7 = $108;
  $109 = $2;
  $110 = ((($109)) + 5200|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + -1)|0;
  HEAP32[$110>>2] = $112;
  $113 = $2;
  $114 = ((($113)) + 2908|0);
  $115 = (($114) + ($111<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $2;
  $118 = ((($117)) + 2908|0);
  $119 = ((($118)) + 4|0);
  HEAP32[$119>>2] = $116;
  $120 = $2;
  $121 = $4;
  _pqdownheap($120,$121,1);
  $122 = $2;
  $123 = ((($122)) + 2908|0);
  $124 = ((($123)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $8 = $125;
  $126 = $7;
  $127 = $2;
  $128 = ((($127)) + 5204|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + -1)|0;
  HEAP32[$128>>2] = $130;
  $131 = $2;
  $132 = ((($131)) + 2908|0);
  $133 = (($132) + ($130<<2)|0);
  HEAP32[$133>>2] = $126;
  $134 = $8;
  $135 = $2;
  $136 = ((($135)) + 5204|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + -1)|0;
  HEAP32[$136>>2] = $138;
  $139 = $2;
  $140 = ((($139)) + 2908|0);
  $141 = (($140) + ($138<<2)|0);
  HEAP32[$141>>2] = $134;
  $142 = $7;
  $143 = $4;
  $144 = (($143) + ($142<<2)|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $145&65535;
  $147 = $8;
  $148 = $4;
  $149 = (($148) + ($147<<2)|0);
  $150 = HEAP16[$149>>1]|0;
  $151 = $150&65535;
  $152 = (($146) + ($151))|0;
  $153 = $152&65535;
  $154 = $10;
  $155 = $4;
  $156 = (($155) + ($154<<2)|0);
  HEAP16[$156>>1] = $153;
  $157 = $7;
  $158 = $2;
  $159 = ((($158)) + 5208|0);
  $160 = (($159) + ($157)|0);
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = $8;
  $164 = $2;
  $165 = ((($164)) + 5208|0);
  $166 = (($165) + ($163)|0);
  $167 = HEAP8[$166>>0]|0;
  $168 = $167&255;
  $169 = ($162|0)>=($168|0);
  if ($169) {
   $170 = $7;
   $171 = $2;
   $172 = ((($171)) + 5208|0);
   $173 = (($172) + ($170)|0);
   $174 = HEAP8[$173>>0]|0;
   $$sink = $174;
  } else {
   $175 = $8;
   $176 = $2;
   $177 = ((($176)) + 5208|0);
   $178 = (($177) + ($175)|0);
   $179 = HEAP8[$178>>0]|0;
   $$sink = $179;
  }
  $180 = $$sink&255;
  $181 = (($180) + 1)|0;
  $182 = $181&255;
  $183 = $10;
  $184 = $2;
  $185 = ((($184)) + 5208|0);
  $186 = (($185) + ($183)|0);
  HEAP8[$186>>0] = $182;
  $187 = $10;
  $188 = $187&65535;
  $189 = $8;
  $190 = $4;
  $191 = (($190) + ($189<<2)|0);
  $192 = ((($191)) + 2|0);
  HEAP16[$192>>1] = $188;
  $193 = $7;
  $194 = $4;
  $195 = (($194) + ($193<<2)|0);
  $196 = ((($195)) + 2|0);
  HEAP16[$196>>1] = $188;
  $197 = $10;
  $198 = (($197) + 1)|0;
  $10 = $198;
  $199 = $2;
  $200 = ((($199)) + 2908|0);
  $201 = ((($200)) + 4|0);
  HEAP32[$201>>2] = $197;
  $202 = $2;
  $203 = $4;
  _pqdownheap($202,$203,1);
  $204 = $2;
  $205 = ((($204)) + 5200|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ($206|0)>=(2);
  if (!($207)) {
   break;
  }
 }
 $208 = $2;
 $209 = ((($208)) + 2908|0);
 $210 = ((($209)) + 4|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = $2;
 $213 = ((($212)) + 5204|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = (($214) + -1)|0;
 HEAP32[$213>>2] = $215;
 $216 = $2;
 $217 = ((($216)) + 2908|0);
 $218 = (($217) + ($215<<2)|0);
 HEAP32[$218>>2] = $211;
 $219 = $2;
 $220 = $3;
 _gen_bitlen($219,$220);
 $221 = $4;
 $222 = $9;
 $223 = $2;
 $224 = ((($223)) + 2876|0);
 _gen_codes($221,$222,$224);
 STACKTOP = sp;return;
}
function _build_bl_tree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $1;
 $5 = ((($4)) + 148|0);
 $6 = $1;
 $7 = ((($6)) + 2840|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 _scan_tree($3,$5,$9);
 $10 = $1;
 $11 = $1;
 $12 = ((($11)) + 2440|0);
 $13 = $1;
 $14 = ((($13)) + 2852|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _scan_tree($10,$12,$16);
 $17 = $1;
 $18 = $1;
 $19 = ((($18)) + 2864|0);
 _build_tree($17,$19);
 $2 = 18;
 while(1) {
  $20 = $2;
  $21 = ($20|0)>=(3);
  if (!($21)) {
   break;
  }
  $22 = $2;
  $23 = (14818 + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $1;
  $27 = ((($26)) + 2684|0);
  $28 = (($27) + ($25<<2)|0);
  $29 = ((($28)) + 2|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = ($31|0)!=(0);
  if ($32) {
   break;
  }
  $33 = $2;
  $34 = (($33) + -1)|0;
  $2 = $34;
 }
 $35 = $2;
 $36 = (($35) + 1)|0;
 $37 = ($36*3)|0;
 $38 = (($37) + 5)|0;
 $39 = (($38) + 5)|0;
 $40 = (($39) + 4)|0;
 $41 = $1;
 $42 = ((($41)) + 5800|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + ($40))|0;
 HEAP32[$42>>2] = $44;
 $45 = $2;
 STACKTOP = sp;return ($45|0);
}
function _compress_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 $23 = $3;
 $24 = ((($23)) + 5792|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0);
 if ($26) {
  while(1) {
   $27 = $8;
   $28 = $3;
   $29 = ((($28)) + 5796|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($27<<1)|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   $6 = $33;
   $34 = $8;
   $35 = (($34) + 1)|0;
   $8 = $35;
   $36 = $3;
   $37 = ((($36)) + 5784|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($34)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $7 = $41;
   $42 = $6;
   $43 = ($42|0)==(0);
   $44 = $7;
   do {
    if ($43) {
     $45 = $4;
     $46 = (($45) + ($44<<2)|0);
     $47 = ((($46)) + 2|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $11 = $49;
     $50 = $3;
     $51 = ((($50)) + 5820|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $11;
     $54 = (16 - ($53))|0;
     $55 = ($52|0)>($54|0);
     $56 = $7;
     $57 = $4;
     $58 = (($57) + ($56<<2)|0);
     $59 = HEAP16[$58>>1]|0;
     $60 = $59&65535;
     if ($55) {
      $12 = $60;
      $61 = $12;
      $62 = $61&65535;
      $63 = $62&65535;
      $64 = $3;
      $65 = ((($64)) + 5820|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = $63 << $66;
      $68 = $3;
      $69 = ((($68)) + 5816|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = $71 | $67;
      $73 = $72&65535;
      HEAP16[$69>>1] = $73;
      $74 = $3;
      $75 = ((($74)) + 5816|0);
      $76 = HEAP16[$75>>1]|0;
      $77 = $76&65535;
      $78 = $77 & 255;
      $79 = $78&255;
      $80 = $3;
      $81 = ((($80)) + 20|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + 1)|0;
      HEAP32[$81>>2] = $83;
      $84 = $3;
      $85 = ((($84)) + 8|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (($86) + ($82)|0);
      HEAP8[$87>>0] = $79;
      $88 = $3;
      $89 = ((($88)) + 5816|0);
      $90 = HEAP16[$89>>1]|0;
      $91 = $90&65535;
      $92 = $91 >> 8;
      $93 = $92&255;
      $94 = $3;
      $95 = ((($94)) + 20|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($96) + 1)|0;
      HEAP32[$95>>2] = $97;
      $98 = $3;
      $99 = ((($98)) + 8|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = (($100) + ($96)|0);
      HEAP8[$101>>0] = $93;
      $102 = $12;
      $103 = $102&65535;
      $104 = $103&65535;
      $105 = $3;
      $106 = ((($105)) + 5820|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (16 - ($107))|0;
      $109 = $104 >> $108;
      $110 = $109&65535;
      $111 = $3;
      $112 = ((($111)) + 5816|0);
      HEAP16[$112>>1] = $110;
      $113 = $11;
      $114 = (($113) - 16)|0;
      $115 = $3;
      $116 = ((($115)) + 5820|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($117) + ($114))|0;
      HEAP32[$116>>2] = $118;
      break;
     } else {
      $119 = $3;
      $120 = ((($119)) + 5820|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $60 << $121;
      $123 = $3;
      $124 = ((($123)) + 5816|0);
      $125 = HEAP16[$124>>1]|0;
      $126 = $125&65535;
      $127 = $126 | $122;
      $128 = $127&65535;
      HEAP16[$124>>1] = $128;
      $129 = $11;
      $130 = $3;
      $131 = ((($130)) + 5820|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($132) + ($129))|0;
      HEAP32[$131>>2] = $133;
      break;
     }
    } else {
     $134 = (14446 + ($44)|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&255;
     $9 = $136;
     $137 = $9;
     $138 = (($137) + 256)|0;
     $139 = (($138) + 1)|0;
     $140 = $4;
     $141 = (($140) + ($139<<2)|0);
     $142 = ((($141)) + 2|0);
     $143 = HEAP16[$142>>1]|0;
     $144 = $143&65535;
     $13 = $144;
     $145 = $3;
     $146 = ((($145)) + 5820|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $13;
     $149 = (16 - ($148))|0;
     $150 = ($147|0)>($149|0);
     $151 = $9;
     $152 = (($151) + 256)|0;
     $153 = (($152) + 1)|0;
     $154 = $4;
     $155 = (($154) + ($153<<2)|0);
     $156 = HEAP16[$155>>1]|0;
     $157 = $156&65535;
     if ($150) {
      $14 = $157;
      $158 = $14;
      $159 = $158&65535;
      $160 = $159&65535;
      $161 = $3;
      $162 = ((($161)) + 5820|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = $160 << $163;
      $165 = $3;
      $166 = ((($165)) + 5816|0);
      $167 = HEAP16[$166>>1]|0;
      $168 = $167&65535;
      $169 = $168 | $164;
      $170 = $169&65535;
      HEAP16[$166>>1] = $170;
      $171 = $3;
      $172 = ((($171)) + 5816|0);
      $173 = HEAP16[$172>>1]|0;
      $174 = $173&65535;
      $175 = $174 & 255;
      $176 = $175&255;
      $177 = $3;
      $178 = ((($177)) + 20|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = (($179) + 1)|0;
      HEAP32[$178>>2] = $180;
      $181 = $3;
      $182 = ((($181)) + 8|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = (($183) + ($179)|0);
      HEAP8[$184>>0] = $176;
      $185 = $3;
      $186 = ((($185)) + 5816|0);
      $187 = HEAP16[$186>>1]|0;
      $188 = $187&65535;
      $189 = $188 >> 8;
      $190 = $189&255;
      $191 = $3;
      $192 = ((($191)) + 20|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193) + 1)|0;
      HEAP32[$192>>2] = $194;
      $195 = $3;
      $196 = ((($195)) + 8|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (($197) + ($193)|0);
      HEAP8[$198>>0] = $190;
      $199 = $14;
      $200 = $199&65535;
      $201 = $200&65535;
      $202 = $3;
      $203 = ((($202)) + 5820|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = (16 - ($204))|0;
      $206 = $201 >> $205;
      $207 = $206&65535;
      $208 = $3;
      $209 = ((($208)) + 5816|0);
      HEAP16[$209>>1] = $207;
      $210 = $13;
      $211 = (($210) - 16)|0;
      $212 = $3;
      $213 = ((($212)) + 5820|0);
      $214 = HEAP32[$213>>2]|0;
      $215 = (($214) + ($211))|0;
      HEAP32[$213>>2] = $215;
     } else {
      $216 = $3;
      $217 = ((($216)) + 5820|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $157 << $218;
      $220 = $3;
      $221 = ((($220)) + 5816|0);
      $222 = HEAP16[$221>>1]|0;
      $223 = $222&65535;
      $224 = $223 | $219;
      $225 = $224&65535;
      HEAP16[$221>>1] = $225;
      $226 = $13;
      $227 = $3;
      $228 = ((($227)) + 5820|0);
      $229 = HEAP32[$228>>2]|0;
      $230 = (($229) + ($226))|0;
      HEAP32[$228>>2] = $230;
     }
     $231 = $9;
     $232 = (172 + ($231<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $10 = $233;
     $234 = $10;
     $235 = ($234|0)!=(0);
     do {
      if ($235) {
       $236 = $9;
       $237 = (288 + ($236<<2)|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = $7;
       $240 = (($239) - ($238))|0;
       $7 = $240;
       $241 = $10;
       $15 = $241;
       $242 = $3;
       $243 = ((($242)) + 5820|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = $15;
       $246 = (16 - ($245))|0;
       $247 = ($244|0)>($246|0);
       $248 = $7;
       if ($247) {
        $16 = $248;
        $249 = $16;
        $250 = $249&65535;
        $251 = $250&65535;
        $252 = $3;
        $253 = ((($252)) + 5820|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = $251 << $254;
        $256 = $3;
        $257 = ((($256)) + 5816|0);
        $258 = HEAP16[$257>>1]|0;
        $259 = $258&65535;
        $260 = $259 | $255;
        $261 = $260&65535;
        HEAP16[$257>>1] = $261;
        $262 = $3;
        $263 = ((($262)) + 5816|0);
        $264 = HEAP16[$263>>1]|0;
        $265 = $264&65535;
        $266 = $265 & 255;
        $267 = $266&255;
        $268 = $3;
        $269 = ((($268)) + 20|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = (($270) + 1)|0;
        HEAP32[$269>>2] = $271;
        $272 = $3;
        $273 = ((($272)) + 8|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = (($274) + ($270)|0);
        HEAP8[$275>>0] = $267;
        $276 = $3;
        $277 = ((($276)) + 5816|0);
        $278 = HEAP16[$277>>1]|0;
        $279 = $278&65535;
        $280 = $279 >> 8;
        $281 = $280&255;
        $282 = $3;
        $283 = ((($282)) + 20|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = (($284) + 1)|0;
        HEAP32[$283>>2] = $285;
        $286 = $3;
        $287 = ((($286)) + 8|0);
        $288 = HEAP32[$287>>2]|0;
        $289 = (($288) + ($284)|0);
        HEAP8[$289>>0] = $281;
        $290 = $16;
        $291 = $290&65535;
        $292 = $291&65535;
        $293 = $3;
        $294 = ((($293)) + 5820|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = (16 - ($295))|0;
        $297 = $292 >> $296;
        $298 = $297&65535;
        $299 = $3;
        $300 = ((($299)) + 5816|0);
        HEAP16[$300>>1] = $298;
        $301 = $15;
        $302 = (($301) - 16)|0;
        $303 = $3;
        $304 = ((($303)) + 5820|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = (($305) + ($302))|0;
        HEAP32[$304>>2] = $306;
        break;
       } else {
        $307 = $248&65535;
        $308 = $307&65535;
        $309 = $3;
        $310 = ((($309)) + 5820|0);
        $311 = HEAP32[$310>>2]|0;
        $312 = $308 << $311;
        $313 = $3;
        $314 = ((($313)) + 5816|0);
        $315 = HEAP16[$314>>1]|0;
        $316 = $315&65535;
        $317 = $316 | $312;
        $318 = $317&65535;
        HEAP16[$314>>1] = $318;
        $319 = $15;
        $320 = $3;
        $321 = ((($320)) + 5820|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = (($322) + ($319))|0;
        HEAP32[$321>>2] = $323;
        break;
       }
      }
     } while(0);
     $324 = $6;
     $325 = (($324) + -1)|0;
     $6 = $325;
     $326 = $6;
     $327 = ($326>>>0)<(256);
     $328 = $6;
     if ($327) {
      $329 = (13934 + ($328)|0);
      $330 = HEAP8[$329>>0]|0;
      $$sink = $330;
     } else {
      $331 = $328 >>> 7;
      $332 = (256 + ($331))|0;
      $333 = (13934 + ($332)|0);
      $334 = HEAP8[$333>>0]|0;
      $$sink = $334;
     }
     $335 = $$sink&255;
     $9 = $335;
     $336 = $9;
     $337 = $5;
     $338 = (($337) + ($336<<2)|0);
     $339 = ((($338)) + 2|0);
     $340 = HEAP16[$339>>1]|0;
     $341 = $340&65535;
     $17 = $341;
     $342 = $3;
     $343 = ((($342)) + 5820|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = $17;
     $346 = (16 - ($345))|0;
     $347 = ($344|0)>($346|0);
     $348 = $9;
     $349 = $5;
     $350 = (($349) + ($348<<2)|0);
     $351 = HEAP16[$350>>1]|0;
     $352 = $351&65535;
     if ($347) {
      $18 = $352;
      $353 = $18;
      $354 = $353&65535;
      $355 = $354&65535;
      $356 = $3;
      $357 = ((($356)) + 5820|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = $355 << $358;
      $360 = $3;
      $361 = ((($360)) + 5816|0);
      $362 = HEAP16[$361>>1]|0;
      $363 = $362&65535;
      $364 = $363 | $359;
      $365 = $364&65535;
      HEAP16[$361>>1] = $365;
      $366 = $3;
      $367 = ((($366)) + 5816|0);
      $368 = HEAP16[$367>>1]|0;
      $369 = $368&65535;
      $370 = $369 & 255;
      $371 = $370&255;
      $372 = $3;
      $373 = ((($372)) + 20|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = (($374) + 1)|0;
      HEAP32[$373>>2] = $375;
      $376 = $3;
      $377 = ((($376)) + 8|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = (($378) + ($374)|0);
      HEAP8[$379>>0] = $371;
      $380 = $3;
      $381 = ((($380)) + 5816|0);
      $382 = HEAP16[$381>>1]|0;
      $383 = $382&65535;
      $384 = $383 >> 8;
      $385 = $384&255;
      $386 = $3;
      $387 = ((($386)) + 20|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = (($388) + 1)|0;
      HEAP32[$387>>2] = $389;
      $390 = $3;
      $391 = ((($390)) + 8|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = (($392) + ($388)|0);
      HEAP8[$393>>0] = $385;
      $394 = $18;
      $395 = $394&65535;
      $396 = $395&65535;
      $397 = $3;
      $398 = ((($397)) + 5820|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = (16 - ($399))|0;
      $401 = $396 >> $400;
      $402 = $401&65535;
      $403 = $3;
      $404 = ((($403)) + 5816|0);
      HEAP16[$404>>1] = $402;
      $405 = $17;
      $406 = (($405) - 16)|0;
      $407 = $3;
      $408 = ((($407)) + 5820|0);
      $409 = HEAP32[$408>>2]|0;
      $410 = (($409) + ($406))|0;
      HEAP32[$408>>2] = $410;
     } else {
      $411 = $3;
      $412 = ((($411)) + 5820|0);
      $413 = HEAP32[$412>>2]|0;
      $414 = $352 << $413;
      $415 = $3;
      $416 = ((($415)) + 5816|0);
      $417 = HEAP16[$416>>1]|0;
      $418 = $417&65535;
      $419 = $418 | $414;
      $420 = $419&65535;
      HEAP16[$416>>1] = $420;
      $421 = $17;
      $422 = $3;
      $423 = ((($422)) + 5820|0);
      $424 = HEAP32[$423>>2]|0;
      $425 = (($424) + ($421))|0;
      HEAP32[$423>>2] = $425;
     }
     $426 = $9;
     $427 = (404 + ($426<<2)|0);
     $428 = HEAP32[$427>>2]|0;
     $10 = $428;
     $429 = $10;
     $430 = ($429|0)!=(0);
     if ($430) {
      $431 = $9;
      $432 = (524 + ($431<<2)|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = $6;
      $435 = (($434) - ($433))|0;
      $6 = $435;
      $436 = $10;
      $19 = $436;
      $437 = $3;
      $438 = ((($437)) + 5820|0);
      $439 = HEAP32[$438>>2]|0;
      $440 = $19;
      $441 = (16 - ($440))|0;
      $442 = ($439|0)>($441|0);
      $443 = $6;
      if ($442) {
       $20 = $443;
       $444 = $20;
       $445 = $444&65535;
       $446 = $445&65535;
       $447 = $3;
       $448 = ((($447)) + 5820|0);
       $449 = HEAP32[$448>>2]|0;
       $450 = $446 << $449;
       $451 = $3;
       $452 = ((($451)) + 5816|0);
       $453 = HEAP16[$452>>1]|0;
       $454 = $453&65535;
       $455 = $454 | $450;
       $456 = $455&65535;
       HEAP16[$452>>1] = $456;
       $457 = $3;
       $458 = ((($457)) + 5816|0);
       $459 = HEAP16[$458>>1]|0;
       $460 = $459&65535;
       $461 = $460 & 255;
       $462 = $461&255;
       $463 = $3;
       $464 = ((($463)) + 20|0);
       $465 = HEAP32[$464>>2]|0;
       $466 = (($465) + 1)|0;
       HEAP32[$464>>2] = $466;
       $467 = $3;
       $468 = ((($467)) + 8|0);
       $469 = HEAP32[$468>>2]|0;
       $470 = (($469) + ($465)|0);
       HEAP8[$470>>0] = $462;
       $471 = $3;
       $472 = ((($471)) + 5816|0);
       $473 = HEAP16[$472>>1]|0;
       $474 = $473&65535;
       $475 = $474 >> 8;
       $476 = $475&255;
       $477 = $3;
       $478 = ((($477)) + 20|0);
       $479 = HEAP32[$478>>2]|0;
       $480 = (($479) + 1)|0;
       HEAP32[$478>>2] = $480;
       $481 = $3;
       $482 = ((($481)) + 8|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = (($483) + ($479)|0);
       HEAP8[$484>>0] = $476;
       $485 = $20;
       $486 = $485&65535;
       $487 = $486&65535;
       $488 = $3;
       $489 = ((($488)) + 5820|0);
       $490 = HEAP32[$489>>2]|0;
       $491 = (16 - ($490))|0;
       $492 = $487 >> $491;
       $493 = $492&65535;
       $494 = $3;
       $495 = ((($494)) + 5816|0);
       HEAP16[$495>>1] = $493;
       $496 = $19;
       $497 = (($496) - 16)|0;
       $498 = $3;
       $499 = ((($498)) + 5820|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = (($500) + ($497))|0;
       HEAP32[$499>>2] = $501;
       break;
      } else {
       $502 = $443&65535;
       $503 = $502&65535;
       $504 = $3;
       $505 = ((($504)) + 5820|0);
       $506 = HEAP32[$505>>2]|0;
       $507 = $503 << $506;
       $508 = $3;
       $509 = ((($508)) + 5816|0);
       $510 = HEAP16[$509>>1]|0;
       $511 = $510&65535;
       $512 = $511 | $507;
       $513 = $512&65535;
       HEAP16[$509>>1] = $513;
       $514 = $19;
       $515 = $3;
       $516 = ((($515)) + 5820|0);
       $517 = HEAP32[$516>>2]|0;
       $518 = (($517) + ($514))|0;
       HEAP32[$516>>2] = $518;
       break;
      }
     }
    }
   } while(0);
   $519 = $8;
   $520 = $3;
   $521 = ((($520)) + 5792|0);
   $522 = HEAP32[$521>>2]|0;
   $523 = ($519>>>0)<($522>>>0);
   if (!($523)) {
    break;
   }
  }
 }
 $524 = $4;
 $525 = ((($524)) + 1024|0);
 $526 = ((($525)) + 2|0);
 $527 = HEAP16[$526>>1]|0;
 $528 = $527&65535;
 $21 = $528;
 $529 = $3;
 $530 = ((($529)) + 5820|0);
 $531 = HEAP32[$530>>2]|0;
 $532 = $21;
 $533 = (16 - ($532))|0;
 $534 = ($531|0)>($533|0);
 $535 = $4;
 $536 = ((($535)) + 1024|0);
 $537 = HEAP16[$536>>1]|0;
 $538 = $537&65535;
 if ($534) {
  $22 = $538;
  $539 = $22;
  $540 = $539&65535;
  $541 = $540&65535;
  $542 = $3;
  $543 = ((($542)) + 5820|0);
  $544 = HEAP32[$543>>2]|0;
  $545 = $541 << $544;
  $546 = $3;
  $547 = ((($546)) + 5816|0);
  $548 = HEAP16[$547>>1]|0;
  $549 = $548&65535;
  $550 = $549 | $545;
  $551 = $550&65535;
  HEAP16[$547>>1] = $551;
  $552 = $3;
  $553 = ((($552)) + 5816|0);
  $554 = HEAP16[$553>>1]|0;
  $555 = $554&65535;
  $556 = $555 & 255;
  $557 = $556&255;
  $558 = $3;
  $559 = ((($558)) + 20|0);
  $560 = HEAP32[$559>>2]|0;
  $561 = (($560) + 1)|0;
  HEAP32[$559>>2] = $561;
  $562 = $3;
  $563 = ((($562)) + 8|0);
  $564 = HEAP32[$563>>2]|0;
  $565 = (($564) + ($560)|0);
  HEAP8[$565>>0] = $557;
  $566 = $3;
  $567 = ((($566)) + 5816|0);
  $568 = HEAP16[$567>>1]|0;
  $569 = $568&65535;
  $570 = $569 >> 8;
  $571 = $570&255;
  $572 = $3;
  $573 = ((($572)) + 20|0);
  $574 = HEAP32[$573>>2]|0;
  $575 = (($574) + 1)|0;
  HEAP32[$573>>2] = $575;
  $576 = $3;
  $577 = ((($576)) + 8|0);
  $578 = HEAP32[$577>>2]|0;
  $579 = (($578) + ($574)|0);
  HEAP8[$579>>0] = $571;
  $580 = $22;
  $581 = $580&65535;
  $582 = $581&65535;
  $583 = $3;
  $584 = ((($583)) + 5820|0);
  $585 = HEAP32[$584>>2]|0;
  $586 = (16 - ($585))|0;
  $587 = $582 >> $586;
  $588 = $587&65535;
  $589 = $3;
  $590 = ((($589)) + 5816|0);
  HEAP16[$590>>1] = $588;
  $591 = $21;
  $592 = (($591) - 16)|0;
  $593 = $3;
  $594 = ((($593)) + 5820|0);
  $595 = HEAP32[$594>>2]|0;
  $596 = (($595) + ($592))|0;
  HEAP32[$594>>2] = $596;
  STACKTOP = sp;return;
 } else {
  $597 = $3;
  $598 = ((($597)) + 5820|0);
  $599 = HEAP32[$598>>2]|0;
  $600 = $538 << $599;
  $601 = $3;
  $602 = ((($601)) + 5816|0);
  $603 = HEAP16[$602>>1]|0;
  $604 = $603&65535;
  $605 = $604 | $600;
  $606 = $605&65535;
  HEAP16[$602>>1] = $606;
  $607 = $21;
  $608 = $3;
  $609 = ((($608)) + 5820|0);
  $610 = HEAP32[$609>>2]|0;
  $611 = (($610) + ($607))|0;
  HEAP32[$609>>2] = $611;
  STACKTOP = sp;return;
 }
}
function _send_all_trees($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 5;
 $17 = $4;
 $18 = ((($17)) + 5820|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $9;
 $21 = (16 - ($20))|0;
 $22 = ($19|0)>($21|0);
 $23 = $5;
 $24 = (($23) - 257)|0;
 if ($22) {
  $10 = $24;
  $25 = $10;
  $26 = $25&65535;
  $27 = $26&65535;
  $28 = $4;
  $29 = ((($28)) + 5820|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $27 << $30;
  $32 = $4;
  $33 = ((($32)) + 5816|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = $35 | $31;
  $37 = $36&65535;
  HEAP16[$33>>1] = $37;
  $38 = $4;
  $39 = ((($38)) + 5816|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = $41 & 255;
  $43 = $42&255;
  $44 = $4;
  $45 = ((($44)) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$45>>2] = $47;
  $48 = $4;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($46)|0);
  HEAP8[$51>>0] = $43;
  $52 = $4;
  $53 = ((($52)) + 5816|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54&65535;
  $56 = $55 >> 8;
  $57 = $56&255;
  $58 = $4;
  $59 = ((($58)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 1)|0;
  HEAP32[$59>>2] = $61;
  $62 = $4;
  $63 = ((($62)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($60)|0);
  HEAP8[$65>>0] = $57;
  $66 = $10;
  $67 = $66&65535;
  $68 = $67&65535;
  $69 = $4;
  $70 = ((($69)) + 5820|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (16 - ($71))|0;
  $73 = $68 >> $72;
  $74 = $73&65535;
  $75 = $4;
  $76 = ((($75)) + 5816|0);
  HEAP16[$76>>1] = $74;
  $77 = $9;
  $78 = (($77) - 16)|0;
  $79 = $4;
  $80 = ((($79)) + 5820|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + ($78))|0;
  HEAP32[$80>>2] = $82;
 } else {
  $83 = $24&65535;
  $84 = $83&65535;
  $85 = $4;
  $86 = ((($85)) + 5820|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $84 << $87;
  $89 = $4;
  $90 = ((($89)) + 5816|0);
  $91 = HEAP16[$90>>1]|0;
  $92 = $91&65535;
  $93 = $92 | $88;
  $94 = $93&65535;
  HEAP16[$90>>1] = $94;
  $95 = $9;
  $96 = $4;
  $97 = ((($96)) + 5820|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($95))|0;
  HEAP32[$97>>2] = $99;
 }
 $11 = 5;
 $100 = $4;
 $101 = ((($100)) + 5820|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $11;
 $104 = (16 - ($103))|0;
 $105 = ($102|0)>($104|0);
 $106 = $6;
 $107 = (($106) - 1)|0;
 if ($105) {
  $12 = $107;
  $108 = $12;
  $109 = $108&65535;
  $110 = $109&65535;
  $111 = $4;
  $112 = ((($111)) + 5820|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $110 << $113;
  $115 = $4;
  $116 = ((($115)) + 5816|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117&65535;
  $119 = $118 | $114;
  $120 = $119&65535;
  HEAP16[$116>>1] = $120;
  $121 = $4;
  $122 = ((($121)) + 5816|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $123&65535;
  $125 = $124 & 255;
  $126 = $125&255;
  $127 = $4;
  $128 = ((($127)) + 20|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + 1)|0;
  HEAP32[$128>>2] = $130;
  $131 = $4;
  $132 = ((($131)) + 8|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + ($129)|0);
  HEAP8[$134>>0] = $126;
  $135 = $4;
  $136 = ((($135)) + 5816|0);
  $137 = HEAP16[$136>>1]|0;
  $138 = $137&65535;
  $139 = $138 >> 8;
  $140 = $139&255;
  $141 = $4;
  $142 = ((($141)) + 20|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + 1)|0;
  HEAP32[$142>>2] = $144;
  $145 = $4;
  $146 = ((($145)) + 8|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + ($143)|0);
  HEAP8[$148>>0] = $140;
  $149 = $12;
  $150 = $149&65535;
  $151 = $150&65535;
  $152 = $4;
  $153 = ((($152)) + 5820|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (16 - ($154))|0;
  $156 = $151 >> $155;
  $157 = $156&65535;
  $158 = $4;
  $159 = ((($158)) + 5816|0);
  HEAP16[$159>>1] = $157;
  $160 = $11;
  $161 = (($160) - 16)|0;
  $162 = $4;
  $163 = ((($162)) + 5820|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($164) + ($161))|0;
  HEAP32[$163>>2] = $165;
 } else {
  $166 = $107&65535;
  $167 = $166&65535;
  $168 = $4;
  $169 = ((($168)) + 5820|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $167 << $170;
  $172 = $4;
  $173 = ((($172)) + 5816|0);
  $174 = HEAP16[$173>>1]|0;
  $175 = $174&65535;
  $176 = $175 | $171;
  $177 = $176&65535;
  HEAP16[$173>>1] = $177;
  $178 = $11;
  $179 = $4;
  $180 = ((($179)) + 5820|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + ($178))|0;
  HEAP32[$180>>2] = $182;
 }
 $13 = 4;
 $183 = $4;
 $184 = ((($183)) + 5820|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = $13;
 $187 = (16 - ($186))|0;
 $188 = ($185|0)>($187|0);
 $189 = $7;
 $190 = (($189) - 4)|0;
 if ($188) {
  $14 = $190;
  $191 = $14;
  $192 = $191&65535;
  $193 = $192&65535;
  $194 = $4;
  $195 = ((($194)) + 5820|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = $193 << $196;
  $198 = $4;
  $199 = ((($198)) + 5816|0);
  $200 = HEAP16[$199>>1]|0;
  $201 = $200&65535;
  $202 = $201 | $197;
  $203 = $202&65535;
  HEAP16[$199>>1] = $203;
  $204 = $4;
  $205 = ((($204)) + 5816|0);
  $206 = HEAP16[$205>>1]|0;
  $207 = $206&65535;
  $208 = $207 & 255;
  $209 = $208&255;
  $210 = $4;
  $211 = ((($210)) + 20|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = (($212) + 1)|0;
  HEAP32[$211>>2] = $213;
  $214 = $4;
  $215 = ((($214)) + 8|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (($216) + ($212)|0);
  HEAP8[$217>>0] = $209;
  $218 = $4;
  $219 = ((($218)) + 5816|0);
  $220 = HEAP16[$219>>1]|0;
  $221 = $220&65535;
  $222 = $221 >> 8;
  $223 = $222&255;
  $224 = $4;
  $225 = ((($224)) + 20|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($226) + 1)|0;
  HEAP32[$225>>2] = $227;
  $228 = $4;
  $229 = ((($228)) + 8|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = (($230) + ($226)|0);
  HEAP8[$231>>0] = $223;
  $232 = $14;
  $233 = $232&65535;
  $234 = $233&65535;
  $235 = $4;
  $236 = ((($235)) + 5820|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = (16 - ($237))|0;
  $239 = $234 >> $238;
  $240 = $239&65535;
  $241 = $4;
  $242 = ((($241)) + 5816|0);
  HEAP16[$242>>1] = $240;
  $243 = $13;
  $244 = (($243) - 16)|0;
  $245 = $4;
  $246 = ((($245)) + 5820|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = (($247) + ($244))|0;
  HEAP32[$246>>2] = $248;
 } else {
  $249 = $190&65535;
  $250 = $249&65535;
  $251 = $4;
  $252 = ((($251)) + 5820|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = $250 << $253;
  $255 = $4;
  $256 = ((($255)) + 5816|0);
  $257 = HEAP16[$256>>1]|0;
  $258 = $257&65535;
  $259 = $258 | $254;
  $260 = $259&65535;
  HEAP16[$256>>1] = $260;
  $261 = $13;
  $262 = $4;
  $263 = ((($262)) + 5820|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = (($264) + ($261))|0;
  HEAP32[$263>>2] = $265;
 }
 $8 = 0;
 while(1) {
  $266 = $8;
  $267 = $7;
  $268 = ($266|0)<($267|0);
  if (!($268)) {
   break;
  }
  $15 = 3;
  $269 = $4;
  $270 = ((($269)) + 5820|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $15;
  $273 = (16 - ($272))|0;
  $274 = ($271|0)>($273|0);
  $275 = $8;
  $276 = (14818 + ($275)|0);
  $277 = HEAP8[$276>>0]|0;
  $278 = $277&255;
  $279 = $4;
  $280 = ((($279)) + 2684|0);
  $281 = (($280) + ($278<<2)|0);
  $282 = ((($281)) + 2|0);
  $283 = HEAP16[$282>>1]|0;
  $284 = $283&65535;
  if ($274) {
   $16 = $284;
   $285 = $16;
   $286 = $285&65535;
   $287 = $286&65535;
   $288 = $4;
   $289 = ((($288)) + 5820|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $287 << $290;
   $292 = $4;
   $293 = ((($292)) + 5816|0);
   $294 = HEAP16[$293>>1]|0;
   $295 = $294&65535;
   $296 = $295 | $291;
   $297 = $296&65535;
   HEAP16[$293>>1] = $297;
   $298 = $4;
   $299 = ((($298)) + 5816|0);
   $300 = HEAP16[$299>>1]|0;
   $301 = $300&65535;
   $302 = $301 & 255;
   $303 = $302&255;
   $304 = $4;
   $305 = ((($304)) + 20|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = (($306) + 1)|0;
   HEAP32[$305>>2] = $307;
   $308 = $4;
   $309 = ((($308)) + 8|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = (($310) + ($306)|0);
   HEAP8[$311>>0] = $303;
   $312 = $4;
   $313 = ((($312)) + 5816|0);
   $314 = HEAP16[$313>>1]|0;
   $315 = $314&65535;
   $316 = $315 >> 8;
   $317 = $316&255;
   $318 = $4;
   $319 = ((($318)) + 20|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = (($320) + 1)|0;
   HEAP32[$319>>2] = $321;
   $322 = $4;
   $323 = ((($322)) + 8|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = (($324) + ($320)|0);
   HEAP8[$325>>0] = $317;
   $326 = $16;
   $327 = $326&65535;
   $328 = $327&65535;
   $329 = $4;
   $330 = ((($329)) + 5820|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = (16 - ($331))|0;
   $333 = $328 >> $332;
   $334 = $333&65535;
   $335 = $4;
   $336 = ((($335)) + 5816|0);
   HEAP16[$336>>1] = $334;
   $337 = $15;
   $338 = (($337) - 16)|0;
   $339 = $4;
   $340 = ((($339)) + 5820|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = (($341) + ($338))|0;
   HEAP32[$340>>2] = $342;
  } else {
   $343 = $4;
   $344 = ((($343)) + 5820|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = $284 << $345;
   $347 = $4;
   $348 = ((($347)) + 5816|0);
   $349 = HEAP16[$348>>1]|0;
   $350 = $349&65535;
   $351 = $350 | $346;
   $352 = $351&65535;
   HEAP16[$348>>1] = $352;
   $353 = $15;
   $354 = $4;
   $355 = ((($354)) + 5820|0);
   $356 = HEAP32[$355>>2]|0;
   $357 = (($356) + ($353))|0;
   HEAP32[$355>>2] = $357;
  }
  $358 = $8;
  $359 = (($358) + 1)|0;
  $8 = $359;
 }
 $360 = $4;
 $361 = $4;
 $362 = ((($361)) + 148|0);
 $363 = $5;
 $364 = (($363) - 1)|0;
 _send_tree($360,$362,$364);
 $365 = $4;
 $366 = $4;
 $367 = ((($366)) + 2440|0);
 $368 = $6;
 $369 = (($368) - 1)|0;
 _send_tree($365,$367,$369);
 STACKTOP = sp;return;
}
function _init_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = ($3|0)<(286);
  if (!($4)) {
   break;
  }
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 148|0);
  $8 = (($7) + ($5<<2)|0);
  HEAP16[$8>>1] = 0;
  $9 = $2;
  $10 = (($9) + 1)|0;
  $2 = $10;
 }
 $2 = 0;
 while(1) {
  $11 = $2;
  $12 = ($11|0)<(30);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = $1;
  $15 = ((($14)) + 2440|0);
  $16 = (($15) + ($13<<2)|0);
  HEAP16[$16>>1] = 0;
  $17 = $2;
  $18 = (($17) + 1)|0;
  $2 = $18;
 }
 $2 = 0;
 while(1) {
  $19 = $2;
  $20 = ($19|0)<(19);
  if (!($20)) {
   break;
  }
  $21 = $2;
  $22 = $1;
  $23 = ((($22)) + 2684|0);
  $24 = (($23) + ($21<<2)|0);
  HEAP16[$24>>1] = 0;
  $25 = $2;
  $26 = (($25) + 1)|0;
  $2 = $26;
 }
 $27 = $1;
 $28 = ((($27)) + 148|0);
 $29 = ((($28)) + 1024|0);
 HEAP16[$29>>1] = 1;
 $30 = $1;
 $31 = ((($30)) + 5804|0);
 HEAP32[$31>>2] = 0;
 $32 = $1;
 $33 = ((($32)) + 5800|0);
 HEAP32[$33>>2] = 0;
 $34 = $1;
 $35 = ((($34)) + 5808|0);
 HEAP32[$35>>2] = 0;
 $36 = $1;
 $37 = ((($36)) + 5792|0);
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function _send_tree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = -1;
 $29 = $4;
 $30 = ((($29)) + 2|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $9 = $32;
 $10 = 0;
 $11 = 7;
 $12 = 4;
 $33 = $9;
 $34 = ($33|0)==(0);
 if ($34) {
  $11 = 138;
  $12 = 3;
 }
 $6 = 0;
 while(1) {
  $35 = $6;
  $36 = $5;
  $37 = ($35|0)<=($36|0);
  if (!($37)) {
   break;
  }
  $38 = $9;
  $8 = $38;
  $39 = $6;
  $40 = (($39) + 1)|0;
  $41 = $4;
  $42 = (($41) + ($40<<2)|0);
  $43 = ((($42)) + 2|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $9 = $45;
  $46 = $10;
  $47 = (($46) + 1)|0;
  $10 = $47;
  $48 = $11;
  $49 = ($47|0)<($48|0);
  if ($49) {
   $50 = $8;
   $51 = $9;
   $52 = ($50|0)==($51|0);
   if (!($52)) {
    label = 7;
   }
  } else {
   label = 7;
  }
  do {
   if ((label|0) == 7) {
    label = 0;
    $53 = $10;
    $54 = $12;
    $55 = ($53|0)<($54|0);
    do {
     if ($55) {
      while(1) {
       $56 = $8;
       $57 = $3;
       $58 = ((($57)) + 2684|0);
       $59 = (($58) + ($56<<2)|0);
       $60 = ((($59)) + 2|0);
       $61 = HEAP16[$60>>1]|0;
       $62 = $61&65535;
       $13 = $62;
       $63 = $3;
       $64 = ((($63)) + 5820|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = $13;
       $67 = (16 - ($66))|0;
       $68 = ($65|0)>($67|0);
       $69 = $8;
       $70 = $3;
       $71 = ((($70)) + 2684|0);
       $72 = (($71) + ($69<<2)|0);
       $73 = HEAP16[$72>>1]|0;
       $74 = $73&65535;
       if ($68) {
        $14 = $74;
        $75 = $14;
        $76 = $75&65535;
        $77 = $76&65535;
        $78 = $3;
        $79 = ((($78)) + 5820|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = $77 << $80;
        $82 = $3;
        $83 = ((($82)) + 5816|0);
        $84 = HEAP16[$83>>1]|0;
        $85 = $84&65535;
        $86 = $85 | $81;
        $87 = $86&65535;
        HEAP16[$83>>1] = $87;
        $88 = $3;
        $89 = ((($88)) + 5816|0);
        $90 = HEAP16[$89>>1]|0;
        $91 = $90&65535;
        $92 = $91 & 255;
        $93 = $92&255;
        $94 = $3;
        $95 = ((($94)) + 20|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = (($96) + 1)|0;
        HEAP32[$95>>2] = $97;
        $98 = $3;
        $99 = ((($98)) + 8|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = (($100) + ($96)|0);
        HEAP8[$101>>0] = $93;
        $102 = $3;
        $103 = ((($102)) + 5816|0);
        $104 = HEAP16[$103>>1]|0;
        $105 = $104&65535;
        $106 = $105 >> 8;
        $107 = $106&255;
        $108 = $3;
        $109 = ((($108)) + 20|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = (($110) + 1)|0;
        HEAP32[$109>>2] = $111;
        $112 = $3;
        $113 = ((($112)) + 8|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = (($114) + ($110)|0);
        HEAP8[$115>>0] = $107;
        $116 = $14;
        $117 = $116&65535;
        $118 = $117&65535;
        $119 = $3;
        $120 = ((($119)) + 5820|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (16 - ($121))|0;
        $123 = $118 >> $122;
        $124 = $123&65535;
        $125 = $3;
        $126 = ((($125)) + 5816|0);
        HEAP16[$126>>1] = $124;
        $127 = $13;
        $128 = (($127) - 16)|0;
        $129 = $3;
        $130 = ((($129)) + 5820|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = (($131) + ($128))|0;
        HEAP32[$130>>2] = $132;
       } else {
        $133 = $3;
        $134 = ((($133)) + 5820|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = $74 << $135;
        $137 = $3;
        $138 = ((($137)) + 5816|0);
        $139 = HEAP16[$138>>1]|0;
        $140 = $139&65535;
        $141 = $140 | $136;
        $142 = $141&65535;
        HEAP16[$138>>1] = $142;
        $143 = $13;
        $144 = $3;
        $145 = ((($144)) + 5820|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = (($146) + ($143))|0;
        HEAP32[$145>>2] = $147;
       }
       $148 = $10;
       $149 = (($148) + -1)|0;
       $10 = $149;
       $150 = ($149|0)!=(0);
       if (!($150)) {
        break;
       }
      }
     } else {
      $151 = $8;
      $152 = ($151|0)!=(0);
      if ($152) {
       $153 = $8;
       $154 = $7;
       $155 = ($153|0)!=($154|0);
       if ($155) {
        $156 = $8;
        $157 = $3;
        $158 = ((($157)) + 2684|0);
        $159 = (($158) + ($156<<2)|0);
        $160 = ((($159)) + 2|0);
        $161 = HEAP16[$160>>1]|0;
        $162 = $161&65535;
        $15 = $162;
        $163 = $3;
        $164 = ((($163)) + 5820|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = $15;
        $167 = (16 - ($166))|0;
        $168 = ($165|0)>($167|0);
        $169 = $8;
        $170 = $3;
        $171 = ((($170)) + 2684|0);
        $172 = (($171) + ($169<<2)|0);
        $173 = HEAP16[$172>>1]|0;
        $174 = $173&65535;
        if ($168) {
         $16 = $174;
         $175 = $16;
         $176 = $175&65535;
         $177 = $176&65535;
         $178 = $3;
         $179 = ((($178)) + 5820|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = $177 << $180;
         $182 = $3;
         $183 = ((($182)) + 5816|0);
         $184 = HEAP16[$183>>1]|0;
         $185 = $184&65535;
         $186 = $185 | $181;
         $187 = $186&65535;
         HEAP16[$183>>1] = $187;
         $188 = $3;
         $189 = ((($188)) + 5816|0);
         $190 = HEAP16[$189>>1]|0;
         $191 = $190&65535;
         $192 = $191 & 255;
         $193 = $192&255;
         $194 = $3;
         $195 = ((($194)) + 20|0);
         $196 = HEAP32[$195>>2]|0;
         $197 = (($196) + 1)|0;
         HEAP32[$195>>2] = $197;
         $198 = $3;
         $199 = ((($198)) + 8|0);
         $200 = HEAP32[$199>>2]|0;
         $201 = (($200) + ($196)|0);
         HEAP8[$201>>0] = $193;
         $202 = $3;
         $203 = ((($202)) + 5816|0);
         $204 = HEAP16[$203>>1]|0;
         $205 = $204&65535;
         $206 = $205 >> 8;
         $207 = $206&255;
         $208 = $3;
         $209 = ((($208)) + 20|0);
         $210 = HEAP32[$209>>2]|0;
         $211 = (($210) + 1)|0;
         HEAP32[$209>>2] = $211;
         $212 = $3;
         $213 = ((($212)) + 8|0);
         $214 = HEAP32[$213>>2]|0;
         $215 = (($214) + ($210)|0);
         HEAP8[$215>>0] = $207;
         $216 = $16;
         $217 = $216&65535;
         $218 = $217&65535;
         $219 = $3;
         $220 = ((($219)) + 5820|0);
         $221 = HEAP32[$220>>2]|0;
         $222 = (16 - ($221))|0;
         $223 = $218 >> $222;
         $224 = $223&65535;
         $225 = $3;
         $226 = ((($225)) + 5816|0);
         HEAP16[$226>>1] = $224;
         $227 = $15;
         $228 = (($227) - 16)|0;
         $229 = $3;
         $230 = ((($229)) + 5820|0);
         $231 = HEAP32[$230>>2]|0;
         $232 = (($231) + ($228))|0;
         HEAP32[$230>>2] = $232;
        } else {
         $233 = $3;
         $234 = ((($233)) + 5820|0);
         $235 = HEAP32[$234>>2]|0;
         $236 = $174 << $235;
         $237 = $3;
         $238 = ((($237)) + 5816|0);
         $239 = HEAP16[$238>>1]|0;
         $240 = $239&65535;
         $241 = $240 | $236;
         $242 = $241&65535;
         HEAP16[$238>>1] = $242;
         $243 = $15;
         $244 = $3;
         $245 = ((($244)) + 5820|0);
         $246 = HEAP32[$245>>2]|0;
         $247 = (($246) + ($243))|0;
         HEAP32[$245>>2] = $247;
        }
        $248 = $10;
        $249 = (($248) + -1)|0;
        $10 = $249;
       }
       $250 = $3;
       $251 = ((($250)) + 2684|0);
       $252 = ((($251)) + 64|0);
       $253 = ((($252)) + 2|0);
       $254 = HEAP16[$253>>1]|0;
       $255 = $254&65535;
       $17 = $255;
       $256 = $3;
       $257 = ((($256)) + 5820|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = $17;
       $260 = (16 - ($259))|0;
       $261 = ($258|0)>($260|0);
       $262 = $3;
       $263 = ((($262)) + 2684|0);
       $264 = ((($263)) + 64|0);
       $265 = HEAP16[$264>>1]|0;
       $266 = $265&65535;
       if ($261) {
        $18 = $266;
        $267 = $18;
        $268 = $267&65535;
        $269 = $268&65535;
        $270 = $3;
        $271 = ((($270)) + 5820|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = $269 << $272;
        $274 = $3;
        $275 = ((($274)) + 5816|0);
        $276 = HEAP16[$275>>1]|0;
        $277 = $276&65535;
        $278 = $277 | $273;
        $279 = $278&65535;
        HEAP16[$275>>1] = $279;
        $280 = $3;
        $281 = ((($280)) + 5816|0);
        $282 = HEAP16[$281>>1]|0;
        $283 = $282&65535;
        $284 = $283 & 255;
        $285 = $284&255;
        $286 = $3;
        $287 = ((($286)) + 20|0);
        $288 = HEAP32[$287>>2]|0;
        $289 = (($288) + 1)|0;
        HEAP32[$287>>2] = $289;
        $290 = $3;
        $291 = ((($290)) + 8|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = (($292) + ($288)|0);
        HEAP8[$293>>0] = $285;
        $294 = $3;
        $295 = ((($294)) + 5816|0);
        $296 = HEAP16[$295>>1]|0;
        $297 = $296&65535;
        $298 = $297 >> 8;
        $299 = $298&255;
        $300 = $3;
        $301 = ((($300)) + 20|0);
        $302 = HEAP32[$301>>2]|0;
        $303 = (($302) + 1)|0;
        HEAP32[$301>>2] = $303;
        $304 = $3;
        $305 = ((($304)) + 8|0);
        $306 = HEAP32[$305>>2]|0;
        $307 = (($306) + ($302)|0);
        HEAP8[$307>>0] = $299;
        $308 = $18;
        $309 = $308&65535;
        $310 = $309&65535;
        $311 = $3;
        $312 = ((($311)) + 5820|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = (16 - ($313))|0;
        $315 = $310 >> $314;
        $316 = $315&65535;
        $317 = $3;
        $318 = ((($317)) + 5816|0);
        HEAP16[$318>>1] = $316;
        $319 = $17;
        $320 = (($319) - 16)|0;
        $321 = $3;
        $322 = ((($321)) + 5820|0);
        $323 = HEAP32[$322>>2]|0;
        $324 = (($323) + ($320))|0;
        HEAP32[$322>>2] = $324;
       } else {
        $325 = $3;
        $326 = ((($325)) + 5820|0);
        $327 = HEAP32[$326>>2]|0;
        $328 = $266 << $327;
        $329 = $3;
        $330 = ((($329)) + 5816|0);
        $331 = HEAP16[$330>>1]|0;
        $332 = $331&65535;
        $333 = $332 | $328;
        $334 = $333&65535;
        HEAP16[$330>>1] = $334;
        $335 = $17;
        $336 = $3;
        $337 = ((($336)) + 5820|0);
        $338 = HEAP32[$337>>2]|0;
        $339 = (($338) + ($335))|0;
        HEAP32[$337>>2] = $339;
       }
       $19 = 2;
       $340 = $3;
       $341 = ((($340)) + 5820|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = $19;
       $344 = (16 - ($343))|0;
       $345 = ($342|0)>($344|0);
       $346 = $10;
       $347 = (($346) - 3)|0;
       if ($345) {
        $20 = $347;
        $348 = $20;
        $349 = $348&65535;
        $350 = $349&65535;
        $351 = $3;
        $352 = ((($351)) + 5820|0);
        $353 = HEAP32[$352>>2]|0;
        $354 = $350 << $353;
        $355 = $3;
        $356 = ((($355)) + 5816|0);
        $357 = HEAP16[$356>>1]|0;
        $358 = $357&65535;
        $359 = $358 | $354;
        $360 = $359&65535;
        HEAP16[$356>>1] = $360;
        $361 = $3;
        $362 = ((($361)) + 5816|0);
        $363 = HEAP16[$362>>1]|0;
        $364 = $363&65535;
        $365 = $364 & 255;
        $366 = $365&255;
        $367 = $3;
        $368 = ((($367)) + 20|0);
        $369 = HEAP32[$368>>2]|0;
        $370 = (($369) + 1)|0;
        HEAP32[$368>>2] = $370;
        $371 = $3;
        $372 = ((($371)) + 8|0);
        $373 = HEAP32[$372>>2]|0;
        $374 = (($373) + ($369)|0);
        HEAP8[$374>>0] = $366;
        $375 = $3;
        $376 = ((($375)) + 5816|0);
        $377 = HEAP16[$376>>1]|0;
        $378 = $377&65535;
        $379 = $378 >> 8;
        $380 = $379&255;
        $381 = $3;
        $382 = ((($381)) + 20|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = (($383) + 1)|0;
        HEAP32[$382>>2] = $384;
        $385 = $3;
        $386 = ((($385)) + 8|0);
        $387 = HEAP32[$386>>2]|0;
        $388 = (($387) + ($383)|0);
        HEAP8[$388>>0] = $380;
        $389 = $20;
        $390 = $389&65535;
        $391 = $390&65535;
        $392 = $3;
        $393 = ((($392)) + 5820|0);
        $394 = HEAP32[$393>>2]|0;
        $395 = (16 - ($394))|0;
        $396 = $391 >> $395;
        $397 = $396&65535;
        $398 = $3;
        $399 = ((($398)) + 5816|0);
        HEAP16[$399>>1] = $397;
        $400 = $19;
        $401 = (($400) - 16)|0;
        $402 = $3;
        $403 = ((($402)) + 5820|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = (($404) + ($401))|0;
        HEAP32[$403>>2] = $405;
        break;
       } else {
        $406 = $347&65535;
        $407 = $406&65535;
        $408 = $3;
        $409 = ((($408)) + 5820|0);
        $410 = HEAP32[$409>>2]|0;
        $411 = $407 << $410;
        $412 = $3;
        $413 = ((($412)) + 5816|0);
        $414 = HEAP16[$413>>1]|0;
        $415 = $414&65535;
        $416 = $415 | $411;
        $417 = $416&65535;
        HEAP16[$413>>1] = $417;
        $418 = $19;
        $419 = $3;
        $420 = ((($419)) + 5820|0);
        $421 = HEAP32[$420>>2]|0;
        $422 = (($421) + ($418))|0;
        HEAP32[$420>>2] = $422;
        break;
       }
      }
      $423 = $10;
      $424 = ($423|0)<=(10);
      $425 = $3;
      $426 = ((($425)) + 2684|0);
      if ($424) {
       $427 = ((($426)) + 68|0);
       $428 = ((($427)) + 2|0);
       $429 = HEAP16[$428>>1]|0;
       $430 = $429&65535;
       $21 = $430;
       $431 = $3;
       $432 = ((($431)) + 5820|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = $21;
       $435 = (16 - ($434))|0;
       $436 = ($433|0)>($435|0);
       $437 = $3;
       $438 = ((($437)) + 2684|0);
       $439 = ((($438)) + 68|0);
       $440 = HEAP16[$439>>1]|0;
       $441 = $440&65535;
       if ($436) {
        $22 = $441;
        $442 = $22;
        $443 = $442&65535;
        $444 = $443&65535;
        $445 = $3;
        $446 = ((($445)) + 5820|0);
        $447 = HEAP32[$446>>2]|0;
        $448 = $444 << $447;
        $449 = $3;
        $450 = ((($449)) + 5816|0);
        $451 = HEAP16[$450>>1]|0;
        $452 = $451&65535;
        $453 = $452 | $448;
        $454 = $453&65535;
        HEAP16[$450>>1] = $454;
        $455 = $3;
        $456 = ((($455)) + 5816|0);
        $457 = HEAP16[$456>>1]|0;
        $458 = $457&65535;
        $459 = $458 & 255;
        $460 = $459&255;
        $461 = $3;
        $462 = ((($461)) + 20|0);
        $463 = HEAP32[$462>>2]|0;
        $464 = (($463) + 1)|0;
        HEAP32[$462>>2] = $464;
        $465 = $3;
        $466 = ((($465)) + 8|0);
        $467 = HEAP32[$466>>2]|0;
        $468 = (($467) + ($463)|0);
        HEAP8[$468>>0] = $460;
        $469 = $3;
        $470 = ((($469)) + 5816|0);
        $471 = HEAP16[$470>>1]|0;
        $472 = $471&65535;
        $473 = $472 >> 8;
        $474 = $473&255;
        $475 = $3;
        $476 = ((($475)) + 20|0);
        $477 = HEAP32[$476>>2]|0;
        $478 = (($477) + 1)|0;
        HEAP32[$476>>2] = $478;
        $479 = $3;
        $480 = ((($479)) + 8|0);
        $481 = HEAP32[$480>>2]|0;
        $482 = (($481) + ($477)|0);
        HEAP8[$482>>0] = $474;
        $483 = $22;
        $484 = $483&65535;
        $485 = $484&65535;
        $486 = $3;
        $487 = ((($486)) + 5820|0);
        $488 = HEAP32[$487>>2]|0;
        $489 = (16 - ($488))|0;
        $490 = $485 >> $489;
        $491 = $490&65535;
        $492 = $3;
        $493 = ((($492)) + 5816|0);
        HEAP16[$493>>1] = $491;
        $494 = $21;
        $495 = (($494) - 16)|0;
        $496 = $3;
        $497 = ((($496)) + 5820|0);
        $498 = HEAP32[$497>>2]|0;
        $499 = (($498) + ($495))|0;
        HEAP32[$497>>2] = $499;
       } else {
        $500 = $3;
        $501 = ((($500)) + 5820|0);
        $502 = HEAP32[$501>>2]|0;
        $503 = $441 << $502;
        $504 = $3;
        $505 = ((($504)) + 5816|0);
        $506 = HEAP16[$505>>1]|0;
        $507 = $506&65535;
        $508 = $507 | $503;
        $509 = $508&65535;
        HEAP16[$505>>1] = $509;
        $510 = $21;
        $511 = $3;
        $512 = ((($511)) + 5820|0);
        $513 = HEAP32[$512>>2]|0;
        $514 = (($513) + ($510))|0;
        HEAP32[$512>>2] = $514;
       }
       $23 = 3;
       $515 = $3;
       $516 = ((($515)) + 5820|0);
       $517 = HEAP32[$516>>2]|0;
       $518 = $23;
       $519 = (16 - ($518))|0;
       $520 = ($517|0)>($519|0);
       $521 = $10;
       $522 = (($521) - 3)|0;
       if ($520) {
        $24 = $522;
        $523 = $24;
        $524 = $523&65535;
        $525 = $524&65535;
        $526 = $3;
        $527 = ((($526)) + 5820|0);
        $528 = HEAP32[$527>>2]|0;
        $529 = $525 << $528;
        $530 = $3;
        $531 = ((($530)) + 5816|0);
        $532 = HEAP16[$531>>1]|0;
        $533 = $532&65535;
        $534 = $533 | $529;
        $535 = $534&65535;
        HEAP16[$531>>1] = $535;
        $536 = $3;
        $537 = ((($536)) + 5816|0);
        $538 = HEAP16[$537>>1]|0;
        $539 = $538&65535;
        $540 = $539 & 255;
        $541 = $540&255;
        $542 = $3;
        $543 = ((($542)) + 20|0);
        $544 = HEAP32[$543>>2]|0;
        $545 = (($544) + 1)|0;
        HEAP32[$543>>2] = $545;
        $546 = $3;
        $547 = ((($546)) + 8|0);
        $548 = HEAP32[$547>>2]|0;
        $549 = (($548) + ($544)|0);
        HEAP8[$549>>0] = $541;
        $550 = $3;
        $551 = ((($550)) + 5816|0);
        $552 = HEAP16[$551>>1]|0;
        $553 = $552&65535;
        $554 = $553 >> 8;
        $555 = $554&255;
        $556 = $3;
        $557 = ((($556)) + 20|0);
        $558 = HEAP32[$557>>2]|0;
        $559 = (($558) + 1)|0;
        HEAP32[$557>>2] = $559;
        $560 = $3;
        $561 = ((($560)) + 8|0);
        $562 = HEAP32[$561>>2]|0;
        $563 = (($562) + ($558)|0);
        HEAP8[$563>>0] = $555;
        $564 = $24;
        $565 = $564&65535;
        $566 = $565&65535;
        $567 = $3;
        $568 = ((($567)) + 5820|0);
        $569 = HEAP32[$568>>2]|0;
        $570 = (16 - ($569))|0;
        $571 = $566 >> $570;
        $572 = $571&65535;
        $573 = $3;
        $574 = ((($573)) + 5816|0);
        HEAP16[$574>>1] = $572;
        $575 = $23;
        $576 = (($575) - 16)|0;
        $577 = $3;
        $578 = ((($577)) + 5820|0);
        $579 = HEAP32[$578>>2]|0;
        $580 = (($579) + ($576))|0;
        HEAP32[$578>>2] = $580;
        break;
       } else {
        $581 = $522&65535;
        $582 = $581&65535;
        $583 = $3;
        $584 = ((($583)) + 5820|0);
        $585 = HEAP32[$584>>2]|0;
        $586 = $582 << $585;
        $587 = $3;
        $588 = ((($587)) + 5816|0);
        $589 = HEAP16[$588>>1]|0;
        $590 = $589&65535;
        $591 = $590 | $586;
        $592 = $591&65535;
        HEAP16[$588>>1] = $592;
        $593 = $23;
        $594 = $3;
        $595 = ((($594)) + 5820|0);
        $596 = HEAP32[$595>>2]|0;
        $597 = (($596) + ($593))|0;
        HEAP32[$595>>2] = $597;
        break;
       }
      } else {
       $598 = ((($426)) + 72|0);
       $599 = ((($598)) + 2|0);
       $600 = HEAP16[$599>>1]|0;
       $601 = $600&65535;
       $25 = $601;
       $602 = $3;
       $603 = ((($602)) + 5820|0);
       $604 = HEAP32[$603>>2]|0;
       $605 = $25;
       $606 = (16 - ($605))|0;
       $607 = ($604|0)>($606|0);
       $608 = $3;
       $609 = ((($608)) + 2684|0);
       $610 = ((($609)) + 72|0);
       $611 = HEAP16[$610>>1]|0;
       $612 = $611&65535;
       if ($607) {
        $26 = $612;
        $613 = $26;
        $614 = $613&65535;
        $615 = $614&65535;
        $616 = $3;
        $617 = ((($616)) + 5820|0);
        $618 = HEAP32[$617>>2]|0;
        $619 = $615 << $618;
        $620 = $3;
        $621 = ((($620)) + 5816|0);
        $622 = HEAP16[$621>>1]|0;
        $623 = $622&65535;
        $624 = $623 | $619;
        $625 = $624&65535;
        HEAP16[$621>>1] = $625;
        $626 = $3;
        $627 = ((($626)) + 5816|0);
        $628 = HEAP16[$627>>1]|0;
        $629 = $628&65535;
        $630 = $629 & 255;
        $631 = $630&255;
        $632 = $3;
        $633 = ((($632)) + 20|0);
        $634 = HEAP32[$633>>2]|0;
        $635 = (($634) + 1)|0;
        HEAP32[$633>>2] = $635;
        $636 = $3;
        $637 = ((($636)) + 8|0);
        $638 = HEAP32[$637>>2]|0;
        $639 = (($638) + ($634)|0);
        HEAP8[$639>>0] = $631;
        $640 = $3;
        $641 = ((($640)) + 5816|0);
        $642 = HEAP16[$641>>1]|0;
        $643 = $642&65535;
        $644 = $643 >> 8;
        $645 = $644&255;
        $646 = $3;
        $647 = ((($646)) + 20|0);
        $648 = HEAP32[$647>>2]|0;
        $649 = (($648) + 1)|0;
        HEAP32[$647>>2] = $649;
        $650 = $3;
        $651 = ((($650)) + 8|0);
        $652 = HEAP32[$651>>2]|0;
        $653 = (($652) + ($648)|0);
        HEAP8[$653>>0] = $645;
        $654 = $26;
        $655 = $654&65535;
        $656 = $655&65535;
        $657 = $3;
        $658 = ((($657)) + 5820|0);
        $659 = HEAP32[$658>>2]|0;
        $660 = (16 - ($659))|0;
        $661 = $656 >> $660;
        $662 = $661&65535;
        $663 = $3;
        $664 = ((($663)) + 5816|0);
        HEAP16[$664>>1] = $662;
        $665 = $25;
        $666 = (($665) - 16)|0;
        $667 = $3;
        $668 = ((($667)) + 5820|0);
        $669 = HEAP32[$668>>2]|0;
        $670 = (($669) + ($666))|0;
        HEAP32[$668>>2] = $670;
       } else {
        $671 = $3;
        $672 = ((($671)) + 5820|0);
        $673 = HEAP32[$672>>2]|0;
        $674 = $612 << $673;
        $675 = $3;
        $676 = ((($675)) + 5816|0);
        $677 = HEAP16[$676>>1]|0;
        $678 = $677&65535;
        $679 = $678 | $674;
        $680 = $679&65535;
        HEAP16[$676>>1] = $680;
        $681 = $25;
        $682 = $3;
        $683 = ((($682)) + 5820|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (($684) + ($681))|0;
        HEAP32[$683>>2] = $685;
       }
       $27 = 7;
       $686 = $3;
       $687 = ((($686)) + 5820|0);
       $688 = HEAP32[$687>>2]|0;
       $689 = $27;
       $690 = (16 - ($689))|0;
       $691 = ($688|0)>($690|0);
       $692 = $10;
       $693 = (($692) - 11)|0;
       if ($691) {
        $28 = $693;
        $694 = $28;
        $695 = $694&65535;
        $696 = $695&65535;
        $697 = $3;
        $698 = ((($697)) + 5820|0);
        $699 = HEAP32[$698>>2]|0;
        $700 = $696 << $699;
        $701 = $3;
        $702 = ((($701)) + 5816|0);
        $703 = HEAP16[$702>>1]|0;
        $704 = $703&65535;
        $705 = $704 | $700;
        $706 = $705&65535;
        HEAP16[$702>>1] = $706;
        $707 = $3;
        $708 = ((($707)) + 5816|0);
        $709 = HEAP16[$708>>1]|0;
        $710 = $709&65535;
        $711 = $710 & 255;
        $712 = $711&255;
        $713 = $3;
        $714 = ((($713)) + 20|0);
        $715 = HEAP32[$714>>2]|0;
        $716 = (($715) + 1)|0;
        HEAP32[$714>>2] = $716;
        $717 = $3;
        $718 = ((($717)) + 8|0);
        $719 = HEAP32[$718>>2]|0;
        $720 = (($719) + ($715)|0);
        HEAP8[$720>>0] = $712;
        $721 = $3;
        $722 = ((($721)) + 5816|0);
        $723 = HEAP16[$722>>1]|0;
        $724 = $723&65535;
        $725 = $724 >> 8;
        $726 = $725&255;
        $727 = $3;
        $728 = ((($727)) + 20|0);
        $729 = HEAP32[$728>>2]|0;
        $730 = (($729) + 1)|0;
        HEAP32[$728>>2] = $730;
        $731 = $3;
        $732 = ((($731)) + 8|0);
        $733 = HEAP32[$732>>2]|0;
        $734 = (($733) + ($729)|0);
        HEAP8[$734>>0] = $726;
        $735 = $28;
        $736 = $735&65535;
        $737 = $736&65535;
        $738 = $3;
        $739 = ((($738)) + 5820|0);
        $740 = HEAP32[$739>>2]|0;
        $741 = (16 - ($740))|0;
        $742 = $737 >> $741;
        $743 = $742&65535;
        $744 = $3;
        $745 = ((($744)) + 5816|0);
        HEAP16[$745>>1] = $743;
        $746 = $27;
        $747 = (($746) - 16)|0;
        $748 = $3;
        $749 = ((($748)) + 5820|0);
        $750 = HEAP32[$749>>2]|0;
        $751 = (($750) + ($747))|0;
        HEAP32[$749>>2] = $751;
        break;
       } else {
        $752 = $693&65535;
        $753 = $752&65535;
        $754 = $3;
        $755 = ((($754)) + 5820|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $753 << $756;
        $758 = $3;
        $759 = ((($758)) + 5816|0);
        $760 = HEAP16[$759>>1]|0;
        $761 = $760&65535;
        $762 = $761 | $757;
        $763 = $762&65535;
        HEAP16[$759>>1] = $763;
        $764 = $27;
        $765 = $3;
        $766 = ((($765)) + 5820|0);
        $767 = HEAP32[$766>>2]|0;
        $768 = (($767) + ($764))|0;
        HEAP32[$766>>2] = $768;
        break;
       }
      }
     }
    } while(0);
    $10 = 0;
    $769 = $8;
    $7 = $769;
    $770 = $9;
    $771 = ($770|0)==(0);
    if ($771) {
     $11 = 138;
     $12 = 3;
     break;
    }
    $772 = $8;
    $773 = $9;
    $774 = ($772|0)==($773|0);
    if ($774) {
     $11 = 6;
     $12 = 3;
     break;
    } else {
     $11 = 7;
     $12 = 4;
     break;
    }
   }
  } while(0);
  $775 = $6;
  $776 = (($775) + 1)|0;
  $6 = $776;
 }
 STACKTOP = sp;return;
}
function _scan_tree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = -1;
 $13 = $4;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $9 = $16;
 $10 = 0;
 $11 = 7;
 $12 = 4;
 $17 = $9;
 $18 = ($17|0)==(0);
 if ($18) {
  $11 = 138;
  $12 = 3;
 }
 $19 = $5;
 $20 = (($19) + 1)|0;
 $21 = $4;
 $22 = (($21) + ($20<<2)|0);
 $23 = ((($22)) + 2|0);
 HEAP16[$23>>1] = -1;
 $6 = 0;
 while(1) {
  $24 = $6;
  $25 = $5;
  $26 = ($24|0)<=($25|0);
  if (!($26)) {
   break;
  }
  $27 = $9;
  $8 = $27;
  $28 = $6;
  $29 = (($28) + 1)|0;
  $30 = $4;
  $31 = (($30) + ($29<<2)|0);
  $32 = ((($31)) + 2|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $9 = $34;
  $35 = $10;
  $36 = (($35) + 1)|0;
  $10 = $36;
  $37 = $11;
  $38 = ($36|0)<($37|0);
  if ($38) {
   $39 = $8;
   $40 = $9;
   $41 = ($39|0)==($40|0);
   if (!($41)) {
    label = 7;
   }
  } else {
   label = 7;
  }
  do {
   if ((label|0) == 7) {
    label = 0;
    $42 = $10;
    $43 = $12;
    $44 = ($42|0)<($43|0);
    do {
     if ($44) {
      $45 = $10;
      $46 = $8;
      $47 = $3;
      $48 = ((($47)) + 2684|0);
      $49 = (($48) + ($46<<2)|0);
      $50 = HEAP16[$49>>1]|0;
      $51 = $50&65535;
      $52 = (($51) + ($45))|0;
      $53 = $52&65535;
      HEAP16[$49>>1] = $53;
     } else {
      $54 = $8;
      $55 = ($54|0)!=(0);
      if ($55) {
       $56 = $8;
       $57 = $7;
       $58 = ($56|0)!=($57|0);
       if ($58) {
        $59 = $8;
        $60 = $3;
        $61 = ((($60)) + 2684|0);
        $62 = (($61) + ($59<<2)|0);
        $63 = HEAP16[$62>>1]|0;
        $64 = (($63) + 1)<<16>>16;
        HEAP16[$62>>1] = $64;
       }
       $65 = $3;
       $66 = ((($65)) + 2684|0);
       $67 = ((($66)) + 64|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = (($68) + 1)<<16>>16;
       HEAP16[$67>>1] = $69;
       break;
      } else {
       $70 = $10;
       $71 = ($70|0)<=(10);
       $72 = $3;
       $73 = ((($72)) + 2684|0);
       if ($71) {
        $74 = ((($73)) + 68|0);
        $75 = HEAP16[$74>>1]|0;
        $76 = (($75) + 1)<<16>>16;
        HEAP16[$74>>1] = $76;
        break;
       } else {
        $77 = ((($73)) + 72|0);
        $78 = HEAP16[$77>>1]|0;
        $79 = (($78) + 1)<<16>>16;
        HEAP16[$77>>1] = $79;
        break;
       }
      }
     }
    } while(0);
    $10 = 0;
    $80 = $8;
    $7 = $80;
    $81 = $9;
    $82 = ($81|0)==(0);
    if ($82) {
     $11 = 138;
     $12 = 3;
     break;
    }
    $83 = $8;
    $84 = $9;
    $85 = ($83|0)==($84|0);
    if ($85) {
     $11 = 6;
     $12 = 3;
     break;
    } else {
     $11 = 7;
     $12 = 4;
     break;
    }
   }
  } while(0);
  $86 = $6;
  $87 = (($86) + 1)|0;
  $6 = $87;
 }
 STACKTOP = sp;return;
}
function _pqdownheap($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = $3;
 $10 = ((($9)) + 2908|0);
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 $13 = $5;
 $14 = $13 << 1;
 $7 = $14;
 while(1) {
  $15 = $7;
  $16 = $3;
  $17 = ((($16)) + 5200|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<=($18|0);
  if (!($19)) {
   label = 12;
   break;
  }
  $20 = $7;
  $21 = $3;
  $22 = ((($21)) + 5200|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20|0)<($23|0);
  do {
   if ($24) {
    $25 = $7;
    $26 = (($25) + 1)|0;
    $27 = $3;
    $28 = ((($27)) + 2908|0);
    $29 = (($28) + ($26<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $4;
    $32 = (($31) + ($30<<2)|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = $33&65535;
    $35 = $7;
    $36 = $3;
    $37 = ((($36)) + 2908|0);
    $38 = (($37) + ($35<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $4;
    $41 = (($40) + ($39<<2)|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = $42&65535;
    $44 = ($34|0)<($43|0);
    if (!($44)) {
     $45 = $7;
     $46 = (($45) + 1)|0;
     $47 = $3;
     $48 = ((($47)) + 2908|0);
     $49 = (($48) + ($46<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $4;
     $52 = (($51) + ($50<<2)|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = $53&65535;
     $55 = $7;
     $56 = $3;
     $57 = ((($56)) + 2908|0);
     $58 = (($57) + ($55<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $4;
     $61 = (($60) + ($59<<2)|0);
     $62 = HEAP16[$61>>1]|0;
     $63 = $62&65535;
     $64 = ($54|0)==($63|0);
     if (!($64)) {
      break;
     }
     $65 = $7;
     $66 = (($65) + 1)|0;
     $67 = $3;
     $68 = ((($67)) + 2908|0);
     $69 = (($68) + ($66<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $3;
     $72 = ((($71)) + 5208|0);
     $73 = (($72) + ($70)|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74&255;
     $76 = $7;
     $77 = $3;
     $78 = ((($77)) + 2908|0);
     $79 = (($78) + ($76<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $3;
     $82 = ((($81)) + 5208|0);
     $83 = (($82) + ($80)|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = ($75|0)<=($85|0);
     if (!($86)) {
      break;
     }
    }
    $87 = $7;
    $88 = (($87) + 1)|0;
    $7 = $88;
   }
  } while(0);
  $89 = $6;
  $90 = $4;
  $91 = (($90) + ($89<<2)|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92&65535;
  $94 = $7;
  $95 = $3;
  $96 = ((($95)) + 2908|0);
  $97 = (($96) + ($94<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $4;
  $100 = (($99) + ($98<<2)|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101&65535;
  $103 = ($93|0)<($102|0);
  if ($103) {
   label = 12;
   break;
  }
  $104 = $6;
  $105 = $4;
  $106 = (($105) + ($104<<2)|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = $107&65535;
  $109 = $7;
  $110 = $3;
  $111 = ((($110)) + 2908|0);
  $112 = (($111) + ($109<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $4;
  $115 = (($114) + ($113<<2)|0);
  $116 = HEAP16[$115>>1]|0;
  $117 = $116&65535;
  $118 = ($108|0)==($117|0);
  if ($118) {
   $119 = $6;
   $120 = $3;
   $121 = ((($120)) + 5208|0);
   $122 = (($121) + ($119)|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = $7;
   $126 = $3;
   $127 = ((($126)) + 2908|0);
   $128 = (($127) + ($125<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $3;
   $131 = ((($130)) + 5208|0);
   $132 = (($131) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = ($124|0)<=($134|0);
   if ($135) {
    label = 12;
    break;
   }
  }
  $136 = $7;
  $137 = $3;
  $138 = ((($137)) + 2908|0);
  $139 = (($138) + ($136<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $5;
  $142 = $3;
  $143 = ((($142)) + 2908|0);
  $144 = (($143) + ($141<<2)|0);
  HEAP32[$144>>2] = $140;
  $145 = $7;
  $5 = $145;
  $146 = $7;
  $147 = $146 << 1;
  $7 = $147;
 }
 if ((label|0) == 12) {
  $148 = $6;
  $149 = $5;
  $150 = $3;
  $151 = ((($150)) + 2908|0);
  $152 = (($151) + ($149<<2)|0);
  HEAP32[$152>>2] = $148;
  STACKTOP = sp;return;
 }
}
function _gen_bitlen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = $0;
 $3 = $1;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $4 = $18;
 $19 = $3;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $5 = $21;
 $22 = $3;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $6 = $25;
 $26 = $3;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $7 = $30;
 $31 = $3;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $8 = $35;
 $36 = $3;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $9 = $40;
 $16 = 0;
 $13 = 0;
 while(1) {
  $41 = $13;
  $42 = ($41|0)<=(15);
  if (!($42)) {
   break;
  }
  $43 = $13;
  $44 = $2;
  $45 = ((($44)) + 2876|0);
  $46 = (($45) + ($43<<1)|0);
  HEAP16[$46>>1] = 0;
  $47 = $13;
  $48 = (($47) + 1)|0;
  $13 = $48;
 }
 $49 = $2;
 $50 = ((($49)) + 5204|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $2;
 $53 = ((($52)) + 2908|0);
 $54 = (($53) + ($51<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $4;
 $57 = (($56) + ($55<<2)|0);
 $58 = ((($57)) + 2|0);
 HEAP16[$58>>1] = 0;
 $59 = $2;
 $60 = ((($59)) + 5204|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 1)|0;
 $10 = $62;
 while(1) {
  $63 = $10;
  $64 = ($63|0)<(573);
  if (!($64)) {
   break;
  }
  $65 = $10;
  $66 = $2;
  $67 = ((($66)) + 2908|0);
  $68 = (($67) + ($65<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $11 = $69;
  $70 = $11;
  $71 = $4;
  $72 = (($71) + ($70<<2)|0);
  $73 = ((($72)) + 2|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  $76 = $4;
  $77 = (($76) + ($75<<2)|0);
  $78 = ((($77)) + 2|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79&65535;
  $81 = (($80) + 1)|0;
  $13 = $81;
  $82 = $13;
  $83 = $9;
  $84 = ($82|0)>($83|0);
  if ($84) {
   $85 = $9;
   $13 = $85;
   $86 = $16;
   $87 = (($86) + 1)|0;
   $16 = $87;
  }
  $88 = $13;
  $89 = $88&65535;
  $90 = $11;
  $91 = $4;
  $92 = (($91) + ($90<<2)|0);
  $93 = ((($92)) + 2|0);
  HEAP16[$93>>1] = $89;
  $94 = $11;
  $95 = $5;
  $96 = ($94|0)>($95|0);
  if (!($96)) {
   $97 = $13;
   $98 = $2;
   $99 = ((($98)) + 2876|0);
   $100 = (($99) + ($97<<1)|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = (($101) + 1)<<16>>16;
   HEAP16[$100>>1] = $102;
   $14 = 0;
   $103 = $11;
   $104 = $8;
   $105 = ($103|0)>=($104|0);
   if ($105) {
    $106 = $11;
    $107 = $8;
    $108 = (($106) - ($107))|0;
    $109 = $7;
    $110 = (($109) + ($108<<2)|0);
    $111 = HEAP32[$110>>2]|0;
    $14 = $111;
   }
   $112 = $11;
   $113 = $4;
   $114 = (($113) + ($112<<2)|0);
   $115 = HEAP16[$114>>1]|0;
   $15 = $115;
   $116 = $15;
   $117 = $116&65535;
   $118 = $13;
   $119 = $14;
   $120 = (($118) + ($119))|0;
   $121 = Math_imul($117, $120)|0;
   $122 = $2;
   $123 = ((($122)) + 5800|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) + ($121))|0;
   HEAP32[$123>>2] = $125;
   $126 = $6;
   $127 = ($126|0)!=(0|0);
   if ($127) {
    $128 = $15;
    $129 = $128&65535;
    $130 = $11;
    $131 = $6;
    $132 = (($131) + ($130<<2)|0);
    $133 = ((($132)) + 2|0);
    $134 = HEAP16[$133>>1]|0;
    $135 = $134&65535;
    $136 = $14;
    $137 = (($135) + ($136))|0;
    $138 = Math_imul($129, $137)|0;
    $139 = $2;
    $140 = ((($139)) + 5804|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + ($138))|0;
    HEAP32[$140>>2] = $142;
   }
  }
  $143 = $10;
  $144 = (($143) + 1)|0;
  $10 = $144;
 }
 $145 = $16;
 $146 = ($145|0)==(0);
 if ($146) {
  STACKTOP = sp;return;
 }
 while(1) {
  $147 = $9;
  $148 = (($147) - 1)|0;
  $13 = $148;
  while(1) {
   $149 = $13;
   $150 = $2;
   $151 = ((($150)) + 2876|0);
   $152 = (($151) + ($149<<1)|0);
   $153 = HEAP16[$152>>1]|0;
   $154 = $153&65535;
   $155 = ($154|0)==(0);
   $156 = $13;
   if (!($155)) {
    break;
   }
   $157 = (($156) + -1)|0;
   $13 = $157;
  }
  $158 = $2;
  $159 = ((($158)) + 2876|0);
  $160 = (($159) + ($156<<1)|0);
  $161 = HEAP16[$160>>1]|0;
  $162 = (($161) + -1)<<16>>16;
  HEAP16[$160>>1] = $162;
  $163 = $13;
  $164 = (($163) + 1)|0;
  $165 = $2;
  $166 = ((($165)) + 2876|0);
  $167 = (($166) + ($164<<1)|0);
  $168 = HEAP16[$167>>1]|0;
  $169 = $168&65535;
  $170 = (($169) + 2)|0;
  $171 = $170&65535;
  HEAP16[$167>>1] = $171;
  $172 = $9;
  $173 = $2;
  $174 = ((($173)) + 2876|0);
  $175 = (($174) + ($172<<1)|0);
  $176 = HEAP16[$175>>1]|0;
  $177 = (($176) + -1)<<16>>16;
  HEAP16[$175>>1] = $177;
  $178 = $16;
  $179 = (($178) - 2)|0;
  $16 = $179;
  $180 = $16;
  $181 = ($180|0)>(0);
  if (!($181)) {
   break;
  }
 }
 $182 = $9;
 $13 = $182;
 while(1) {
  $183 = $13;
  $184 = ($183|0)!=(0);
  if (!($184)) {
   break;
  }
  $185 = $13;
  $186 = $2;
  $187 = ((($186)) + 2876|0);
  $188 = (($187) + ($185<<1)|0);
  $189 = HEAP16[$188>>1]|0;
  $190 = $189&65535;
  $11 = $190;
  while(1) {
   $191 = $11;
   $192 = ($191|0)!=(0);
   if (!($192)) {
    break;
   }
   $193 = $10;
   $194 = (($193) + -1)|0;
   $10 = $194;
   $195 = $2;
   $196 = ((($195)) + 2908|0);
   $197 = (($196) + ($194<<2)|0);
   $198 = HEAP32[$197>>2]|0;
   $12 = $198;
   $199 = $12;
   $200 = $5;
   $201 = ($199|0)>($200|0);
   if ($201) {
    continue;
   }
   $202 = $12;
   $203 = $4;
   $204 = (($203) + ($202<<2)|0);
   $205 = ((($204)) + 2|0);
   $206 = HEAP16[$205>>1]|0;
   $207 = $206&65535;
   $208 = $13;
   $209 = ($207|0)!=($208|0);
   if ($209) {
    $210 = $13;
    $211 = $12;
    $212 = $4;
    $213 = (($212) + ($211<<2)|0);
    $214 = ((($213)) + 2|0);
    $215 = HEAP16[$214>>1]|0;
    $216 = $215&65535;
    $217 = (($210) - ($216))|0;
    $218 = $12;
    $219 = $4;
    $220 = (($219) + ($218<<2)|0);
    $221 = HEAP16[$220>>1]|0;
    $222 = $221&65535;
    $223 = Math_imul($217, $222)|0;
    $224 = $2;
    $225 = ((($224)) + 5800|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + ($223))|0;
    HEAP32[$225>>2] = $227;
    $228 = $13;
    $229 = $228&65535;
    $230 = $12;
    $231 = $4;
    $232 = (($231) + ($230<<2)|0);
    $233 = ((($232)) + 2|0);
    HEAP16[$233>>1] = $229;
   }
   $234 = $11;
   $235 = (($234) + -1)|0;
   $11 = $235;
  }
  $236 = $13;
  $237 = (($236) + -1)|0;
  $13 = $237;
 }
 STACKTOP = sp;return;
}
function _gen_codes($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $8 = 1;
 while(1) {
  $11 = $8;
  $12 = ($11|0)<=(15);
  if (!($12)) {
   break;
  }
  $13 = $7;
  $14 = $13&65535;
  $15 = $8;
  $16 = (($15) - 1)|0;
  $17 = $5;
  $18 = (($17) + ($16<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = (($14) + ($20))|0;
  $22 = $21 << 1;
  $23 = $22&65535;
  $7 = $23;
  $24 = $8;
  $25 = (($6) + ($24<<1)|0);
  HEAP16[$25>>1] = $23;
  $26 = $8;
  $27 = (($26) + 1)|0;
  $8 = $27;
 }
 $9 = 0;
 while(1) {
  $28 = $9;
  $29 = $4;
  $30 = ($28|0)<=($29|0);
  if (!($30)) {
   break;
  }
  $31 = $9;
  $32 = $3;
  $33 = (($32) + ($31<<2)|0);
  $34 = ((($33)) + 2|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $10 = $36;
  $37 = $10;
  $38 = ($37|0)==(0);
  if (!($38)) {
   $39 = $10;
   $40 = (($6) + ($39<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = (($41) + 1)<<16>>16;
   HEAP16[$40>>1] = $42;
   $43 = $41&65535;
   $44 = $10;
   $45 = (_bi_reverse($43,$44)|0);
   $46 = $45&65535;
   $47 = $9;
   $48 = $3;
   $49 = (($48) + ($47<<2)|0);
   HEAP16[$49>>1] = $46;
  }
  $50 = $9;
  $51 = (($50) + 1)|0;
  $9 = $51;
 }
 STACKTOP = sp;return;
}
function _bi_reverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $2;
  $6 = $5 & 1;
  $7 = $4;
  $8 = $7 | $6;
  $4 = $8;
  $9 = $2;
  $10 = $9 >>> 1;
  $2 = $10;
  $11 = $4;
  $12 = $11 << 1;
  $4 = $12;
  $13 = $3;
  $14 = (($13) + -1)|0;
  $3 = $14;
  $15 = ($14|0)>(0);
  if (!($15)) {
   break;
  }
 }
 $16 = $4;
 $17 = $16 >>> 1;
 STACKTOP = sp;return ($17|0);
}
function _read_buf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 $11 = $7;
 $12 = $6;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $14 = $6;
  $7 = $14;
 }
 $15 = $7;
 $16 = ($15|0)==(0);
 if ($16) {
  $3 = 0;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 }
 $17 = $7;
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) - ($17))|0;
 HEAP32[$19>>2] = $21;
 $22 = $5;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 _memcpy(($22|0),($24|0),($25|0))|0;
 $26 = $4;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(1);
 $32 = $4;
 if ($31) {
  $33 = ((($32)) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = $7;
  $37 = (_adler32($34,$35,$36)|0);
  $38 = $4;
  $39 = ((($38)) + 48|0);
  HEAP32[$39>>2] = $37;
 } else {
  $40 = ((($32)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(2);
  if ($44) {
   $45 = $4;
   $46 = ((($45)) + 48|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $5;
   $49 = $7;
   $50 = (_crc32($47,$48,$49)|0);
   $51 = $4;
   $52 = ((($51)) + 48|0);
   HEAP32[$52>>2] = $50;
  }
 }
 $53 = $7;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + ($53)|0);
 HEAP32[$54>>2] = $56;
 $57 = $7;
 $58 = $4;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + ($57))|0;
 HEAP32[$59>>2] = $61;
 $62 = $7;
 $3 = $62;
 $63 = $3;
 STACKTOP = sp;return ($63|0);
}
function __tr_flush_bits($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _bi_flush($2);
 STACKTOP = sp;return;
}
function _crc32_little($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $6 = $8;
 $9 = $6;
 $10 = $9 ^ -1;
 $6 = $10;
 while(1) {
  $11 = $5;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $13;
  $15 = $14 & 3;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = $4;
  $19 = ((($18)) + 1|0);
  $4 = $19;
  $20 = HEAP8[$18>>0]|0;
  $21 = $20&255;
  $22 = $17 ^ $21;
  $23 = $22 & 255;
  $24 = (644 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $6;
  $27 = $26 >>> 8;
  $28 = $25 ^ $27;
  $6 = $28;
  $29 = $5;
  $30 = (($29) + -1)|0;
  $5 = $30;
 }
 $31 = $4;
 $7 = $31;
 while(1) {
  $32 = $5;
  $33 = ($32>>>0)>=(32);
  if (!($33)) {
   break;
  }
  $34 = $7;
  $35 = ((($34)) + 4|0);
  $7 = $35;
  $36 = HEAP32[$34>>2]|0;
  $37 = $6;
  $38 = $37 ^ $36;
  $6 = $38;
  $39 = $6;
  $40 = $39 & 255;
  $41 = ((3716) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $6;
  $44 = $43 >>> 8;
  $45 = $44 & 255;
  $46 = ((2692) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $42 ^ $47;
  $49 = $6;
  $50 = $49 >>> 16;
  $51 = $50 & 255;
  $52 = ((1668) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $48 ^ $53;
  $55 = $6;
  $56 = $55 >>> 24;
  $57 = (644 + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $54 ^ $58;
  $6 = $59;
  $60 = $7;
  $61 = ((($60)) + 4|0);
  $7 = $61;
  $62 = HEAP32[$60>>2]|0;
  $63 = $6;
  $64 = $63 ^ $62;
  $6 = $64;
  $65 = $6;
  $66 = $65 & 255;
  $67 = ((3716) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $6;
  $70 = $69 >>> 8;
  $71 = $70 & 255;
  $72 = ((2692) + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $68 ^ $73;
  $75 = $6;
  $76 = $75 >>> 16;
  $77 = $76 & 255;
  $78 = ((1668) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $74 ^ $79;
  $81 = $6;
  $82 = $81 >>> 24;
  $83 = (644 + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $80 ^ $84;
  $6 = $85;
  $86 = $7;
  $87 = ((($86)) + 4|0);
  $7 = $87;
  $88 = HEAP32[$86>>2]|0;
  $89 = $6;
  $90 = $89 ^ $88;
  $6 = $90;
  $91 = $6;
  $92 = $91 & 255;
  $93 = ((3716) + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $6;
  $96 = $95 >>> 8;
  $97 = $96 & 255;
  $98 = ((2692) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $94 ^ $99;
  $101 = $6;
  $102 = $101 >>> 16;
  $103 = $102 & 255;
  $104 = ((1668) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $100 ^ $105;
  $107 = $6;
  $108 = $107 >>> 24;
  $109 = (644 + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $106 ^ $110;
  $6 = $111;
  $112 = $7;
  $113 = ((($112)) + 4|0);
  $7 = $113;
  $114 = HEAP32[$112>>2]|0;
  $115 = $6;
  $116 = $115 ^ $114;
  $6 = $116;
  $117 = $6;
  $118 = $117 & 255;
  $119 = ((3716) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $6;
  $122 = $121 >>> 8;
  $123 = $122 & 255;
  $124 = ((2692) + ($123<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $120 ^ $125;
  $127 = $6;
  $128 = $127 >>> 16;
  $129 = $128 & 255;
  $130 = ((1668) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $126 ^ $131;
  $133 = $6;
  $134 = $133 >>> 24;
  $135 = (644 + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $132 ^ $136;
  $6 = $137;
  $138 = $7;
  $139 = ((($138)) + 4|0);
  $7 = $139;
  $140 = HEAP32[$138>>2]|0;
  $141 = $6;
  $142 = $141 ^ $140;
  $6 = $142;
  $143 = $6;
  $144 = $143 & 255;
  $145 = ((3716) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $6;
  $148 = $147 >>> 8;
  $149 = $148 & 255;
  $150 = ((2692) + ($149<<2)|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $146 ^ $151;
  $153 = $6;
  $154 = $153 >>> 16;
  $155 = $154 & 255;
  $156 = ((1668) + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $152 ^ $157;
  $159 = $6;
  $160 = $159 >>> 24;
  $161 = (644 + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $158 ^ $162;
  $6 = $163;
  $164 = $7;
  $165 = ((($164)) + 4|0);
  $7 = $165;
  $166 = HEAP32[$164>>2]|0;
  $167 = $6;
  $168 = $167 ^ $166;
  $6 = $168;
  $169 = $6;
  $170 = $169 & 255;
  $171 = ((3716) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $6;
  $174 = $173 >>> 8;
  $175 = $174 & 255;
  $176 = ((2692) + ($175<<2)|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $172 ^ $177;
  $179 = $6;
  $180 = $179 >>> 16;
  $181 = $180 & 255;
  $182 = ((1668) + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $178 ^ $183;
  $185 = $6;
  $186 = $185 >>> 24;
  $187 = (644 + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $184 ^ $188;
  $6 = $189;
  $190 = $7;
  $191 = ((($190)) + 4|0);
  $7 = $191;
  $192 = HEAP32[$190>>2]|0;
  $193 = $6;
  $194 = $193 ^ $192;
  $6 = $194;
  $195 = $6;
  $196 = $195 & 255;
  $197 = ((3716) + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $6;
  $200 = $199 >>> 8;
  $201 = $200 & 255;
  $202 = ((2692) + ($201<<2)|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = $198 ^ $203;
  $205 = $6;
  $206 = $205 >>> 16;
  $207 = $206 & 255;
  $208 = ((1668) + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $204 ^ $209;
  $211 = $6;
  $212 = $211 >>> 24;
  $213 = (644 + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $210 ^ $214;
  $6 = $215;
  $216 = $7;
  $217 = ((($216)) + 4|0);
  $7 = $217;
  $218 = HEAP32[$216>>2]|0;
  $219 = $6;
  $220 = $219 ^ $218;
  $6 = $220;
  $221 = $6;
  $222 = $221 & 255;
  $223 = ((3716) + ($222<<2)|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = $6;
  $226 = $225 >>> 8;
  $227 = $226 & 255;
  $228 = ((2692) + ($227<<2)|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $224 ^ $229;
  $231 = $6;
  $232 = $231 >>> 16;
  $233 = $232 & 255;
  $234 = ((1668) + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $230 ^ $235;
  $237 = $6;
  $238 = $237 >>> 24;
  $239 = (644 + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $236 ^ $240;
  $6 = $241;
  $242 = $5;
  $243 = (($242) - 32)|0;
  $5 = $243;
 }
 while(1) {
  $244 = $5;
  $245 = ($244>>>0)>=(4);
  $246 = $7;
  if (!($245)) {
   break;
  }
  $247 = ((($246)) + 4|0);
  $7 = $247;
  $248 = HEAP32[$246>>2]|0;
  $249 = $6;
  $250 = $249 ^ $248;
  $6 = $250;
  $251 = $6;
  $252 = $251 & 255;
  $253 = ((3716) + ($252<<2)|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $6;
  $256 = $255 >>> 8;
  $257 = $256 & 255;
  $258 = ((2692) + ($257<<2)|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = $254 ^ $259;
  $261 = $6;
  $262 = $261 >>> 16;
  $263 = $262 & 255;
  $264 = ((1668) + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $260 ^ $265;
  $267 = $6;
  $268 = $267 >>> 24;
  $269 = (644 + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $266 ^ $270;
  $6 = $271;
  $272 = $5;
  $273 = (($272) - 4)|0;
  $5 = $273;
 }
 $4 = $246;
 $274 = $5;
 $275 = ($274|0)!=(0);
 if (!($275)) {
  $291 = $6;
  $292 = $291 ^ -1;
  $6 = $292;
  $293 = $6;
  STACKTOP = sp;return ($293|0);
 }
 while(1) {
  $276 = $6;
  $277 = $4;
  $278 = ((($277)) + 1|0);
  $4 = $278;
  $279 = HEAP8[$277>>0]|0;
  $280 = $279&255;
  $281 = $276 ^ $280;
  $282 = $281 & 255;
  $283 = (644 + ($282<<2)|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $6;
  $286 = $285 >>> 8;
  $287 = $284 ^ $286;
  $6 = $287;
  $288 = $5;
  $289 = (($288) + -1)|0;
  $5 = $289;
  $290 = ($289|0)!=(0);
  if (!($290)) {
   break;
  }
 }
 $291 = $6;
 $292 = $291 ^ -1;
 $6 = $292;
 $293 = $6;
 STACKTOP = sp;return ($293|0);
}
function _crc32_big($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $8 >>> 24;
 $10 = $9 & 255;
 $11 = $3;
 $12 = $11 >>> 8;
 $13 = $12 & 65280;
 $14 = (($10) + ($13))|0;
 $15 = $3;
 $16 = $15 & 65280;
 $17 = $16 << 8;
 $18 = (($14) + ($17))|0;
 $19 = $3;
 $20 = $19 & 255;
 $21 = $20 << 24;
 $22 = (($18) + ($21))|0;
 $6 = $22;
 $23 = $6;
 $24 = $23 ^ -1;
 $6 = $24;
 while(1) {
  $25 = $5;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   break;
  }
  $27 = $4;
  $28 = $27;
  $29 = $28 & 3;
  $30 = ($29|0)!=(0);
  if (!($30)) {
   break;
  }
  $31 = $6;
  $32 = $31 >>> 24;
  $33 = $4;
  $34 = ((($33)) + 1|0);
  $4 = $34;
  $35 = HEAP8[$33>>0]|0;
  $36 = $35&255;
  $37 = $32 ^ $36;
  $38 = ((4740) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $6;
  $41 = $40 << 8;
  $42 = $39 ^ $41;
  $6 = $42;
  $43 = $5;
  $44 = (($43) + -1)|0;
  $5 = $44;
 }
 $45 = $4;
 $7 = $45;
 $46 = $7;
 $47 = ((($46)) + -4|0);
 $7 = $47;
 while(1) {
  $48 = $5;
  $49 = ($48>>>0)>=(32);
  if (!($49)) {
   break;
  }
  $50 = $7;
  $51 = ((($50)) + 4|0);
  $7 = $51;
  $52 = HEAP32[$51>>2]|0;
  $53 = $6;
  $54 = $53 ^ $52;
  $6 = $54;
  $55 = $6;
  $56 = $55 & 255;
  $57 = ((4740) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $6;
  $60 = $59 >>> 8;
  $61 = $60 & 255;
  $62 = ((5764) + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $58 ^ $63;
  $65 = $6;
  $66 = $65 >>> 16;
  $67 = $66 & 255;
  $68 = ((6788) + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $64 ^ $69;
  $71 = $6;
  $72 = $71 >>> 24;
  $73 = ((7812) + ($72<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $70 ^ $74;
  $6 = $75;
  $76 = $7;
  $77 = ((($76)) + 4|0);
  $7 = $77;
  $78 = HEAP32[$77>>2]|0;
  $79 = $6;
  $80 = $79 ^ $78;
  $6 = $80;
  $81 = $6;
  $82 = $81 & 255;
  $83 = ((4740) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $6;
  $86 = $85 >>> 8;
  $87 = $86 & 255;
  $88 = ((5764) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $84 ^ $89;
  $91 = $6;
  $92 = $91 >>> 16;
  $93 = $92 & 255;
  $94 = ((6788) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $90 ^ $95;
  $97 = $6;
  $98 = $97 >>> 24;
  $99 = ((7812) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $96 ^ $100;
  $6 = $101;
  $102 = $7;
  $103 = ((($102)) + 4|0);
  $7 = $103;
  $104 = HEAP32[$103>>2]|0;
  $105 = $6;
  $106 = $105 ^ $104;
  $6 = $106;
  $107 = $6;
  $108 = $107 & 255;
  $109 = ((4740) + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $6;
  $112 = $111 >>> 8;
  $113 = $112 & 255;
  $114 = ((5764) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $110 ^ $115;
  $117 = $6;
  $118 = $117 >>> 16;
  $119 = $118 & 255;
  $120 = ((6788) + ($119<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $116 ^ $121;
  $123 = $6;
  $124 = $123 >>> 24;
  $125 = ((7812) + ($124<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $122 ^ $126;
  $6 = $127;
  $128 = $7;
  $129 = ((($128)) + 4|0);
  $7 = $129;
  $130 = HEAP32[$129>>2]|0;
  $131 = $6;
  $132 = $131 ^ $130;
  $6 = $132;
  $133 = $6;
  $134 = $133 & 255;
  $135 = ((4740) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $6;
  $138 = $137 >>> 8;
  $139 = $138 & 255;
  $140 = ((5764) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $136 ^ $141;
  $143 = $6;
  $144 = $143 >>> 16;
  $145 = $144 & 255;
  $146 = ((6788) + ($145<<2)|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $142 ^ $147;
  $149 = $6;
  $150 = $149 >>> 24;
  $151 = ((7812) + ($150<<2)|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $148 ^ $152;
  $6 = $153;
  $154 = $7;
  $155 = ((($154)) + 4|0);
  $7 = $155;
  $156 = HEAP32[$155>>2]|0;
  $157 = $6;
  $158 = $157 ^ $156;
  $6 = $158;
  $159 = $6;
  $160 = $159 & 255;
  $161 = ((4740) + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $6;
  $164 = $163 >>> 8;
  $165 = $164 & 255;
  $166 = ((5764) + ($165<<2)|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $162 ^ $167;
  $169 = $6;
  $170 = $169 >>> 16;
  $171 = $170 & 255;
  $172 = ((6788) + ($171<<2)|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $168 ^ $173;
  $175 = $6;
  $176 = $175 >>> 24;
  $177 = ((7812) + ($176<<2)|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $174 ^ $178;
  $6 = $179;
  $180 = $7;
  $181 = ((($180)) + 4|0);
  $7 = $181;
  $182 = HEAP32[$181>>2]|0;
  $183 = $6;
  $184 = $183 ^ $182;
  $6 = $184;
  $185 = $6;
  $186 = $185 & 255;
  $187 = ((4740) + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $6;
  $190 = $189 >>> 8;
  $191 = $190 & 255;
  $192 = ((5764) + ($191<<2)|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $188 ^ $193;
  $195 = $6;
  $196 = $195 >>> 16;
  $197 = $196 & 255;
  $198 = ((6788) + ($197<<2)|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = $194 ^ $199;
  $201 = $6;
  $202 = $201 >>> 24;
  $203 = ((7812) + ($202<<2)|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $200 ^ $204;
  $6 = $205;
  $206 = $7;
  $207 = ((($206)) + 4|0);
  $7 = $207;
  $208 = HEAP32[$207>>2]|0;
  $209 = $6;
  $210 = $209 ^ $208;
  $6 = $210;
  $211 = $6;
  $212 = $211 & 255;
  $213 = ((4740) + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $6;
  $216 = $215 >>> 8;
  $217 = $216 & 255;
  $218 = ((5764) + ($217<<2)|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $214 ^ $219;
  $221 = $6;
  $222 = $221 >>> 16;
  $223 = $222 & 255;
  $224 = ((6788) + ($223<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $220 ^ $225;
  $227 = $6;
  $228 = $227 >>> 24;
  $229 = ((7812) + ($228<<2)|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $226 ^ $230;
  $6 = $231;
  $232 = $7;
  $233 = ((($232)) + 4|0);
  $7 = $233;
  $234 = HEAP32[$233>>2]|0;
  $235 = $6;
  $236 = $235 ^ $234;
  $6 = $236;
  $237 = $6;
  $238 = $237 & 255;
  $239 = ((4740) + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $6;
  $242 = $241 >>> 8;
  $243 = $242 & 255;
  $244 = ((5764) + ($243<<2)|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = $240 ^ $245;
  $247 = $6;
  $248 = $247 >>> 16;
  $249 = $248 & 255;
  $250 = ((6788) + ($249<<2)|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = $246 ^ $251;
  $253 = $6;
  $254 = $253 >>> 24;
  $255 = ((7812) + ($254<<2)|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = $252 ^ $256;
  $6 = $257;
  $258 = $5;
  $259 = (($258) - 32)|0;
  $5 = $259;
 }
 while(1) {
  $260 = $5;
  $261 = ($260>>>0)>=(4);
  $262 = $7;
  $263 = ((($262)) + 4|0);
  $7 = $263;
  if (!($261)) {
   break;
  }
  $264 = HEAP32[$263>>2]|0;
  $265 = $6;
  $266 = $265 ^ $264;
  $6 = $266;
  $267 = $6;
  $268 = $267 & 255;
  $269 = ((4740) + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $6;
  $272 = $271 >>> 8;
  $273 = $272 & 255;
  $274 = ((5764) + ($273<<2)|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = $270 ^ $275;
  $277 = $6;
  $278 = $277 >>> 16;
  $279 = $278 & 255;
  $280 = ((6788) + ($279<<2)|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = $276 ^ $281;
  $283 = $6;
  $284 = $283 >>> 24;
  $285 = ((7812) + ($284<<2)|0);
  $286 = HEAP32[$285>>2]|0;
  $287 = $282 ^ $286;
  $6 = $287;
  $288 = $5;
  $289 = (($288) - 4)|0;
  $5 = $289;
 }
 $290 = $7;
 $4 = $290;
 $291 = $5;
 $292 = ($291|0)!=(0);
 if (!($292)) {
  $308 = $6;
  $309 = $308 ^ -1;
  $6 = $309;
  $310 = $6;
  $311 = $310 >>> 24;
  $312 = $311 & 255;
  $313 = $6;
  $314 = $313 >>> 8;
  $315 = $314 & 65280;
  $316 = (($312) + ($315))|0;
  $317 = $6;
  $318 = $317 & 65280;
  $319 = $318 << 8;
  $320 = (($316) + ($319))|0;
  $321 = $6;
  $322 = $321 & 255;
  $323 = $322 << 24;
  $324 = (($320) + ($323))|0;
  STACKTOP = sp;return ($324|0);
 }
 while(1) {
  $293 = $6;
  $294 = $293 >>> 24;
  $295 = $4;
  $296 = ((($295)) + 1|0);
  $4 = $296;
  $297 = HEAP8[$295>>0]|0;
  $298 = $297&255;
  $299 = $294 ^ $298;
  $300 = ((4740) + ($299<<2)|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = $6;
  $303 = $302 << 8;
  $304 = $301 ^ $303;
  $6 = $304;
  $305 = $5;
  $306 = (($305) + -1)|0;
  $5 = $306;
  $307 = ($306|0)!=(0);
  if (!($307)) {
   break;
  }
 }
 $308 = $6;
 $309 = $308 ^ -1;
 $6 = $309;
 $310 = $6;
 $311 = $310 >>> 24;
 $312 = $311 & 255;
 $313 = $6;
 $314 = $313 >>> 8;
 $315 = $314 & 65280;
 $316 = (($312) + ($315))|0;
 $317 = $6;
 $318 = $317 & 65280;
 $319 = $318 << 8;
 $320 = (($316) + ($319))|0;
 $321 = $6;
 $322 = $321 & 255;
 $323 = $322 << 24;
 $324 = (($320) + ($323))|0;
 STACKTOP = sp;return ($324|0);
}
function _deflateInit2_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $18 = 1;
 $20 = $15;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  $22 = $15;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = HEAP8[15516]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($24|0)!=($26|0);
  $28 = $16;
  $29 = ($28|0)!=(56);
  $or$cond = $27 | $29;
  if (!($or$cond)) {
   $30 = $9;
   $31 = ($30|0)==(0|0);
   if ($31) {
    $8 = -2;
    $250 = $8;
    STACKTOP = sp;return ($250|0);
   }
   $32 = $9;
   $33 = ((($32)) + 24|0);
   HEAP32[$33>>2] = 0;
   $34 = $9;
   $35 = ((($34)) + 32|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if ($37) {
    $38 = $9;
    $39 = ((($38)) + 32|0);
    HEAP32[$39>>2] = 9;
    $40 = $9;
    $41 = ((($40)) + 40|0);
    HEAP32[$41>>2] = 0;
   }
   $42 = $9;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    $46 = $9;
    $47 = ((($46)) + 36|0);
    HEAP32[$47>>2] = 10;
   }
   $48 = $10;
   $49 = ($48|0)==(-1);
   if ($49) {
    $10 = 6;
   }
   $50 = $12;
   $51 = ($50|0)<(0);
   if ($51) {
    $18 = 0;
    $52 = $12;
    $53 = (0 - ($52))|0;
    $12 = $53;
   } else {
    $54 = $12;
    $55 = ($54|0)>(15);
    if ($55) {
     $18 = 2;
     $56 = $12;
     $57 = (($56) - 16)|0;
     $12 = $57;
    }
   }
   $58 = $13;
   $59 = ($58|0)<(1);
   $60 = $13;
   $61 = ($60|0)>(9);
   $or$cond3 = $59 | $61;
   $62 = $11;
   $63 = ($62|0)!=(8);
   $or$cond5 = $or$cond3 | $63;
   $64 = $12;
   $65 = ($64|0)<(8);
   $or$cond7 = $or$cond5 | $65;
   $66 = $12;
   $67 = ($66|0)>(15);
   $or$cond9 = $or$cond7 | $67;
   $68 = $10;
   $69 = ($68|0)<(0);
   $or$cond11 = $or$cond9 | $69;
   $70 = $10;
   $71 = ($70|0)>(9);
   $or$cond13 = $or$cond11 | $71;
   $72 = $14;
   $73 = ($72|0)<(0);
   $or$cond15 = $or$cond13 | $73;
   $74 = $14;
   $75 = ($74|0)>(4);
   $or$cond17 = $or$cond15 | $75;
   if ($or$cond17) {
    $8 = -2;
    $250 = $8;
    STACKTOP = sp;return ($250|0);
   }
   $76 = $12;
   $77 = ($76|0)==(8);
   if ($77) {
    $12 = 9;
   }
   $78 = $9;
   $79 = ((($78)) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $9;
   $82 = ((($81)) + 40|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (FUNCTION_TABLE_iiii[$80 & 15]($83,1,5828)|0);
   $17 = $84;
   $85 = $17;
   $86 = ($85|0)==(0|0);
   if ($86) {
    $8 = -4;
    $250 = $8;
    STACKTOP = sp;return ($250|0);
   }
   $87 = $17;
   $88 = $9;
   $89 = ((($88)) + 28|0);
   HEAP32[$89>>2] = $87;
   $90 = $9;
   $91 = $17;
   HEAP32[$91>>2] = $90;
   $92 = $18;
   $93 = $17;
   $94 = ((($93)) + 24|0);
   HEAP32[$94>>2] = $92;
   $95 = $17;
   $96 = ((($95)) + 28|0);
   HEAP32[$96>>2] = 0;
   $97 = $12;
   $98 = $17;
   $99 = ((($98)) + 48|0);
   HEAP32[$99>>2] = $97;
   $100 = $17;
   $101 = ((($100)) + 48|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = 1 << $102;
   $104 = $17;
   $105 = ((($104)) + 44|0);
   HEAP32[$105>>2] = $103;
   $106 = $17;
   $107 = ((($106)) + 44|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) - 1)|0;
   $110 = $17;
   $111 = ((($110)) + 52|0);
   HEAP32[$111>>2] = $109;
   $112 = $13;
   $113 = (($112) + 7)|0;
   $114 = $17;
   $115 = ((($114)) + 80|0);
   HEAP32[$115>>2] = $113;
   $116 = $17;
   $117 = ((($116)) + 80|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = 1 << $118;
   $120 = $17;
   $121 = ((($120)) + 76|0);
   HEAP32[$121>>2] = $119;
   $122 = $17;
   $123 = ((($122)) + 76|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) - 1)|0;
   $126 = $17;
   $127 = ((($126)) + 84|0);
   HEAP32[$127>>2] = $125;
   $128 = $17;
   $129 = ((($128)) + 80|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + 3)|0;
   $132 = (($131) - 1)|0;
   $133 = (($132>>>0) / 3)&-1;
   $134 = $17;
   $135 = ((($134)) + 88|0);
   HEAP32[$135>>2] = $133;
   $136 = $9;
   $137 = ((($136)) + 32|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $9;
   $140 = ((($139)) + 40|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $17;
   $143 = ((($142)) + 44|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (FUNCTION_TABLE_iiii[$138 & 15]($141,$144,2)|0);
   $146 = $17;
   $147 = ((($146)) + 56|0);
   HEAP32[$147>>2] = $145;
   $148 = $9;
   $149 = ((($148)) + 32|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $9;
   $152 = ((($151)) + 40|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $17;
   $155 = ((($154)) + 44|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (FUNCTION_TABLE_iiii[$150 & 15]($153,$156,2)|0);
   $158 = $17;
   $159 = ((($158)) + 64|0);
   HEAP32[$159>>2] = $157;
   $160 = $9;
   $161 = ((($160)) + 32|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = $9;
   $164 = ((($163)) + 40|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $17;
   $167 = ((($166)) + 76|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (FUNCTION_TABLE_iiii[$162 & 15]($165,$168,2)|0);
   $170 = $17;
   $171 = ((($170)) + 68|0);
   HEAP32[$171>>2] = $169;
   $172 = $17;
   $173 = ((($172)) + 5824|0);
   HEAP32[$173>>2] = 0;
   $174 = $13;
   $175 = (($174) + 6)|0;
   $176 = 1 << $175;
   $177 = $17;
   $178 = ((($177)) + 5788|0);
   HEAP32[$178>>2] = $176;
   $179 = $9;
   $180 = ((($179)) + 32|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $9;
   $183 = ((($182)) + 40|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $17;
   $186 = ((($185)) + 5788|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (FUNCTION_TABLE_iiii[$181 & 15]($184,$187,4)|0);
   $19 = $188;
   $189 = $19;
   $190 = $17;
   $191 = ((($190)) + 8|0);
   HEAP32[$191>>2] = $189;
   $192 = $17;
   $193 = ((($192)) + 5788|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $194<<2;
   $196 = $17;
   $197 = ((($196)) + 12|0);
   HEAP32[$197>>2] = $195;
   $198 = $17;
   $199 = ((($198)) + 56|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ($200|0)==(0|0);
   if (!($201)) {
    $202 = $17;
    $203 = ((($202)) + 64|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = ($204|0)==(0|0);
    if (!($205)) {
     $206 = $17;
     $207 = ((($206)) + 68|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = $17;
      $211 = ((($210)) + 8|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($212|0)==(0|0);
      if (!($213)) {
       $220 = $19;
       $221 = $17;
       $222 = ((($221)) + 5788|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($223>>>0) / 2)&-1;
       $225 = (($220) + ($224<<1)|0);
       $226 = $17;
       $227 = ((($226)) + 5796|0);
       HEAP32[$227>>2] = $225;
       $228 = $17;
       $229 = ((($228)) + 8|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = $17;
       $232 = ((($231)) + 5788|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ($233*3)|0;
       $235 = (($230) + ($234)|0);
       $236 = $17;
       $237 = ((($236)) + 5784|0);
       HEAP32[$237>>2] = $235;
       $238 = $10;
       $239 = $17;
       $240 = ((($239)) + 132|0);
       HEAP32[$240>>2] = $238;
       $241 = $14;
       $242 = $17;
       $243 = ((($242)) + 136|0);
       HEAP32[$243>>2] = $241;
       $244 = $11;
       $245 = $244&255;
       $246 = $17;
       $247 = ((($246)) + 36|0);
       HEAP8[$247>>0] = $245;
       $248 = $9;
       $249 = (_deflateReset($248)|0);
       $8 = $249;
       $250 = $8;
       STACKTOP = sp;return ($250|0);
      }
     }
    }
   }
   $214 = $17;
   $215 = ((($214)) + 4|0);
   HEAP32[$215>>2] = 666;
   $216 = HEAP32[(36)>>2]|0;
   $217 = $9;
   $218 = ((($217)) + 24|0);
   HEAP32[$218>>2] = $216;
   $219 = $9;
   (_deflateEnd($219)|0);
   $8 = -4;
   $250 = $8;
   STACKTOP = sp;return ($250|0);
  }
 }
 $8 = -6;
 $250 = $8;
 STACKTOP = sp;return ($250|0);
}
function _zcalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $5;
  $9 = $5;
  $10 = (($8) - ($9))|0;
  $11 = $4;
  $12 = (($11) + ($10))|0;
  $4 = $12;
 }
 $13 = $4;
 $14 = $5;
 $15 = Math_imul($13, $14)|0;
 $16 = (_malloc($15)|0);
 STACKTOP = sp;return ($16|0);
}
function _zcfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _free($4);
 STACKTOP = sp;return;
}
function _deflateReset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_deflateResetKeep($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  _lm_init($9);
 }
 $10 = $2;
 STACKTOP = sp;return ($10|0);
}
function _deflateResetKeep($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $2;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = $2;
   $11 = ((($10)) + 32|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = $2;
    $15 = ((($14)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if (!($17)) {
     $18 = $2;
     $19 = ((($18)) + 20|0);
     HEAP32[$19>>2] = 0;
     $20 = $2;
     $21 = ((($20)) + 8|0);
     HEAP32[$21>>2] = 0;
     $22 = $2;
     $23 = ((($22)) + 24|0);
     HEAP32[$23>>2] = 0;
     $24 = $2;
     $25 = ((($24)) + 44|0);
     HEAP32[$25>>2] = 2;
     $26 = $2;
     $27 = ((($26)) + 28|0);
     $28 = HEAP32[$27>>2]|0;
     $3 = $28;
     $29 = $3;
     $30 = ((($29)) + 20|0);
     HEAP32[$30>>2] = 0;
     $31 = $3;
     $32 = ((($31)) + 8|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $3;
     $35 = ((($34)) + 16|0);
     HEAP32[$35>>2] = $33;
     $36 = $3;
     $37 = ((($36)) + 24|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)<(0);
     if ($39) {
      $40 = $3;
      $41 = ((($40)) + 24|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (0 - ($42))|0;
      $44 = $3;
      $45 = ((($44)) + 24|0);
      HEAP32[$45>>2] = $43;
     }
     $46 = $3;
     $47 = ((($46)) + 24|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)!=(0);
     $50 = $49 ? 42 : 113;
     $51 = $3;
     $52 = ((($51)) + 4|0);
     HEAP32[$52>>2] = $50;
     $53 = $3;
     $54 = ((($53)) + 24|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(2);
     if ($56) {
      $57 = (_crc32(0,0,0)|0);
      $61 = $57;
     } else {
      $58 = (_adler32(0,0,0)|0);
      $61 = $58;
     }
     $59 = $2;
     $60 = ((($59)) + 48|0);
     HEAP32[$60>>2] = $61;
     $62 = $3;
     $63 = ((($62)) + 40|0);
     HEAP32[$63>>2] = 0;
     $64 = $3;
     __tr_init($64);
     $1 = 0;
     $65 = $1;
     STACKTOP = sp;return ($65|0);
    }
   }
  }
 }
 $1 = -2;
 $65 = $1;
 STACKTOP = sp;return ($65|0);
}
function _lm_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4<<1;
 $6 = $1;
 $7 = ((($6)) + 60|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 76|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - 1)|0;
 $12 = $1;
 $13 = ((($12)) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($11<<1)|0);
 HEAP16[$15>>1] = 0;
 $16 = $1;
 $17 = ((($16)) + 68|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = ((($19)) + 76|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) - 1)|0;
 $23 = $22<<1;
 _memset(($18|0),0,($23|0))|0;
 $24 = $1;
 $25 = ((($24)) + 132|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (52 + (($26*12)|0)|0);
 $28 = ((($27)) + 2|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $1;
 $32 = ((($31)) + 128|0);
 HEAP32[$32>>2] = $30;
 $33 = $1;
 $34 = ((($33)) + 132|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (52 + (($35*12)|0)|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = $1;
 $40 = ((($39)) + 140|0);
 HEAP32[$40>>2] = $38;
 $41 = $1;
 $42 = ((($41)) + 132|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (52 + (($43*12)|0)|0);
 $45 = ((($44)) + 4|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = $1;
 $49 = ((($48)) + 144|0);
 HEAP32[$49>>2] = $47;
 $50 = $1;
 $51 = ((($50)) + 132|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (52 + (($52*12)|0)|0);
 $54 = ((($53)) + 6|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = $55&65535;
 $57 = $1;
 $58 = ((($57)) + 124|0);
 HEAP32[$58>>2] = $56;
 $59 = $1;
 $60 = ((($59)) + 108|0);
 HEAP32[$60>>2] = 0;
 $61 = $1;
 $62 = ((($61)) + 92|0);
 HEAP32[$62>>2] = 0;
 $63 = $1;
 $64 = ((($63)) + 116|0);
 HEAP32[$64>>2] = 0;
 $65 = $1;
 $66 = ((($65)) + 5812|0);
 HEAP32[$66>>2] = 0;
 $67 = $1;
 $68 = ((($67)) + 120|0);
 HEAP32[$68>>2] = 2;
 $69 = $1;
 $70 = ((($69)) + 96|0);
 HEAP32[$70>>2] = 2;
 $71 = $1;
 $72 = ((($71)) + 104|0);
 HEAP32[$72>>2] = 0;
 $73 = $1;
 $74 = ((($73)) + 72|0);
 HEAP32[$74>>2] = 0;
 STACKTOP = sp;return;
}
function __tr_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 _tr_static_init();
 $2 = $1;
 $3 = ((($2)) + 148|0);
 $4 = $1;
 $5 = ((($4)) + 2840|0);
 HEAP32[$5>>2] = $3;
 $6 = $1;
 $7 = ((($6)) + 2840|0);
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 8836;
 $9 = $1;
 $10 = ((($9)) + 2440|0);
 $11 = $1;
 $12 = ((($11)) + 2852|0);
 HEAP32[$12>>2] = $10;
 $13 = $1;
 $14 = ((($13)) + 2852|0);
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 8856;
 $16 = $1;
 $17 = ((($16)) + 2684|0);
 $18 = $1;
 $19 = ((($18)) + 2864|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = ((($20)) + 2864|0);
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = 8876;
 $23 = $1;
 $24 = ((($23)) + 5816|0);
 HEAP16[$24>>1] = 0;
 $25 = $1;
 $26 = ((($25)) + 5820|0);
 HEAP32[$26>>2] = 0;
 $27 = $1;
 _init_block($27);
 STACKTOP = sp;return;
}
function _tr_static_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _compress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (_compress2($8,$9,$10,$11,-1)|0);
 STACKTOP = sp;return ($12|0);
}
function _deflateSetDictionary($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = $4;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  $19 = $5;
  $20 = ($19|0)==(0|0);
  $or$cond = $18 | $20;
  if (!($or$cond)) {
   $21 = $4;
   $22 = ((($21)) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $7 = $23;
   $24 = $7;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   $10 = $26;
   $27 = $10;
   $28 = ($27|0)==(2);
   do {
    if (!($28)) {
     $29 = $10;
     $30 = ($29|0)==(1);
     if ($30) {
      $31 = $7;
      $32 = ((($31)) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($33|0)!=(42);
      if ($34) {
       break;
      }
     }
     $35 = $7;
     $36 = ((($35)) + 116|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)!=(0);
     if (!($38)) {
      $39 = $10;
      $40 = ($39|0)==(1);
      if ($40) {
       $41 = $4;
       $42 = ((($41)) + 48|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = $5;
       $45 = $6;
       $46 = (_adler32($43,$44,$45)|0);
       $47 = $4;
       $48 = ((($47)) + 48|0);
       HEAP32[$48>>2] = $46;
      }
      $49 = $7;
      $50 = ((($49)) + 24|0);
      HEAP32[$50>>2] = 0;
      $51 = $6;
      $52 = $7;
      $53 = ((($52)) + 44|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($51>>>0)>=($54>>>0);
      if ($55) {
       $56 = $10;
       $57 = ($56|0)==(0);
       if ($57) {
        $58 = $7;
        $59 = ((($58)) + 76|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = (($60) - 1)|0;
        $62 = $7;
        $63 = ((($62)) + 68|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = (($64) + ($61<<1)|0);
        HEAP16[$65>>1] = 0;
        $66 = $7;
        $67 = ((($66)) + 68|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = $7;
        $70 = ((($69)) + 76|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = (($71) - 1)|0;
        $73 = $72<<1;
        _memset(($68|0),0,($73|0))|0;
        $74 = $7;
        $75 = ((($74)) + 108|0);
        HEAP32[$75>>2] = 0;
        $76 = $7;
        $77 = ((($76)) + 92|0);
        HEAP32[$77>>2] = 0;
        $78 = $7;
        $79 = ((($78)) + 5812|0);
        HEAP32[$79>>2] = 0;
       }
       $80 = $6;
       $81 = $7;
       $82 = ((($81)) + 44|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (($80) - ($83))|0;
       $85 = $5;
       $86 = (($85) + ($84)|0);
       $5 = $86;
       $87 = $7;
       $88 = ((($87)) + 44|0);
       $89 = HEAP32[$88>>2]|0;
       $6 = $89;
      }
      $90 = $4;
      $91 = ((($90)) + 4|0);
      $92 = HEAP32[$91>>2]|0;
      $11 = $92;
      $93 = $4;
      $94 = HEAP32[$93>>2]|0;
      $12 = $94;
      $95 = $6;
      $96 = $4;
      $97 = ((($96)) + 4|0);
      HEAP32[$97>>2] = $95;
      $98 = $5;
      $99 = $4;
      HEAP32[$99>>2] = $98;
      $100 = $7;
      _fill_window($100);
      while(1) {
       $101 = $7;
       $102 = ((($101)) + 116|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103>>>0)>=(3);
       $105 = $7;
       if (!($104)) {
        break;
       }
       $106 = ((($105)) + 108|0);
       $107 = HEAP32[$106>>2]|0;
       $8 = $107;
       $108 = $7;
       $109 = ((($108)) + 116|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($110) - 2)|0;
       $9 = $111;
       while(1) {
        $112 = $7;
        $113 = ((($112)) + 72|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = $7;
        $116 = ((($115)) + 88|0);
        $117 = HEAP32[$116>>2]|0;
        $118 = $114 << $117;
        $119 = $8;
        $120 = (($119) + 3)|0;
        $121 = (($120) - 1)|0;
        $122 = $7;
        $123 = ((($122)) + 56|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = (($124) + ($121)|0);
        $126 = HEAP8[$125>>0]|0;
        $127 = $126&255;
        $128 = $118 ^ $127;
        $129 = $7;
        $130 = ((($129)) + 84|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = $128 & $131;
        $133 = $7;
        $134 = ((($133)) + 72|0);
        HEAP32[$134>>2] = $132;
        $135 = $7;
        $136 = ((($135)) + 72|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = $7;
        $139 = ((($138)) + 68|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = (($140) + ($137<<1)|0);
        $142 = HEAP16[$141>>1]|0;
        $143 = $8;
        $144 = $7;
        $145 = ((($144)) + 52|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = $143 & $146;
        $148 = $7;
        $149 = ((($148)) + 64|0);
        $150 = HEAP32[$149>>2]|0;
        $151 = (($150) + ($147<<1)|0);
        HEAP16[$151>>1] = $142;
        $152 = $8;
        $153 = $152&65535;
        $154 = $7;
        $155 = ((($154)) + 72|0);
        $156 = HEAP32[$155>>2]|0;
        $157 = $7;
        $158 = ((($157)) + 68|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = (($159) + ($156<<1)|0);
        HEAP16[$160>>1] = $153;
        $161 = $8;
        $162 = (($161) + 1)|0;
        $8 = $162;
        $163 = $9;
        $164 = (($163) + -1)|0;
        $9 = $164;
        $165 = ($164|0)!=(0);
        if (!($165)) {
         break;
        }
       }
       $166 = $8;
       $167 = $7;
       $168 = ((($167)) + 108|0);
       HEAP32[$168>>2] = $166;
       $169 = $7;
       $170 = ((($169)) + 116|0);
       HEAP32[$170>>2] = 2;
       $171 = $7;
       _fill_window($171);
      }
      $172 = ((($105)) + 116|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $7;
      $175 = ((($174)) + 108|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = (($176) + ($173))|0;
      HEAP32[$175>>2] = $177;
      $178 = $7;
      $179 = ((($178)) + 108|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = $7;
      $182 = ((($181)) + 92|0);
      HEAP32[$182>>2] = $180;
      $183 = $7;
      $184 = ((($183)) + 116|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = $7;
      $187 = ((($186)) + 5812|0);
      HEAP32[$187>>2] = $185;
      $188 = $7;
      $189 = ((($188)) + 116|0);
      HEAP32[$189>>2] = 0;
      $190 = $7;
      $191 = ((($190)) + 120|0);
      HEAP32[$191>>2] = 2;
      $192 = $7;
      $193 = ((($192)) + 96|0);
      HEAP32[$193>>2] = 2;
      $194 = $7;
      $195 = ((($194)) + 104|0);
      HEAP32[$195>>2] = 0;
      $196 = $12;
      $197 = $4;
      HEAP32[$197>>2] = $196;
      $198 = $11;
      $199 = $4;
      $200 = ((($199)) + 4|0);
      HEAP32[$200>>2] = $198;
      $201 = $10;
      $202 = $7;
      $203 = ((($202)) + 24|0);
      HEAP32[$203>>2] = $201;
      $3 = 0;
      $204 = $3;
      STACKTOP = sp;return ($204|0);
     }
    }
   } while(0);
   $3 = -2;
   $204 = $3;
   STACKTOP = sp;return ($204|0);
  }
 }
 $3 = -2;
 $204 = $3;
 STACKTOP = sp;return ($204|0);
}
function _deflateParams($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = 0;
 $10 = $4;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = $4;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = $4;
   $17 = ((($16)) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $7 = $18;
   $19 = $5;
   $20 = ($19|0)==(-1);
   if ($20) {
    $5 = 6;
   }
   $21 = $5;
   $22 = ($21|0)<(0);
   $23 = $5;
   $24 = ($23|0)>(9);
   $or$cond = $22 | $24;
   $25 = $6;
   $26 = ($25|0)<(0);
   $or$cond3 = $or$cond | $26;
   $27 = $6;
   $28 = ($27|0)>(4);
   $or$cond5 = $or$cond3 | $28;
   if ($or$cond5) {
    $3 = -2;
    $97 = $3;
    STACKTOP = sp;return ($97|0);
   }
   $29 = $7;
   $30 = ((($29)) + 132|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (52 + (($31*12)|0)|0);
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $8 = $34;
   $35 = $6;
   $36 = $7;
   $37 = ((($36)) + 136|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($35|0)!=($38|0);
   if ($39) {
    label = 10;
   } else {
    $40 = $8;
    $41 = $5;
    $42 = (52 + (($41*12)|0)|0);
    $43 = ((($42)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($40|0)!=($44|0);
    if ($45) {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $46 = $4;
    $47 = ((($46)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)!=(0);
    if ($49) {
     $50 = $4;
     $51 = (_deflate($50,5)|0);
     $9 = $51;
     $52 = $9;
     $53 = ($52|0)==(-5);
     if ($53) {
      $54 = $7;
      $55 = ((($54)) + 20|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)==(0);
      if ($57) {
       $9 = 0;
      }
     }
    }
   }
   $58 = $7;
   $59 = ((($58)) + 132|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $5;
   $62 = ($60|0)!=($61|0);
   if ($62) {
    $63 = $5;
    $64 = $7;
    $65 = ((($64)) + 132|0);
    HEAP32[$65>>2] = $63;
    $66 = $5;
    $67 = (52 + (($66*12)|0)|0);
    $68 = ((($67)) + 2|0);
    $69 = HEAP16[$68>>1]|0;
    $70 = $69&65535;
    $71 = $7;
    $72 = ((($71)) + 128|0);
    HEAP32[$72>>2] = $70;
    $73 = $5;
    $74 = (52 + (($73*12)|0)|0);
    $75 = HEAP16[$74>>1]|0;
    $76 = $75&65535;
    $77 = $7;
    $78 = ((($77)) + 140|0);
    HEAP32[$78>>2] = $76;
    $79 = $5;
    $80 = (52 + (($79*12)|0)|0);
    $81 = ((($80)) + 4|0);
    $82 = HEAP16[$81>>1]|0;
    $83 = $82&65535;
    $84 = $7;
    $85 = ((($84)) + 144|0);
    HEAP32[$85>>2] = $83;
    $86 = $5;
    $87 = (52 + (($86*12)|0)|0);
    $88 = ((($87)) + 6|0);
    $89 = HEAP16[$88>>1]|0;
    $90 = $89&65535;
    $91 = $7;
    $92 = ((($91)) + 124|0);
    HEAP32[$92>>2] = $90;
   }
   $93 = $6;
   $94 = $7;
   $95 = ((($94)) + 136|0);
   HEAP32[$95>>2] = $93;
   $96 = $9;
   $3 = $96;
   $97 = $3;
   STACKTOP = sp;return ($97|0);
  }
 }
 $3 = -2;
 $97 = $3;
 STACKTOP = sp;return ($97|0);
}
function _gzclose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = -2;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 }
 $6 = $2;
 $3 = $6;
 $7 = $3;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(7247);
 $11 = $2;
 if ($10) {
  $12 = (_gzclose_r($11)|0);
  $14 = $12;
 } else {
  $13 = (_gzclose_w($11)|0);
  $14 = $13;
 }
 $1 = $14;
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _gzclose_r($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $1 = -2;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $8 = $2;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(7247);
 if ($12) {
  $1 = -2;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $13 = $5;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $5;
  $18 = ((($17)) + 84|0);
  (_inflateEnd($18)|0);
  $19 = $5;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  _free($21);
  $22 = $5;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  _free($24);
 }
 $25 = $5;
 $26 = ((($25)) + 76|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(-5);
 $29 = $28 ? -5 : 0;
 $4 = $29;
 $30 = $5;
 _gz_error($30,0,0);
 $31 = $5;
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 _free($33);
 $34 = $5;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (_close($36)|0);
 $3 = $37;
 $38 = $5;
 _free($38);
 $39 = $3;
 $40 = ($39|0)!=(0);
 $41 = $4;
 $42 = $40 ? -1 : $41;
 $1 = $42;
 $43 = $1;
 STACKTOP = sp;return ($43|0);
}
function _gzclose_w($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = -2;
  $60 = $1;
  STACKTOP = sp;return ($60|0);
 }
 $7 = $2;
 $4 = $7;
 $8 = $4;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(31153);
 if ($11) {
  $1 = -2;
  $60 = $1;
  STACKTOP = sp;return ($60|0);
 }
 $12 = $4;
 $13 = ((($12)) + 72|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 72|0);
  HEAP32[$17>>2] = 0;
  $18 = $4;
  $19 = $4;
  $20 = ((($19)) + 68|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_gz_zero($18,$21)|0);
  $23 = ($22|0)==(-1);
  if ($23) {
   $24 = $4;
   $25 = ((($24)) + 76|0);
   $26 = HEAP32[$25>>2]|0;
   $3 = $26;
  }
 }
 $27 = $4;
 $28 = (_gz_comp($27,4)|0);
 $29 = ($28|0)==(-1);
 if ($29) {
  $30 = $4;
  $31 = ((($30)) + 76|0);
  $32 = HEAP32[$31>>2]|0;
  $3 = $32;
 }
 $33 = $4;
 $34 = ((($33)) + 24|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $4;
  $38 = ((($37)) + 40|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0);
  if (!($40)) {
   $41 = $4;
   $42 = ((($41)) + 84|0);
   (_deflateEnd($42)|0);
   $43 = $4;
   $44 = ((($43)) + 36|0);
   $45 = HEAP32[$44>>2]|0;
   _free($45);
  }
  $46 = $4;
  $47 = ((($46)) + 32|0);
  $48 = HEAP32[$47>>2]|0;
  _free($48);
 }
 $49 = $4;
 _gz_error($49,0,0);
 $50 = $4;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 _free($52);
 $53 = $4;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (_close($55)|0);
 $57 = ($56|0)==(-1);
 if ($57) {
  $3 = -1;
 }
 $58 = $4;
 _free($58);
 $59 = $3;
 $1 = $59;
 $60 = $1;
 STACKTOP = sp;return ($60|0);
}
function _gz_zero($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 84|0);
 $7 = $9;
 $10 = $7;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $3;
  $15 = (_gz_comp($14,0)|0);
  $16 = ($15|0)==(-1);
  if ($16) {
   $2 = -1;
   $57 = $2;
   STACKTOP = sp;return ($57|0);
  }
 }
 $5 = 1;
 while(1) {
  $17 = $4;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   label = 15;
   break;
  }
  $19 = $3;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21>>>0)>(2147483647);
  if ($22) {
   label = 8;
  } else {
   $23 = $3;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $4;
   $27 = ($25|0)>($26|0);
   if ($27) {
    label = 8;
   } else {
    $29 = $3;
    $30 = ((($29)) + 24|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $28 = $4;
   $32 = $28;
  }
  $6 = $32;
  $33 = $5;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $3;
   $36 = ((($35)) + 32|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $6;
   _memset(($37|0),0,($38|0))|0;
   $5 = 0;
  }
  $39 = $6;
  $40 = $7;
  $41 = ((($40)) + 4|0);
  HEAP32[$41>>2] = $39;
  $42 = $3;
  $43 = ((($42)) + 32|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $7;
  HEAP32[$45>>2] = $44;
  $46 = $6;
  $47 = $3;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($46))|0;
  HEAP32[$48>>2] = $50;
  $51 = $3;
  $52 = (_gz_comp($51,0)|0);
  $53 = ($52|0)==(-1);
  if ($53) {
   label = 13;
   break;
  }
  $54 = $6;
  $55 = $4;
  $56 = (($55) - ($54))|0;
  $4 = $56;
 }
 if ((label|0) == 13) {
  $2 = -1;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 15) {
  $2 = 0;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _gz_comp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = ((($9)) + 84|0);
 $8 = $10;
 $11 = $3;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $3;
  $16 = (_gz_init($15)|0);
  $17 = ($16|0)==(-1);
  if ($17) {
   $2 = -1;
   $119 = $2;
   STACKTOP = sp;return ($119|0);
  }
 }
 $18 = $3;
 $19 = ((($18)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $3;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $8;
  $26 = HEAP32[$25>>2]|0;
  $27 = $8;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_write($24,$26,$29)|0);
  $6 = $30;
  $31 = $6;
  $32 = ($31|0)<(0);
  if (!($32)) {
   $33 = $6;
   $34 = $8;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($33|0)!=($36|0);
   if (!($37)) {
    $42 = $8;
    $43 = ((($42)) + 4|0);
    HEAP32[$43>>2] = 0;
    $2 = 0;
    $119 = $2;
    STACKTOP = sp;return ($119|0);
   }
  }
  $38 = $3;
  $39 = (___errno_location()|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (_strerror($40)|0);
  _gz_error($38,-1,$41);
  $2 = -1;
  $119 = $2;
  STACKTOP = sp;return ($119|0);
 }
 $5 = 0;
 while(1) {
  $44 = $8;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0);
  if ($47) {
   label = 13;
  } else {
   $48 = $4;
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = $4;
    $51 = ($50|0)!=(4);
    $52 = $5;
    $53 = ($52|0)==(1);
    $or$cond = $51 | $53;
    if ($or$cond) {
     label = 13;
    }
   }
  }
  if ((label|0) == 13) {
   label = 0;
   $54 = $8;
   $55 = ((($54)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $3;
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $56;
   $61 = $59;
   $62 = (($60) - ($61))|0;
   $7 = $62;
   $63 = $7;
   $64 = ($63|0)!=(0);
   if ($64) {
    $65 = $3;
    $66 = ((($65)) + 16|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $3;
    $69 = ((($68)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $7;
    $72 = (_write($67,$70,$71)|0);
    $6 = $72;
    $73 = ($72|0)<(0);
    if ($73) {
     label = 16;
     break;
    }
    $74 = $6;
    $75 = $7;
    $76 = ($74|0)!=($75|0);
    if ($76) {
     label = 16;
     break;
    }
   }
   $81 = $8;
   $82 = ((($81)) + 16|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==(0);
   if ($84) {
    $85 = $3;
    $86 = ((($85)) + 24|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $8;
    $89 = ((($88)) + 16|0);
    HEAP32[$89>>2] = $87;
    $90 = $3;
    $91 = ((($90)) + 36|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $8;
    $94 = ((($93)) + 12|0);
    HEAP32[$94>>2] = $92;
   }
   $95 = $8;
   $96 = ((($95)) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $3;
   $99 = ((($98)) + 4|0);
   HEAP32[$99>>2] = $97;
  }
  $100 = $8;
  $101 = ((($100)) + 16|0);
  $102 = HEAP32[$101>>2]|0;
  $7 = $102;
  $103 = $8;
  $104 = $4;
  $105 = (_deflate($103,$104)|0);
  $5 = $105;
  $106 = $5;
  $107 = ($106|0)==(-2);
  if ($107) {
   label = 21;
   break;
  }
  $109 = $8;
  $110 = ((($109)) + 16|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $7;
  $113 = (($112) - ($111))|0;
  $7 = $113;
  $114 = $7;
  $115 = ($114|0)!=(0);
  if (!($115)) {
   label = 23;
   break;
  }
 }
 if ((label|0) == 16) {
  $77 = $3;
  $78 = (___errno_location()|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_strerror($79)|0);
  _gz_error($77,-1,$80);
  $2 = -1;
  $119 = $2;
  STACKTOP = sp;return ($119|0);
 }
 else if ((label|0) == 21) {
  $108 = $3;
  _gz_error($108,-2,14847);
  $2 = -1;
  $119 = $2;
  STACKTOP = sp;return ($119|0);
 }
 else if ((label|0) == 23) {
  $116 = $4;
  $117 = ($116|0)==(4);
  if ($117) {
   $118 = $8;
   (_deflateReset($118)|0);
  }
  $2 = 0;
  $119 = $2;
  STACKTOP = sp;return ($119|0);
 }
 return (0)|0;
}
function _gz_error($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 80|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $3;
  $11 = ((($10)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(-4);
  if ($13) {
   $14 = $3;
   $15 = ((($14)) + 80|0);
   $16 = HEAP32[$15>>2]|0;
   _free($16);
  }
  $17 = $3;
  $18 = ((($17)) + 80|0);
  HEAP32[$18>>2] = 0;
 }
 $19 = $4;
 $20 = ($19|0)!=(0);
 $21 = $4;
 $22 = ($21|0)!=(-5);
 $or$cond = $20 & $22;
 if ($or$cond) {
  $23 = $3;
  HEAP32[$23>>2] = 0;
 }
 $24 = $4;
 $25 = $3;
 $26 = ((($25)) + 76|0);
 HEAP32[$26>>2] = $24;
 $27 = $5;
 $28 = ($27|0)==(0|0);
 $29 = $4;
 $30 = ($29|0)==(-4);
 $or$cond3 = $28 | $30;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $31 = $3;
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_strlen($33)|0);
 $35 = $5;
 $36 = (_strlen($35)|0);
 $37 = (($34) + ($36))|0;
 $38 = (($37) + 3)|0;
 $39 = (_malloc($38)|0);
 $40 = $3;
 $41 = ((($40)) + 80|0);
 HEAP32[$41>>2] = $39;
 $42 = ($39|0)==(0|0);
 $43 = $3;
 if ($42) {
  $44 = ((($43)) + 76|0);
  HEAP32[$44>>2] = -4;
  STACKTOP = sp;return;
 } else {
  $45 = ((($43)) + 80|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $3;
  $48 = ((($47)) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_strlen($49)|0);
  $51 = $5;
  $52 = (_strlen($51)|0);
  $53 = (($50) + ($52))|0;
  $54 = (($53) + 3)|0;
  $55 = $3;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  HEAP32[$vararg_buffer>>2] = $57;
  $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 14844;
  $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $58;
  (_snprintf($46,$54,14837,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function _gz_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 84|0);
 $4 = $6;
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_malloc($9)|0);
 $11 = $2;
 $12 = ((($11)) + 32|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = ((($13)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 $17 = $2;
 if ($16) {
  _gz_error($17,-4,14951);
  $1 = -1;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $18 = ((($17)) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $21 = $2;
  $22 = ((($21)) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_malloc($23)|0);
  $25 = $2;
  $26 = ((($25)) + 36|0);
  HEAP32[$26>>2] = $24;
  $27 = $2;
  $28 = ((($27)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = $2;
   $32 = ((($31)) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   _free($33);
   $34 = $2;
   _gz_error($34,-4,14951);
   $1 = -1;
   $82 = $1;
   STACKTOP = sp;return ($82|0);
  }
  $35 = $4;
  $36 = ((($35)) + 32|0);
  HEAP32[$36>>2] = 0;
  $37 = $4;
  $38 = ((($37)) + 36|0);
  HEAP32[$38>>2] = 0;
  $39 = $4;
  $40 = ((($39)) + 40|0);
  HEAP32[$40>>2] = 0;
  $41 = $4;
  $42 = $2;
  $43 = ((($42)) + 60|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $2;
  $46 = ((($45)) + 64|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_deflateInit2_($41,$44,8,31,8,$47,15516,56)|0);
  $3 = $48;
  $49 = $3;
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = $2;
   $52 = ((($51)) + 36|0);
   $53 = HEAP32[$52>>2]|0;
   _free($53);
   $54 = $2;
   $55 = ((($54)) + 32|0);
   $56 = HEAP32[$55>>2]|0;
   _free($56);
   $57 = $2;
   _gz_error($57,-4,14951);
   $1 = -1;
   $82 = $1;
   STACKTOP = sp;return ($82|0);
  }
 }
 $58 = $2;
 $59 = ((($58)) + 28|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $2;
 $62 = ((($61)) + 24|0);
 HEAP32[$62>>2] = $60;
 $63 = $2;
 $64 = ((($63)) + 40|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0);
 if (!($66)) {
  $67 = $2;
  $68 = ((($67)) + 24|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $4;
  $71 = ((($70)) + 16|0);
  HEAP32[$71>>2] = $69;
  $72 = $2;
  $73 = ((($72)) + 36|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $4;
  $76 = ((($75)) + 12|0);
  HEAP32[$76>>2] = $74;
  $77 = $4;
  $78 = ((($77)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $2;
  $81 = ((($80)) + 4|0);
  HEAP32[$81>>2] = $79;
 }
 $1 = 0;
 $82 = $1;
 STACKTOP = sp;return ($82|0);
}
function _inflateEnd($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $2;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = $2;
   $11 = ((($10)) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = $2;
    $15 = ((($14)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    $3 = $16;
    $17 = $3;
    $18 = ((($17)) + 52|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)!=(0|0);
    if ($20) {
     $21 = $2;
     $22 = ((($21)) + 36|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $2;
     $25 = ((($24)) + 40|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $3;
     $28 = ((($27)) + 52|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_vii[$23 & 15]($26,$29);
    }
    $30 = $2;
    $31 = ((($30)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $2;
    $34 = ((($33)) + 40|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $2;
    $37 = ((($36)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    FUNCTION_TABLE_vii[$32 & 15]($35,$38);
    $39 = $2;
    $40 = ((($39)) + 28|0);
    HEAP32[$40>>2] = 0;
    $1 = 0;
    $41 = $1;
    STACKTOP = sp;return ($41|0);
   }
  }
 }
 $1 = -2;
 $41 = $1;
 STACKTOP = sp;return ($41|0);
}
function _gzopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_gz_open($4,-1,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _gz_open($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = 0;
 $11 = 0;
 $12 = $4;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $3 = 0;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $14 = (_malloc(140)|0);
 $7 = $14;
 $15 = $7;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $3 = 0;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $17 = $7;
 $18 = ((($17)) + 24|0);
 HEAP32[$18>>2] = 0;
 $19 = $7;
 $20 = ((($19)) + 28|0);
 HEAP32[$20>>2] = 8192;
 $21 = $7;
 $22 = ((($21)) + 80|0);
 HEAP32[$22>>2] = 0;
 $23 = $7;
 $24 = ((($23)) + 12|0);
 HEAP32[$24>>2] = 0;
 $25 = $7;
 $26 = ((($25)) + 60|0);
 HEAP32[$26>>2] = -1;
 $27 = $7;
 $28 = ((($27)) + 64|0);
 HEAP32[$28>>2] = 0;
 $29 = $7;
 $30 = ((($29)) + 40|0);
 HEAP32[$30>>2] = 0;
 L9: while(1) {
  $31 = $6;
  $32 = HEAP8[$31>>0]|0;
  $33 = ($32<<24>>24)!=(0);
  if (!($33)) {
   break;
  }
  $34 = $6;
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)>=(48);
  if ($37) {
   $38 = $6;
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $41 = ($40|0)<=(57);
   if ($41) {
    $42 = $6;
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = (($44) - 48)|0;
    $46 = $7;
    $47 = ((($46)) + 60|0);
    HEAP32[$47>>2] = $45;
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
  L15: do {
   if ((label|0) == 10) {
    label = 0;
    $48 = $6;
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 << 24 >> 24;
    do {
     switch ($50|0) {
     case 43:  {
      label = 14;
      break L9;
      break;
     }
     case 114:  {
      $51 = $7;
      $52 = ((($51)) + 12|0);
      HEAP32[$52>>2] = 7247;
      break L15;
      break;
     }
     case 119:  {
      $53 = $7;
      $54 = ((($53)) + 12|0);
      HEAP32[$54>>2] = 31153;
      break L15;
      break;
     }
     case 97:  {
      $55 = $7;
      $56 = ((($55)) + 12|0);
      HEAP32[$56>>2] = 1;
      break L15;
      break;
     }
     case 84:  {
      $66 = $7;
      $67 = ((($66)) + 40|0);
      HEAP32[$67>>2] = 1;
      break L15;
      break;
     }
     case 101:  {
      $10 = 1;
      break L15;
      break;
     }
     case 120:  {
      $11 = 1;
      break L15;
      break;
     }
     case 102:  {
      $58 = $7;
      $59 = ((($58)) + 64|0);
      HEAP32[$59>>2] = 1;
      break L15;
      break;
     }
     case 104:  {
      $60 = $7;
      $61 = ((($60)) + 64|0);
      HEAP32[$61>>2] = 2;
      break L15;
      break;
     }
     case 82:  {
      $62 = $7;
      $63 = ((($62)) + 64|0);
      HEAP32[$63>>2] = 3;
      break L15;
      break;
     }
     case 70:  {
      $64 = $7;
      $65 = ((($64)) + 64|0);
      HEAP32[$65>>2] = 4;
      break L15;
      break;
     }
     default: {
      break L15;
     }
     }
    } while(0);
   }
  } while(0);
  $68 = $6;
  $69 = ((($68)) + 1|0);
  $6 = $69;
 }
 if ((label|0) == 14) {
  $57 = $7;
  _free($57);
  $3 = 0;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $70 = $7;
 $71 = ((($70)) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(0);
 $74 = $7;
 if ($73) {
  _free($74);
  $3 = 0;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $75 = ((($74)) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)==(7247);
 do {
  if ($77) {
   $78 = $7;
   $79 = ((($78)) + 40|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($80|0)!=(0);
   $82 = $7;
   if (!($81)) {
    $83 = ((($82)) + 40|0);
    HEAP32[$83>>2] = 1;
    break;
   }
   _free($82);
   $3 = 0;
   $161 = $3;
   STACKTOP = sp;return ($161|0);
  }
 } while(0);
 $84 = $4;
 $85 = (_strlen($84)|0);
 $8 = $85;
 $86 = $8;
 $87 = (($86) + 1)|0;
 $88 = (_malloc($87)|0);
 $89 = $7;
 $90 = ((($89)) + 20|0);
 HEAP32[$90>>2] = $88;
 $91 = $7;
 $92 = ((($91)) + 20|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)==(0|0);
 $95 = $7;
 if ($94) {
  _free($95);
  $3 = 0;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $96 = ((($95)) + 20|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $8;
 $99 = (($98) + 1)|0;
 $100 = $4;
 HEAP32[$vararg_buffer>>2] = $100;
 (_snprintf($97,$99,14886,$vararg_buffer)|0);
 $101 = $10;
 $102 = ($101|0)!=(0);
 $103 = $102 ? 524288 : 0;
 $104 = 32768 | $103;
 $105 = $7;
 $106 = ((($105)) + 12|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)==(7247);
 if ($108) {
  $120 = 0;
 } else {
  $109 = $11;
  $110 = ($109|0)!=(0);
  $111 = $110 ? 128 : 0;
  $112 = 65 | $111;
  $113 = $7;
  $114 = ((($113)) + 12|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)==(31153);
  $117 = $116 ? 512 : 1024;
  $118 = $112 | $117;
  $120 = $118;
 }
 $119 = $104 | $120;
 $9 = $119;
 $121 = $5;
 $122 = ($121|0)>(-1);
 if ($122) {
  $123 = $5;
  $129 = $123;
 } else {
  $124 = $4;
  $125 = $9;
  HEAP32[$vararg_buffer1>>2] = 438;
  $126 = (_open($124,$125,$vararg_buffer1)|0);
  $129 = $126;
 }
 $127 = $7;
 $128 = ((($127)) + 16|0);
 HEAP32[$128>>2] = $129;
 $130 = $7;
 $131 = ((($130)) + 16|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132|0)==(-1);
 $134 = $7;
 if ($133) {
  $135 = ((($134)) + 20|0);
  $136 = HEAP32[$135>>2]|0;
  _free($136);
  $137 = $7;
  _free($137);
  $3 = 0;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $138 = ((($134)) + 12|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)==(1);
 if ($140) {
  $141 = $7;
  $142 = ((($141)) + 12|0);
  HEAP32[$142>>2] = 31153;
 }
 $143 = $7;
 $144 = ((($143)) + 12|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)==(7247);
 if ($146) {
  $147 = $7;
  $148 = ((($147)) + 16|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (_lseek($149,0,1)|0);
  $151 = $7;
  $152 = ((($151)) + 48|0);
  HEAP32[$152>>2] = $150;
  $153 = $7;
  $154 = ((($153)) + 48|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)==(-1);
  if ($156) {
   $157 = $7;
   $158 = ((($157)) + 48|0);
   HEAP32[$158>>2] = 0;
  }
 }
 $159 = $7;
 _gz_reset($159);
 $160 = $7;
 $3 = $160;
 $161 = $3;
 STACKTOP = sp;return ($161|0);
}
function _gz_reset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(7247);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 52|0);
  HEAP32[$8>>2] = 0;
  $9 = $1;
  $10 = ((($9)) + 56|0);
  HEAP32[$10>>2] = 0;
  $11 = $1;
  $12 = ((($11)) + 44|0);
  HEAP32[$12>>2] = 0;
 }
 $13 = $1;
 $14 = ((($13)) + 72|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 _gz_error($15,0,0);
 $16 = $1;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = 0;
 $18 = $1;
 $19 = ((($18)) + 84|0);
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _gzrewind($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 L1: do {
  if ($5) {
   $1 = -1;
  } else {
   $6 = $2;
   $3 = $6;
   $7 = $3;
   $8 = ((($7)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(7247);
   do {
    if (!($10)) {
     $11 = $3;
     $12 = ((($11)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)!=(0);
     if ($14) {
      $15 = $3;
      $16 = ((($15)) + 76|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($17|0)!=(-5);
      if ($18) {
       break;
      }
     }
     $19 = $3;
     $20 = ((($19)) + 16|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = $3;
     $23 = ((($22)) + 48|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (_lseek($21,$24,0)|0);
     $26 = ($25|0)==(-1);
     if ($26) {
      $1 = -1;
      break L1;
     } else {
      $27 = $3;
      _gz_reset($27);
      $1 = 0;
      break L1;
     }
    }
   } while(0);
   $1 = -1;
  }
 } while(0);
 $28 = $1;
 STACKTOP = sp;return ($28|0);
}
function _gzseek64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $3 = -1;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $12 = $4;
 $9 = $12;
 $13 = $9;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(7247);
 if ($16) {
  $17 = $9;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(31153);
  if ($20) {
   $3 = -1;
   $153 = $3;
   STACKTOP = sp;return ($153|0);
  }
 }
 $21 = $9;
 $22 = ((($21)) + 76|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $9;
  $26 = ((($25)) + 76|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(-5);
  if ($28) {
   $3 = -1;
   $153 = $3;
   STACKTOP = sp;return ($153|0);
  }
 }
 $29 = $6;
 $30 = ($29|0)!=(0);
 $31 = $6;
 $32 = ($31|0)!=(1);
 $or$cond = $30 & $32;
 if ($or$cond) {
  $3 = -1;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $33 = $6;
 $34 = ($33|0)==(0);
 $35 = $9;
 if ($34) {
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($38) - ($37))|0;
  $5 = $39;
 } else {
  $40 = ((($35)) + 72|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $9;
   $44 = ((($43)) + 68|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $5;
   $47 = (($46) + ($45))|0;
   $5 = $47;
  }
 }
 $48 = $9;
 $49 = ((($48)) + 72|0);
 HEAP32[$49>>2] = 0;
 $50 = $9;
 $51 = ((($50)) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(7247);
 if ($53) {
  $54 = $9;
  $55 = ((($54)) + 44|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(1);
  if ($57) {
   $58 = $9;
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $5;
   $62 = (($60) + ($61))|0;
   $63 = ($62|0)>=(0);
   if ($63) {
    $64 = $9;
    $65 = ((($64)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $5;
    $68 = $9;
    $69 = HEAP32[$68>>2]|0;
    $70 = (($67) - ($69))|0;
    $71 = (_lseek($66,$70,1)|0);
    $8 = $71;
    $72 = $8;
    $73 = ($72|0)==(-1);
    if ($73) {
     $3 = -1;
     $153 = $3;
     STACKTOP = sp;return ($153|0);
    } else {
     $74 = $9;
     HEAP32[$74>>2] = 0;
     $75 = $9;
     $76 = ((($75)) + 52|0);
     HEAP32[$76>>2] = 0;
     $77 = $9;
     $78 = ((($77)) + 56|0);
     HEAP32[$78>>2] = 0;
     $79 = $9;
     $80 = ((($79)) + 72|0);
     HEAP32[$80>>2] = 0;
     $81 = $9;
     _gz_error($81,0,0);
     $82 = $9;
     $83 = ((($82)) + 84|0);
     $84 = ((($83)) + 4|0);
     HEAP32[$84>>2] = 0;
     $85 = $5;
     $86 = $9;
     $87 = ((($86)) + 8|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (($88) + ($85))|0;
     HEAP32[$87>>2] = $89;
     $90 = $9;
     $91 = ((($90)) + 8|0);
     $92 = HEAP32[$91>>2]|0;
     $3 = $92;
     $153 = $3;
     STACKTOP = sp;return ($153|0);
    }
   }
  }
 }
 $93 = $5;
 $94 = ($93|0)<(0);
 if ($94) {
  $95 = $9;
  $96 = ((($95)) + 12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(7247);
  if ($98) {
   $3 = -1;
   $153 = $3;
   STACKTOP = sp;return ($153|0);
  }
  $99 = $9;
  $100 = ((($99)) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $5;
  $103 = (($102) + ($101))|0;
  $5 = $103;
  $104 = $5;
  $105 = ($104|0)<(0);
  if ($105) {
   $3 = -1;
   $153 = $3;
   STACKTOP = sp;return ($153|0);
  }
  $106 = $4;
  $107 = (_gzrewind($106)|0);
  $108 = ($107|0)==(-1);
  if ($108) {
   $3 = -1;
   $153 = $3;
   STACKTOP = sp;return ($153|0);
  }
 }
 $109 = $9;
 $110 = ((($109)) + 12|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(7247);
 if ($112) {
  $113 = $9;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114>>>0)>(2147483647);
  if ($115) {
   label = 31;
  } else {
   $116 = $9;
   $117 = HEAP32[$116>>2]|0;
   $118 = $5;
   $119 = ($117|0)>($118|0);
   if ($119) {
    label = 31;
   } else {
    $121 = $9;
    $122 = HEAP32[$121>>2]|0;
    $123 = $122;
   }
  }
  if ((label|0) == 31) {
   $120 = $5;
   $123 = $120;
  }
  $7 = $123;
  $124 = $7;
  $125 = $9;
  $126 = HEAP32[$125>>2]|0;
  $127 = (($126) - ($124))|0;
  HEAP32[$125>>2] = $127;
  $128 = $7;
  $129 = $9;
  $130 = ((($129)) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($131) + ($128)|0);
  HEAP32[$130>>2] = $132;
  $133 = $7;
  $134 = $9;
  $135 = ((($134)) + 8|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + ($133))|0;
  HEAP32[$135>>2] = $137;
  $138 = $7;
  $139 = $5;
  $140 = (($139) - ($138))|0;
  $5 = $140;
 }
 $141 = $5;
 $142 = ($141|0)!=(0);
 if ($142) {
  $143 = $9;
  $144 = ((($143)) + 72|0);
  HEAP32[$144>>2] = 1;
  $145 = $5;
  $146 = $9;
  $147 = ((($146)) + 68|0);
  HEAP32[$147>>2] = $145;
 }
 $148 = $9;
 $149 = ((($148)) + 8|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $5;
 $152 = (($150) + ($151))|0;
 $3 = $152;
 $153 = $3;
 STACKTOP = sp;return ($153|0);
}
function _gzseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = (_gzseek64($7,$8,$9)|0);
 $6 = $10;
 $11 = $6;
 $12 = $6;
 $13 = ($11|0)==($12|0);
 $14 = $6;
 $15 = $13 ? $14 : -1;
 STACKTOP = sp;return ($15|0);
}
function _gztell64($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = -1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 $6 = $2;
 $3 = $6;
 $7 = $3;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(7247);
 if ($10) {
  $11 = $3;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(31153);
  if ($14) {
   $1 = -1;
   $27 = $1;
   STACKTOP = sp;return ($27|0);
  }
 }
 $15 = $3;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $3;
 $19 = ((($18)) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $3;
  $23 = ((($22)) + 68|0);
  $24 = HEAP32[$23>>2]|0;
  $26 = $24;
 } else {
  $26 = 0;
 }
 $25 = (($17) + ($26))|0;
 $1 = $25;
 $27 = $1;
 STACKTOP = sp;return ($27|0);
}
function _gztell($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_gztell64($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = $2;
 $7 = ($5|0)==($6|0);
 $8 = $2;
 $9 = $7 ? $8 : -1;
 STACKTOP = sp;return ($9|0);
}
function _gzerror($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $8 = $3;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(7247);
 if ($12) {
  $13 = $5;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(31153);
  if ($16) {
   $2 = 0;
   $35 = $2;
   STACKTOP = sp;return ($35|0);
  }
 }
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $5;
  $20 = ((($19)) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $4;
  HEAP32[$22>>2] = $21;
 }
 $23 = $5;
 $24 = ((($23)) + 76|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(-4);
 if ($26) {
  $34 = 14951;
 } else {
  $27 = $5;
  $28 = ((($27)) + 80|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $34 = 18504;
  } else {
   $31 = $5;
   $32 = ((($31)) + 80|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33;
  }
 }
 $2 = $34;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function _gzread($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $3 = -1;
  $130 = $3;
  STACKTOP = sp;return ($130|0);
 }
 $13 = $4;
 $9 = $13;
 $14 = $9;
 $15 = ((($14)) + 84|0);
 $10 = $15;
 $16 = $9;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(7247);
 do {
  if (!($19)) {
   $20 = $9;
   $21 = ((($20)) + 76|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = $9;
    $25 = ((($24)) + 76|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)!=(-5);
    if ($27) {
     break;
    }
   }
   $28 = $6;
   $29 = ($28|0)<(0);
   if ($29) {
    $30 = $9;
    _gz_error($30,-3,15479);
    $3 = -1;
    $130 = $3;
    STACKTOP = sp;return ($130|0);
   }
   $31 = $6;
   $32 = ($31|0)==(0);
   if ($32) {
    $3 = 0;
    $130 = $3;
    STACKTOP = sp;return ($130|0);
   }
   $33 = $9;
   $34 = ((($33)) + 72|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $9;
    $38 = ((($37)) + 72|0);
    HEAP32[$38>>2] = 0;
    $39 = $9;
    $40 = $9;
    $41 = ((($40)) + 68|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (_gz_skip($39,$42)|0);
    $44 = ($43|0)==(-1);
    if ($44) {
     $3 = -1;
     $130 = $3;
     STACKTOP = sp;return ($130|0);
    }
   }
   $7 = 0;
   L23: while(1) {
    $45 = $9;
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)!=(0);
    $48 = $9;
    do {
     if ($47) {
      $49 = HEAP32[$48>>2]|0;
      $50 = $6;
      $51 = ($49>>>0)>($50>>>0);
      if ($51) {
       $52 = $6;
       $55 = $52;
      } else {
       $53 = $9;
       $54 = HEAP32[$53>>2]|0;
       $55 = $54;
      }
      HEAP32[$8>>2] = $55;
      $56 = $5;
      $57 = $9;
      $58 = ((($57)) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = HEAP32[$8>>2]|0;
      _memcpy(($56|0),($59|0),($60|0))|0;
      $61 = HEAP32[$8>>2]|0;
      $62 = $9;
      $63 = ((($62)) + 4|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (($64) + ($61)|0);
      HEAP32[$63>>2] = $65;
      $66 = HEAP32[$8>>2]|0;
      $67 = $9;
      $68 = HEAP32[$67>>2]|0;
      $69 = (($68) - ($66))|0;
      HEAP32[$67>>2] = $69;
      label = 33;
     } else {
      $70 = ((($48)) + 52|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)!=(0);
      if ($72) {
       $73 = $10;
       $74 = ((($73)) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = ($75|0)==(0);
       if ($76) {
        label = 22;
        break L23;
       }
      }
      $79 = $9;
      $80 = ((($79)) + 44|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($81|0)==(0);
      if (!($82)) {
       $83 = $6;
       $84 = $9;
       $85 = ((($84)) + 24|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = $86 << 1;
       $88 = ($83>>>0)<($87>>>0);
       if (!($88)) {
        $92 = $9;
        $93 = ((($92)) + 44|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = ($94|0)==(1);
        if ($95) {
         $96 = $9;
         $97 = $5;
         $98 = $6;
         $99 = (_gz_load($96,$97,$98,$8)|0);
         $100 = ($99|0)==(-1);
         if ($100) {
          label = 29;
          break L23;
         } else {
          label = 33;
          break;
         }
        }
        $101 = $6;
        $102 = $10;
        $103 = ((($102)) + 16|0);
        HEAP32[$103>>2] = $101;
        $104 = $5;
        $105 = $10;
        $106 = ((($105)) + 12|0);
        HEAP32[$106>>2] = $104;
        $107 = $9;
        $108 = (_gz_decomp($107)|0);
        $109 = ($108|0)==(-1);
        if ($109) {
         label = 31;
         break L23;
        }
        $110 = $9;
        $111 = HEAP32[$110>>2]|0;
        HEAP32[$8>>2] = $111;
        $112 = $9;
        HEAP32[$112>>2] = 0;
        label = 33;
        break;
       }
      }
      $89 = $9;
      $90 = (_gz_fetch($89)|0);
      $91 = ($90|0)==(-1);
      if ($91) {
       label = 26;
       break L23;
      }
     }
    } while(0);
    if ((label|0) == 33) {
     label = 0;
     $113 = HEAP32[$8>>2]|0;
     $114 = $6;
     $115 = (($114) - ($113))|0;
     $6 = $115;
     $116 = $5;
     $117 = HEAP32[$8>>2]|0;
     $118 = (($116) + ($117)|0);
     $5 = $118;
     $119 = HEAP32[$8>>2]|0;
     $120 = $7;
     $121 = (($120) + ($119))|0;
     $7 = $121;
     $122 = HEAP32[$8>>2]|0;
     $123 = $9;
     $124 = ((($123)) + 8|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($125) + ($122))|0;
     HEAP32[$124>>2] = $126;
    }
    $127 = $6;
    $128 = ($127|0)!=(0);
    if (!($128)) {
     break;
    }
   }
   if ((label|0) == 22) {
    $77 = $9;
    $78 = ((($77)) + 56|0);
    HEAP32[$78>>2] = 1;
   }
   else if ((label|0) == 26) {
    $3 = -1;
    $130 = $3;
    STACKTOP = sp;return ($130|0);
   }
   else if ((label|0) == 29) {
    $3 = -1;
    $130 = $3;
    STACKTOP = sp;return ($130|0);
   }
   else if ((label|0) == 31) {
    $3 = -1;
    $130 = $3;
    STACKTOP = sp;return ($130|0);
   }
   $129 = $7;
   $3 = $129;
   $130 = $3;
   STACKTOP = sp;return ($130|0);
  }
 } while(0);
 $3 = -1;
 $130 = $3;
 STACKTOP = sp;return ($130|0);
}
function _gz_skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 while(1) {
  $6 = $4;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   label = 13;
   break;
  }
  $8 = $3;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  $11 = $3;
  if (!($10)) {
   $39 = ((($11)) + 52|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $3;
    $43 = ((($42)) + 84|0);
    $44 = ((($43)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(0);
    if ($46) {
     label = 13;
     break;
    }
   }
   $47 = $3;
   $48 = (_gz_fetch($47)|0);
   $49 = ($48|0)==(-1);
   if ($49) {
    label = 12;
    break;
   } else {
    continue;
   }
  }
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12>>>0)>(2147483647);
  if ($13) {
   label = 6;
  } else {
   $14 = $3;
   $15 = HEAP32[$14>>2]|0;
   $16 = $4;
   $17 = ($15|0)>($16|0);
   if ($17) {
    label = 6;
   } else {
    $19 = $3;
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $18 = $4;
   $21 = $18;
  }
  $5 = $21;
  $22 = $5;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) - ($22))|0;
  HEAP32[$23>>2] = $25;
  $26 = $5;
  $27 = $3;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26)|0);
  HEAP32[$28>>2] = $30;
  $31 = $5;
  $32 = $3;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($31))|0;
  HEAP32[$33>>2] = $35;
  $36 = $5;
  $37 = $4;
  $38 = (($37) - ($36))|0;
  $4 = $38;
 }
 if ((label|0) == 12) {
  $2 = -1;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 13) {
  $2 = 0;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _gz_fetch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 84|0);
 $3 = $5;
 L1: while(1) {
  $6 = $2;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  switch ($8|0) {
  case 1:  {
   label = 7;
   break L1;
   break;
  }
  case 0:  {
   $9 = $2;
   $10 = (_gz_look($9)|0);
   $11 = ($10|0)==(-1);
   if ($11) {
    label = 4;
    break L1;
   }
   $12 = $2;
   $13 = ((($12)) + 44|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   if ($15) {
    label = 6;
    break L1;
   }
   break;
  }
  case 2:  {
   $32 = $2;
   $33 = ((($32)) + 24|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 << 1;
   $36 = $3;
   $37 = ((($36)) + 16|0);
   HEAP32[$37>>2] = $35;
   $38 = $2;
   $39 = ((($38)) + 36|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $3;
   $42 = ((($41)) + 12|0);
   HEAP32[$42>>2] = $40;
   $43 = $2;
   $44 = (_gz_decomp($43)|0);
   $45 = ($44|0)==(-1);
   if ($45) {
    label = 11;
    break L1;
   }
   break;
  }
  default: {
  }
  }
  $46 = $2;
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if (!($48)) {
   label = 15;
   break;
  }
  $49 = $2;
  $50 = ((($49)) + 52|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(0);
  if (!($52)) {
   continue;
  }
  $53 = $3;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)!=(0);
  if (!($56)) {
   label = 15;
   break;
  }
 }
 if ((label|0) == 4) {
  $1 = -1;
  $57 = $1;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 6) {
  $1 = 0;
  $57 = $1;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 7) {
  $16 = $2;
  $17 = $2;
  $18 = ((($17)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = ((($20)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 << 1;
  $24 = $2;
  $25 = (_gz_load($16,$19,$23,$24)|0);
  $26 = ($25|0)==(-1);
  if ($26) {
   $1 = -1;
   $57 = $1;
   STACKTOP = sp;return ($57|0);
  } else {
   $27 = $2;
   $28 = ((($27)) + 36|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $2;
   $31 = ((($30)) + 4|0);
   HEAP32[$31>>2] = $29;
   $1 = 0;
   $57 = $1;
   STACKTOP = sp;return ($57|0);
  }
 }
 else if ((label|0) == 11) {
  $1 = -1;
  $57 = $1;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 15) {
  $1 = 0;
  $57 = $1;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _gz_load($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $8;
 HEAP32[$10>>2] = 0;
 while(1) {
  $11 = $5;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $6;
  $15 = $8;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + ($16)|0);
  $18 = $7;
  $19 = $8;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) - ($20))|0;
  $22 = (_read($13,$17,$21)|0);
  $9 = $22;
  $23 = $9;
  $24 = ($23|0)<=(0);
  if ($24) {
   break;
  }
  $25 = $9;
  $26 = $8;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($25))|0;
  HEAP32[$26>>2] = $28;
  $29 = $8;
  $30 = HEAP32[$29>>2]|0;
  $31 = $7;
  $32 = ($30>>>0)<($31>>>0);
  if (!($32)) {
   break;
  }
 }
 $33 = $9;
 $34 = ($33|0)<(0);
 if ($34) {
  $35 = $5;
  $36 = (___errno_location()|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (_strerror($37)|0);
  _gz_error($35,-1,$38);
  $4 = -1;
  $43 = $4;
  STACKTOP = sp;return ($43|0);
 }
 $39 = $9;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = $5;
  $42 = ((($41)) + 52|0);
  HEAP32[$42>>2] = 1;
 }
 $4 = 0;
 $43 = $4;
 STACKTOP = sp;return ($43|0);
}
function _gz_decomp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = 0;
 $6 = $2;
 $7 = ((($6)) + 84|0);
 $5 = $7;
 $8 = $5;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $10;
 while(1) {
  $11 = $5;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = $2;
   $16 = (_gz_avail($15)|0);
   $17 = ($16|0)==(-1);
   if ($17) {
    label = 4;
    break;
   }
  }
  $18 = $5;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   label = 6;
   break;
  }
  $23 = $5;
  $24 = (_inflate($23,0)|0);
  $3 = $24;
  $25 = $3;
  $26 = ($25|0)==(-2);
  $27 = $3;
  $28 = ($27|0)==(2);
  $or$cond = $26 | $28;
  if ($or$cond) {
   label = 8;
   break;
  }
  $30 = $3;
  $31 = ($30|0)==(-4);
  if ($31) {
   label = 10;
   break;
  }
  $33 = $3;
  $34 = ($33|0)==(-3);
  if ($34) {
   label = 12;
   break;
  }
  $44 = $5;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0);
  $48 = $3;
  $49 = ($48|0)!=(1);
  $50 = $47 ? $49 : 0;
  if (!($50)) {
   break;
  }
 }
 if ((label|0) == 4) {
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 6) {
  $22 = $2;
  _gz_error($22,-5,14889);
 }
 else if ((label|0) == 8) {
  $29 = $2;
  _gz_error($29,-2,14912);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 10) {
  $32 = $2;
  _gz_error($32,-4,14951);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 12) {
  $35 = $2;
  $36 = $5;
  $37 = ((($36)) + 24|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if ($39) {
   $43 = 14965;
  } else {
   $40 = $5;
   $41 = ((($40)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42;
  }
  _gz_error($35,-3,$43);
  $1 = -1;
  $70 = $1;
  STACKTOP = sp;return ($70|0);
 }
 $51 = $4;
 $52 = $5;
 $53 = ((($52)) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($51) - ($54))|0;
 $56 = $2;
 HEAP32[$56>>2] = $55;
 $57 = $5;
 $58 = ((($57)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $2;
 $61 = HEAP32[$60>>2]|0;
 $62 = (0 - ($61))|0;
 $63 = (($59) + ($62)|0);
 $64 = $2;
 $65 = ((($64)) + 4|0);
 HEAP32[$65>>2] = $63;
 $66 = $3;
 $67 = ($66|0)==(1);
 if ($67) {
  $68 = $2;
  $69 = ((($68)) + 44|0);
  HEAP32[$69>>2] = 0;
 }
 $1 = 0;
 $70 = $1;
 STACKTOP = sp;return ($70|0);
}
function _gz_avail($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $2 = $0;
 $8 = $2;
 $9 = ((($8)) + 84|0);
 $4 = $9;
 $10 = $2;
 $11 = ((($10)) + 76|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(-5);
  if ($17) {
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
  }
 }
 $18 = $2;
 $19 = ((($18)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0);
 do {
  if ($21) {
   $22 = $4;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $2;
    $27 = ((($26)) + 32|0);
    $28 = HEAP32[$27>>2]|0;
    $5 = $28;
    $29 = $4;
    $30 = HEAP32[$29>>2]|0;
    $6 = $30;
    $31 = $4;
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $7 = $33;
    while(1) {
     $34 = $6;
     $35 = ((($34)) + 1|0);
     $6 = $35;
     $36 = HEAP8[$34>>0]|0;
     $37 = $5;
     $38 = ((($37)) + 1|0);
     $5 = $38;
     HEAP8[$37>>0] = $36;
     $39 = $7;
     $40 = (($39) + -1)|0;
     $7 = $40;
     $41 = ($40|0)!=(0);
     if (!($41)) {
      break;
     }
    }
   }
   $42 = $2;
   $43 = $2;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $4;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($45) + ($48)|0);
   $50 = $2;
   $51 = ((($50)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $4;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($52) - ($55))|0;
   $57 = (_gz_load($42,$49,$56,$3)|0);
   $58 = ($57|0)==(-1);
   if (!($58)) {
    $59 = HEAP32[$3>>2]|0;
    $60 = $4;
    $61 = ((($60)) + 4|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + ($59))|0;
    HEAP32[$61>>2] = $63;
    $64 = $2;
    $65 = ((($64)) + 32|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $4;
    HEAP32[$67>>2] = $66;
    break;
   }
   $1 = -1;
   $68 = $1;
   STACKTOP = sp;return ($68|0);
  }
 } while(0);
 $1 = 0;
 $68 = $1;
 STACKTOP = sp;return ($68|0);
}
function _inflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0;
 var $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0;
 var $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0;
 var $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0;
 var $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0;
 var $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0;
 var $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0;
 var $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $16 = sp + 68|0;
 $17 = sp + 64|0;
 $20 = sp + 72|0;
 $3 = $0;
 $4 = $1;
 $21 = $3;
 $22 = ($21|0)==(0|0);
 do {
  if (!($22)) {
   $23 = $3;
   $24 = ((($23)) + 28|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = $3;
    $28 = ((($27)) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if (!($30)) {
     $31 = $3;
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0|0);
     if ($33) {
      $34 = $3;
      $35 = ((($34)) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ($36|0)!=(0);
      if ($37) {
       break;
      }
     }
     $38 = $3;
     $39 = ((($38)) + 28|0);
     $40 = HEAP32[$39>>2]|0;
     $5 = $40;
     $41 = $5;
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(11);
     if ($43) {
      $44 = $5;
      HEAP32[$44>>2] = 12;
     }
     $45 = $3;
     $46 = ((($45)) + 12|0);
     $47 = HEAP32[$46>>2]|0;
     $7 = $47;
     $48 = $3;
     $49 = ((($48)) + 16|0);
     $50 = HEAP32[$49>>2]|0;
     $9 = $50;
     $51 = $3;
     $52 = HEAP32[$51>>2]|0;
     $6 = $52;
     $53 = $3;
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $8 = $55;
     $56 = $5;
     $57 = ((($56)) + 56|0);
     $58 = HEAP32[$57>>2]|0;
     $10 = $58;
     $59 = $5;
     $60 = ((($59)) + 60|0);
     $61 = HEAP32[$60>>2]|0;
     $11 = $61;
     $62 = $8;
     $12 = $62;
     $63 = $9;
     $13 = $63;
     $19 = 0;
     L11: while(1) {
      $64 = $5;
      $65 = HEAP32[$64>>2]|0;
      L13: do {
       switch ($65|0) {
       case 28:  {
        label = 302;
        break L11;
        break;
       }
       case 29:  {
        label = 303;
        break L11;
        break;
       }
       case 30:  {
        label = 304;
        break L11;
        break;
       }
       case 0:  {
        $66 = $5;
        $67 = ((($66)) + 8|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($68|0)==(0);
        if ($69) {
         $70 = $5;
         HEAP32[$70>>2] = 12;
         continue L11;
        }
        while(1) {
         $71 = $11;
         $72 = ($71>>>0)<(16);
         if (!($72)) {
          break;
         }
         $73 = $8;
         $74 = ($73|0)==(0);
         if ($74) {
          break L11;
         }
         $75 = $8;
         $76 = (($75) + -1)|0;
         $8 = $76;
         $77 = $6;
         $78 = ((($77)) + 1|0);
         $6 = $78;
         $79 = HEAP8[$77>>0]|0;
         $80 = $79&255;
         $81 = $11;
         $82 = $80 << $81;
         $83 = $10;
         $84 = (($83) + ($82))|0;
         $10 = $84;
         $85 = $11;
         $86 = (($85) + 8)|0;
         $11 = $86;
        }
        $87 = $5;
        $88 = ((($87)) + 8|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = $89 & 2;
        $91 = ($90|0)!=(0);
        $92 = $10;
        $93 = ($92|0)==(35615);
        $or$cond = $91 & $93;
        if ($or$cond) {
         $94 = (_crc32(0,0,0)|0);
         $95 = $5;
         $96 = ((($95)) + 24|0);
         HEAP32[$96>>2] = $94;
         $97 = $10;
         $98 = $97&255;
         HEAP8[$20>>0] = $98;
         $99 = $10;
         $100 = $99 >>> 8;
         $101 = $100&255;
         $102 = ((($20)) + 1|0);
         HEAP8[$102>>0] = $101;
         $103 = $5;
         $104 = ((($103)) + 24|0);
         $105 = HEAP32[$104>>2]|0;
         $106 = (_crc32($105,$20,2)|0);
         $107 = $5;
         $108 = ((($107)) + 24|0);
         HEAP32[$108>>2] = $106;
         $10 = 0;
         $11 = 0;
         $109 = $5;
         HEAP32[$109>>2] = 1;
         continue L11;
        }
        $110 = $5;
        $111 = ((($110)) + 16|0);
        HEAP32[$111>>2] = 0;
        $112 = $5;
        $113 = ((($112)) + 32|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = ($114|0)!=(0|0);
        if ($115) {
         $116 = $5;
         $117 = ((($116)) + 32|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ((($118)) + 48|0);
         HEAP32[$119>>2] = -1;
        }
        $120 = $5;
        $121 = ((($120)) + 8|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = $122 & 1;
        $124 = ($123|0)!=(0);
        if ($124) {
         $125 = $10;
         $126 = $125 & 255;
         $127 = $126 << 8;
         $128 = $10;
         $129 = $128 >>> 8;
         $130 = (($127) + ($129))|0;
         $131 = (($130>>>0) % 31)&-1;
         $132 = ($131|0)!=(0);
         if (!($132)) {
          $136 = $10;
          $137 = $136 & 15;
          $138 = ($137|0)!=(8);
          if ($138) {
           $139 = $3;
           $140 = ((($139)) + 24|0);
           HEAP32[$140>>2] = 15010;
           $141 = $5;
           HEAP32[$141>>2] = 29;
           continue L11;
          }
          $142 = $10;
          $143 = $142 >>> 4;
          $10 = $143;
          $144 = $11;
          $145 = (($144) - 4)|0;
          $11 = $145;
          $146 = $10;
          $147 = $146 & 15;
          $148 = (($147) + 8)|0;
          $18 = $148;
          $149 = $5;
          $150 = ((($149)) + 36|0);
          $151 = HEAP32[$150>>2]|0;
          $152 = ($151|0)==(0);
          $153 = $18;
          $154 = $5;
          $155 = ((($154)) + 36|0);
          if ($152) {
           HEAP32[$155>>2] = $153;
          } else {
           $156 = HEAP32[$155>>2]|0;
           $157 = ($153>>>0)>($156>>>0);
           if ($157) {
            $158 = $3;
            $159 = ((($158)) + 24|0);
            HEAP32[$159>>2] = 15037;
            $160 = $5;
            HEAP32[$160>>2] = 29;
            continue L11;
           }
          }
          $161 = $18;
          $162 = 1 << $161;
          $163 = $5;
          $164 = ((($163)) + 20|0);
          HEAP32[$164>>2] = $162;
          $165 = (_adler32(0,0,0)|0);
          $166 = $5;
          $167 = ((($166)) + 24|0);
          HEAP32[$167>>2] = $165;
          $168 = $3;
          $169 = ((($168)) + 48|0);
          HEAP32[$169>>2] = $165;
          $170 = $10;
          $171 = $170 & 512;
          $172 = ($171|0)!=(0);
          $173 = $172 ? 9 : 11;
          $174 = $5;
          HEAP32[$174>>2] = $173;
          $10 = 0;
          $11 = 0;
          continue L11;
         }
        }
        $133 = $3;
        $134 = ((($133)) + 24|0);
        HEAP32[$134>>2] = 14987;
        $135 = $5;
        HEAP32[$135>>2] = 29;
        continue L11;
        break;
       }
       case 1:  {
        while(1) {
         $175 = $11;
         $176 = ($175>>>0)<(16);
         if (!($176)) {
          break;
         }
         $177 = $8;
         $178 = ($177|0)==(0);
         if ($178) {
          break L11;
         }
         $179 = $8;
         $180 = (($179) + -1)|0;
         $8 = $180;
         $181 = $6;
         $182 = ((($181)) + 1|0);
         $6 = $182;
         $183 = HEAP8[$181>>0]|0;
         $184 = $183&255;
         $185 = $11;
         $186 = $184 << $185;
         $187 = $10;
         $188 = (($187) + ($186))|0;
         $10 = $188;
         $189 = $11;
         $190 = (($189) + 8)|0;
         $11 = $190;
        }
        $191 = $10;
        $192 = $5;
        $193 = ((($192)) + 16|0);
        HEAP32[$193>>2] = $191;
        $194 = $5;
        $195 = ((($194)) + 16|0);
        $196 = HEAP32[$195>>2]|0;
        $197 = $196 & 255;
        $198 = ($197|0)!=(8);
        if ($198) {
         $199 = $3;
         $200 = ((($199)) + 24|0);
         HEAP32[$200>>2] = 15010;
         $201 = $5;
         HEAP32[$201>>2] = 29;
         continue L11;
        }
        $202 = $5;
        $203 = ((($202)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $205 = $204 & 57344;
        $206 = ($205|0)!=(0);
        if ($206) {
         $207 = $3;
         $208 = ((($207)) + 24|0);
         HEAP32[$208>>2] = 15057;
         $209 = $5;
         HEAP32[$209>>2] = 29;
         continue L11;
        }
        $210 = $5;
        $211 = ((($210)) + 32|0);
        $212 = HEAP32[$211>>2]|0;
        $213 = ($212|0)!=(0|0);
        if ($213) {
         $214 = $10;
         $215 = $214 >>> 8;
         $216 = $215 & 1;
         $217 = $5;
         $218 = ((($217)) + 32|0);
         $219 = HEAP32[$218>>2]|0;
         HEAP32[$219>>2] = $216;
        }
        $220 = $5;
        $221 = ((($220)) + 16|0);
        $222 = HEAP32[$221>>2]|0;
        $223 = $222 & 512;
        $224 = ($223|0)!=(0);
        if ($224) {
         $225 = $10;
         $226 = $225&255;
         HEAP8[$20>>0] = $226;
         $227 = $10;
         $228 = $227 >>> 8;
         $229 = $228&255;
         $230 = ((($20)) + 1|0);
         HEAP8[$230>>0] = $229;
         $231 = $5;
         $232 = ((($231)) + 24|0);
         $233 = HEAP32[$232>>2]|0;
         $234 = (_crc32($233,$20,2)|0);
         $235 = $5;
         $236 = ((($235)) + 24|0);
         HEAP32[$236>>2] = $234;
        }
        $10 = 0;
        $11 = 0;
        $237 = $5;
        HEAP32[$237>>2] = 2;
        label = 42;
        break;
       }
       case 2:  {
        label = 42;
        break;
       }
       case 3:  {
        label = 50;
        break;
       }
       case 4:  {
        label = 58;
        break;
       }
       case 5:  {
        label = 70;
        break;
       }
       case 6:  {
        label = 85;
        break;
       }
       case 7:  {
        label = 100;
        break;
       }
       case 8:  {
        label = 115;
        break;
       }
       case 9:  {
        while(1) {
         $701 = $11;
         $702 = ($701>>>0)<(32);
         if (!($702)) {
          break;
         }
         $703 = $8;
         $704 = ($703|0)==(0);
         if ($704) {
          break L11;
         }
         $705 = $8;
         $706 = (($705) + -1)|0;
         $8 = $706;
         $707 = $6;
         $708 = ((($707)) + 1|0);
         $6 = $708;
         $709 = HEAP8[$707>>0]|0;
         $710 = $709&255;
         $711 = $11;
         $712 = $710 << $711;
         $713 = $10;
         $714 = (($713) + ($712))|0;
         $10 = $714;
         $715 = $11;
         $716 = (($715) + 8)|0;
         $11 = $716;
        }
        $717 = $10;
        $718 = $717 >>> 24;
        $719 = $718 & 255;
        $720 = $10;
        $721 = $720 >>> 8;
        $722 = $721 & 65280;
        $723 = (($719) + ($722))|0;
        $724 = $10;
        $725 = $724 & 65280;
        $726 = $725 << 8;
        $727 = (($723) + ($726))|0;
        $728 = $10;
        $729 = $728 & 255;
        $730 = $729 << 24;
        $731 = (($727) + ($730))|0;
        $732 = $5;
        $733 = ((($732)) + 24|0);
        HEAP32[$733>>2] = $731;
        $734 = $3;
        $735 = ((($734)) + 48|0);
        HEAP32[$735>>2] = $731;
        $10 = 0;
        $11 = 0;
        $736 = $5;
        HEAP32[$736>>2] = 10;
        label = 129;
        break;
       }
       case 10:  {
        label = 129;
        break;
       }
       case 11:  {
        label = 132;
        break;
       }
       case 12:  {
        label = 133;
        break;
       }
       case 13:  {
        $824 = $11;
        $825 = $824 & 7;
        $826 = $10;
        $827 = $826 >>> $825;
        $10 = $827;
        $828 = $11;
        $829 = $828 & 7;
        $830 = $11;
        $831 = (($830) - ($829))|0;
        $11 = $831;
        while(1) {
         $832 = $11;
         $833 = ($832>>>0)<(32);
         if (!($833)) {
          break;
         }
         $834 = $8;
         $835 = ($834|0)==(0);
         if ($835) {
          break L11;
         }
         $836 = $8;
         $837 = (($836) + -1)|0;
         $8 = $837;
         $838 = $6;
         $839 = ((($838)) + 1|0);
         $6 = $839;
         $840 = HEAP8[$838>>0]|0;
         $841 = $840&255;
         $842 = $11;
         $843 = $841 << $842;
         $844 = $10;
         $845 = (($844) + ($843))|0;
         $10 = $845;
         $846 = $11;
         $847 = (($846) + 8)|0;
         $11 = $847;
        }
        $848 = $10;
        $849 = $848 & 65535;
        $850 = $10;
        $851 = $850 >>> 16;
        $852 = $851 ^ 65535;
        $853 = ($849|0)!=($852|0);
        if ($853) {
         $854 = $3;
         $855 = ((($854)) + 24|0);
         HEAP32[$855>>2] = 15121;
         $856 = $5;
         HEAP32[$856>>2] = 29;
         continue L11;
        } else {
         $857 = $10;
         $858 = $857 & 65535;
         $859 = $5;
         $860 = ((($859)) + 64|0);
         HEAP32[$860>>2] = $858;
         $10 = 0;
         $11 = 0;
         $861 = $5;
         HEAP32[$861>>2] = 14;
         $862 = $4;
         $863 = ($862|0)==(6);
         if ($863) {
          break L11;
         } else {
          label = 153;
          break L13;
         }
        }
        break;
       }
       case 14:  {
        label = 153;
        break;
       }
       case 15:  {
        label = 154;
        break;
       }
       case 16:  {
        while(1) {
         $901 = $11;
         $902 = ($901>>>0)<(14);
         if (!($902)) {
          break;
         }
         $903 = $8;
         $904 = ($903|0)==(0);
         if ($904) {
          break L11;
         }
         $905 = $8;
         $906 = (($905) + -1)|0;
         $8 = $906;
         $907 = $6;
         $908 = ((($907)) + 1|0);
         $6 = $908;
         $909 = HEAP8[$907>>0]|0;
         $910 = $909&255;
         $911 = $11;
         $912 = $910 << $911;
         $913 = $10;
         $914 = (($913) + ($912))|0;
         $10 = $914;
         $915 = $11;
         $916 = (($915) + 8)|0;
         $11 = $916;
        }
        $917 = $10;
        $918 = $917 & 31;
        $919 = (($918) + 257)|0;
        $920 = $5;
        $921 = ((($920)) + 96|0);
        HEAP32[$921>>2] = $919;
        $922 = $10;
        $923 = $922 >>> 5;
        $10 = $923;
        $924 = $11;
        $925 = (($924) - 5)|0;
        $11 = $925;
        $926 = $10;
        $927 = $926 & 31;
        $928 = (($927) + 1)|0;
        $929 = $5;
        $930 = ((($929)) + 100|0);
        HEAP32[$930>>2] = $928;
        $931 = $10;
        $932 = $931 >>> 5;
        $10 = $932;
        $933 = $11;
        $934 = (($933) - 5)|0;
        $11 = $934;
        $935 = $10;
        $936 = $935 & 15;
        $937 = (($936) + 4)|0;
        $938 = $5;
        $939 = ((($938)) + 92|0);
        HEAP32[$939>>2] = $937;
        $940 = $10;
        $941 = $940 >>> 4;
        $10 = $941;
        $942 = $11;
        $943 = (($942) - 4)|0;
        $11 = $943;
        $944 = $5;
        $945 = ((($944)) + 96|0);
        $946 = HEAP32[$945>>2]|0;
        $947 = ($946>>>0)>(286);
        if (!($947)) {
         $948 = $5;
         $949 = ((($948)) + 100|0);
         $950 = HEAP32[$949>>2]|0;
         $951 = ($950>>>0)>(30);
         if (!($951)) {
          $955 = $5;
          $956 = ((($955)) + 104|0);
          HEAP32[$956>>2] = 0;
          $957 = $5;
          HEAP32[$957>>2] = 17;
          label = 169;
          break L13;
         }
        }
        $952 = $3;
        $953 = ((($952)) + 24|0);
        HEAP32[$953>>2] = 15150;
        $954 = $5;
        HEAP32[$954>>2] = 29;
        continue L11;
        break;
       }
       case 17:  {
        label = 169;
        break;
       }
       case 18:  {
        label = 179;
        break;
       }
       case 19:  {
        label = 213;
        break;
       }
       case 20:  {
        label = 214;
        break;
       }
       case 21:  {
        label = 235;
        break;
       }
       case 22:  {
        label = 241;
        break;
       }
       case 23:  {
        label = 253;
        break;
       }
       case 24:  {
        break;
       }
       case 25:  {
        $1866 = $9;
        $1867 = ($1866|0)==(0);
        if ($1867) {
         break L11;
        }
        $1868 = $5;
        $1869 = ((($1868)) + 64|0);
        $1870 = HEAP32[$1869>>2]|0;
        $1871 = $1870&255;
        $1872 = $7;
        $1873 = ((($1872)) + 1|0);
        $7 = $1873;
        HEAP8[$1872>>0] = $1871;
        $1874 = $9;
        $1875 = (($1874) + -1)|0;
        $9 = $1875;
        $1876 = $5;
        HEAP32[$1876>>2] = 20;
        continue L11;
        break;
       }
       case 26:  {
        $1877 = $5;
        $1878 = ((($1877)) + 8|0);
        $1879 = HEAP32[$1878>>2]|0;
        $1880 = ($1879|0)!=(0);
        do {
         if ($1880) {
          while(1) {
           $1881 = $11;
           $1882 = ($1881>>>0)<(32);
           if (!($1882)) {
            break;
           }
           $1883 = $8;
           $1884 = ($1883|0)==(0);
           if ($1884) {
            break L11;
           }
           $1885 = $8;
           $1886 = (($1885) + -1)|0;
           $8 = $1886;
           $1887 = $6;
           $1888 = ((($1887)) + 1|0);
           $6 = $1888;
           $1889 = HEAP8[$1887>>0]|0;
           $1890 = $1889&255;
           $1891 = $11;
           $1892 = $1890 << $1891;
           $1893 = $10;
           $1894 = (($1893) + ($1892))|0;
           $10 = $1894;
           $1895 = $11;
           $1896 = (($1895) + 8)|0;
           $11 = $1896;
          }
          $1897 = $9;
          $1898 = $13;
          $1899 = (($1898) - ($1897))|0;
          $13 = $1899;
          $1900 = $13;
          $1901 = $3;
          $1902 = ((($1901)) + 20|0);
          $1903 = HEAP32[$1902>>2]|0;
          $1904 = (($1903) + ($1900))|0;
          HEAP32[$1902>>2] = $1904;
          $1905 = $13;
          $1906 = $5;
          $1907 = ((($1906)) + 28|0);
          $1908 = HEAP32[$1907>>2]|0;
          $1909 = (($1908) + ($1905))|0;
          HEAP32[$1907>>2] = $1909;
          $1910 = $13;
          $1911 = ($1910|0)!=(0);
          if ($1911) {
           $1912 = $5;
           $1913 = ((($1912)) + 16|0);
           $1914 = HEAP32[$1913>>2]|0;
           $1915 = ($1914|0)!=(0);
           $1916 = $5;
           $1917 = ((($1916)) + 24|0);
           $1918 = HEAP32[$1917>>2]|0;
           $1919 = $7;
           $1920 = $13;
           $1921 = (0 - ($1920))|0;
           $1922 = (($1919) + ($1921)|0);
           $1923 = $13;
           if ($1915) {
            $1924 = (_crc32($1918,$1922,$1923)|0);
            $1928 = $1924;
           } else {
            $1925 = (_adler32($1918,$1922,$1923)|0);
            $1928 = $1925;
           }
           $1926 = $5;
           $1927 = ((($1926)) + 24|0);
           HEAP32[$1927>>2] = $1928;
           $1929 = $3;
           $1930 = ((($1929)) + 48|0);
           HEAP32[$1930>>2] = $1928;
          }
          $1931 = $9;
          $13 = $1931;
          $1932 = $5;
          $1933 = ((($1932)) + 16|0);
          $1934 = HEAP32[$1933>>2]|0;
          $1935 = ($1934|0)!=(0);
          $1936 = $10;
          if ($1935) {
           $1954 = $1936;
          } else {
           $1937 = $1936 >>> 24;
           $1938 = $1937 & 255;
           $1939 = $10;
           $1940 = $1939 >>> 8;
           $1941 = $1940 & 65280;
           $1942 = (($1938) + ($1941))|0;
           $1943 = $10;
           $1944 = $1943 & 65280;
           $1945 = $1944 << 8;
           $1946 = (($1942) + ($1945))|0;
           $1947 = $10;
           $1948 = $1947 & 255;
           $1949 = $1948 << 24;
           $1950 = (($1946) + ($1949))|0;
           $1954 = $1950;
          }
          $1951 = $5;
          $1952 = ((($1951)) + 24|0);
          $1953 = HEAP32[$1952>>2]|0;
          $1955 = ($1954|0)!=($1953|0);
          if ($1955) {
           $1956 = $3;
           $1957 = ((($1956)) + 24|0);
           HEAP32[$1957>>2] = 15324;
           $1958 = $5;
           HEAP32[$1958>>2] = 29;
           continue L11;
          } else {
           $10 = 0;
           $11 = 0;
           break;
          }
         }
        } while(0);
        $1959 = $5;
        HEAP32[$1959>>2] = 27;
        label = 293;
        break;
       }
       case 27:  {
        label = 293;
        break;
       }
       default: {
        label = 305;
        break L11;
       }
       }
      } while(0);
      do {
       if ((label|0) == 42) {
        while(1) {
         label = 0;
         $238 = $11;
         $239 = ($238>>>0)<(32);
         if (!($239)) {
          break;
         }
         $240 = $8;
         $241 = ($240|0)==(0);
         if ($241) {
          break L11;
         }
         $242 = $8;
         $243 = (($242) + -1)|0;
         $8 = $243;
         $244 = $6;
         $245 = ((($244)) + 1|0);
         $6 = $245;
         $246 = HEAP8[$244>>0]|0;
         $247 = $246&255;
         $248 = $11;
         $249 = $247 << $248;
         $250 = $10;
         $251 = (($250) + ($249))|0;
         $10 = $251;
         $252 = $11;
         $253 = (($252) + 8)|0;
         $11 = $253;
         label = 42;
        }
        $254 = $5;
        $255 = ((($254)) + 32|0);
        $256 = HEAP32[$255>>2]|0;
        $257 = ($256|0)!=(0|0);
        if ($257) {
         $258 = $10;
         $259 = $5;
         $260 = ((($259)) + 32|0);
         $261 = HEAP32[$260>>2]|0;
         $262 = ((($261)) + 4|0);
         HEAP32[$262>>2] = $258;
        }
        $263 = $5;
        $264 = ((($263)) + 16|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = $265 & 512;
        $267 = ($266|0)!=(0);
        if ($267) {
         $268 = $10;
         $269 = $268&255;
         HEAP8[$20>>0] = $269;
         $270 = $10;
         $271 = $270 >>> 8;
         $272 = $271&255;
         $273 = ((($20)) + 1|0);
         HEAP8[$273>>0] = $272;
         $274 = $10;
         $275 = $274 >>> 16;
         $276 = $275&255;
         $277 = ((($20)) + 2|0);
         HEAP8[$277>>0] = $276;
         $278 = $10;
         $279 = $278 >>> 24;
         $280 = $279&255;
         $281 = ((($20)) + 3|0);
         HEAP8[$281>>0] = $280;
         $282 = $5;
         $283 = ((($282)) + 24|0);
         $284 = HEAP32[$283>>2]|0;
         $285 = (_crc32($284,$20,4)|0);
         $286 = $5;
         $287 = ((($286)) + 24|0);
         HEAP32[$287>>2] = $285;
        }
        $10 = 0;
        $11 = 0;
        $288 = $5;
        HEAP32[$288>>2] = 3;
        label = 50;
       }
       else if ((label|0) == 129) {
        label = 0;
        $737 = $5;
        $738 = ((($737)) + 12|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = ($739|0)==(0);
        if ($740) {
         label = 130;
         break L11;
        }
        $758 = (_adler32(0,0,0)|0);
        $759 = $5;
        $760 = ((($759)) + 24|0);
        HEAP32[$760>>2] = $758;
        $761 = $3;
        $762 = ((($761)) + 48|0);
        HEAP32[$762>>2] = $758;
        $763 = $5;
        HEAP32[$763>>2] = 11;
        label = 132;
       }
       else if ((label|0) == 153) {
        label = 0;
        $864 = $5;
        HEAP32[$864>>2] = 15;
        label = 154;
       }
       else if ((label|0) == 169) {
        while(1) {
         label = 0;
         $958 = $5;
         $959 = ((($958)) + 104|0);
         $960 = HEAP32[$959>>2]|0;
         $961 = $5;
         $962 = ((($961)) + 92|0);
         $963 = HEAP32[$962>>2]|0;
         $964 = ($960>>>0)<($963>>>0);
         if (!($964)) {
          break;
         }
         while(1) {
          $965 = $11;
          $966 = ($965>>>0)<(3);
          if (!($966)) {
           break;
          }
          $967 = $8;
          $968 = ($967|0)==(0);
          if ($968) {
           break L11;
          }
          $969 = $8;
          $970 = (($969) + -1)|0;
          $8 = $970;
          $971 = $6;
          $972 = ((($971)) + 1|0);
          $6 = $972;
          $973 = HEAP8[$971>>0]|0;
          $974 = $973&255;
          $975 = $11;
          $976 = $974 << $975;
          $977 = $10;
          $978 = (($977) + ($976))|0;
          $10 = $978;
          $979 = $11;
          $980 = (($979) + 8)|0;
          $11 = $980;
         }
         $981 = $10;
         $982 = $981 & 7;
         $983 = $982&65535;
         $984 = $5;
         $985 = ((($984)) + 104|0);
         $986 = HEAP32[$985>>2]|0;
         $987 = (($986) + 1)|0;
         HEAP32[$985>>2] = $987;
         $988 = (10592 + ($986<<1)|0);
         $989 = HEAP16[$988>>1]|0;
         $990 = $989&65535;
         $991 = $5;
         $992 = ((($991)) + 112|0);
         $993 = (($992) + ($990<<1)|0);
         HEAP16[$993>>1] = $983;
         $994 = $10;
         $995 = $994 >>> 3;
         $10 = $995;
         $996 = $11;
         $997 = (($996) - 3)|0;
         $11 = $997;
         label = 169;
        }
        while(1) {
         $998 = $5;
         $999 = ((($998)) + 104|0);
         $1000 = HEAP32[$999>>2]|0;
         $1001 = ($1000>>>0)<(19);
         $1002 = $5;
         if (!($1001)) {
          break;
         }
         $1003 = ((($1002)) + 104|0);
         $1004 = HEAP32[$1003>>2]|0;
         $1005 = (($1004) + 1)|0;
         HEAP32[$1003>>2] = $1005;
         $1006 = (10592 + ($1004<<1)|0);
         $1007 = HEAP16[$1006>>1]|0;
         $1008 = $1007&65535;
         $1009 = $5;
         $1010 = ((($1009)) + 112|0);
         $1011 = (($1010) + ($1008<<1)|0);
         HEAP16[$1011>>1] = 0;
        }
        $1012 = ((($1002)) + 1328|0);
        $1013 = $5;
        $1014 = ((($1013)) + 108|0);
        HEAP32[$1014>>2] = $1012;
        $1015 = $5;
        $1016 = ((($1015)) + 108|0);
        $1017 = HEAP32[$1016>>2]|0;
        $1018 = $5;
        $1019 = ((($1018)) + 76|0);
        HEAP32[$1019>>2] = $1017;
        $1020 = $5;
        $1021 = ((($1020)) + 84|0);
        HEAP32[$1021>>2] = 7;
        $1022 = $5;
        $1023 = ((($1022)) + 112|0);
        $1024 = $5;
        $1025 = ((($1024)) + 108|0);
        $1026 = $5;
        $1027 = ((($1026)) + 84|0);
        $1028 = $5;
        $1029 = ((($1028)) + 752|0);
        $1030 = (_inflate_table(0,$1023,19,$1025,$1027,$1029)|0);
        $19 = $1030;
        $1031 = $19;
        $1032 = ($1031|0)!=(0);
        if ($1032) {
         $1033 = $3;
         $1034 = ((($1033)) + 24|0);
         HEAP32[$1034>>2] = 15186;
         $1035 = $5;
         HEAP32[$1035>>2] = 29;
         continue L11;
        } else {
         $1036 = $5;
         $1037 = ((($1036)) + 104|0);
         HEAP32[$1037>>2] = 0;
         $1038 = $5;
         HEAP32[$1038>>2] = 18;
         label = 179;
         break;
        }
       }
       else if ((label|0) == 293) {
        label = 0;
        $1960 = $5;
        $1961 = ((($1960)) + 8|0);
        $1962 = HEAP32[$1961>>2]|0;
        $1963 = ($1962|0)!=(0);
        if (!($1963)) {
         label = 301;
         break L11;
        }
        $1964 = $5;
        $1965 = ((($1964)) + 16|0);
        $1966 = HEAP32[$1965>>2]|0;
        $1967 = ($1966|0)!=(0);
        if (!($1967)) {
         label = 301;
         break L11;
        }
        while(1) {
         $1968 = $11;
         $1969 = ($1968>>>0)<(32);
         if (!($1969)) {
          break;
         }
         $1970 = $8;
         $1971 = ($1970|0)==(0);
         if ($1971) {
          break L11;
         }
         $1972 = $8;
         $1973 = (($1972) + -1)|0;
         $8 = $1973;
         $1974 = $6;
         $1975 = ((($1974)) + 1|0);
         $6 = $1975;
         $1976 = HEAP8[$1974>>0]|0;
         $1977 = $1976&255;
         $1978 = $11;
         $1979 = $1977 << $1978;
         $1980 = $10;
         $1981 = (($1980) + ($1979))|0;
         $10 = $1981;
         $1982 = $11;
         $1983 = (($1982) + 8)|0;
         $11 = $1983;
        }
        $1984 = $10;
        $1985 = $5;
        $1986 = ((($1985)) + 28|0);
        $1987 = HEAP32[$1986>>2]|0;
        $1988 = ($1984|0)!=($1987|0);
        if (!($1988)) {
         label = 300;
         break L11;
        }
        $1989 = $3;
        $1990 = ((($1989)) + 24|0);
        HEAP32[$1990>>2] = 15345;
        $1991 = $5;
        HEAP32[$1991>>2] = 29;
        continue L11;
       }
      } while(0);
      do {
       if ((label|0) == 50) {
        while(1) {
         label = 0;
         $289 = $11;
         $290 = ($289>>>0)<(16);
         if (!($290)) {
          break;
         }
         $291 = $8;
         $292 = ($291|0)==(0);
         if ($292) {
          break L11;
         }
         $293 = $8;
         $294 = (($293) + -1)|0;
         $8 = $294;
         $295 = $6;
         $296 = ((($295)) + 1|0);
         $6 = $296;
         $297 = HEAP8[$295>>0]|0;
         $298 = $297&255;
         $299 = $11;
         $300 = $298 << $299;
         $301 = $10;
         $302 = (($301) + ($300))|0;
         $10 = $302;
         $303 = $11;
         $304 = (($303) + 8)|0;
         $11 = $304;
         label = 50;
        }
        $305 = $5;
        $306 = ((($305)) + 32|0);
        $307 = HEAP32[$306>>2]|0;
        $308 = ($307|0)!=(0|0);
        if ($308) {
         $309 = $10;
         $310 = $309 & 255;
         $311 = $5;
         $312 = ((($311)) + 32|0);
         $313 = HEAP32[$312>>2]|0;
         $314 = ((($313)) + 8|0);
         HEAP32[$314>>2] = $310;
         $315 = $10;
         $316 = $315 >>> 8;
         $317 = $5;
         $318 = ((($317)) + 32|0);
         $319 = HEAP32[$318>>2]|0;
         $320 = ((($319)) + 12|0);
         HEAP32[$320>>2] = $316;
        }
        $321 = $5;
        $322 = ((($321)) + 16|0);
        $323 = HEAP32[$322>>2]|0;
        $324 = $323 & 512;
        $325 = ($324|0)!=(0);
        if ($325) {
         $326 = $10;
         $327 = $326&255;
         HEAP8[$20>>0] = $327;
         $328 = $10;
         $329 = $328 >>> 8;
         $330 = $329&255;
         $331 = ((($20)) + 1|0);
         HEAP8[$331>>0] = $330;
         $332 = $5;
         $333 = ((($332)) + 24|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = (_crc32($334,$20,2)|0);
         $336 = $5;
         $337 = ((($336)) + 24|0);
         HEAP32[$337>>2] = $335;
        }
        $10 = 0;
        $11 = 0;
        $338 = $5;
        HEAP32[$338>>2] = 4;
        label = 58;
       }
       else if ((label|0) == 132) {
        label = 0;
        $764 = $4;
        $765 = ($764|0)==(5);
        $766 = $4;
        $767 = ($766|0)==(6);
        $or$cond4 = $765 | $767;
        if ($or$cond4) {
         break L11;
        } else {
         label = 133;
        }
       }
       else if ((label|0) == 154) {
        label = 0;
        $865 = $5;
        $866 = ((($865)) + 64|0);
        $867 = HEAP32[$866>>2]|0;
        $14 = $867;
        $868 = $14;
        $869 = ($868|0)!=(0);
        if (!($869)) {
         $900 = $5;
         HEAP32[$900>>2] = 11;
         continue L11;
        }
        $870 = $14;
        $871 = $8;
        $872 = ($870>>>0)>($871>>>0);
        if ($872) {
         $873 = $8;
         $14 = $873;
        }
        $874 = $14;
        $875 = $9;
        $876 = ($874>>>0)>($875>>>0);
        if ($876) {
         $877 = $9;
         $14 = $877;
        }
        $878 = $14;
        $879 = ($878|0)==(0);
        if ($879) {
         break L11;
        }
        $880 = $7;
        $881 = $6;
        $882 = $14;
        _memcpy(($880|0),($881|0),($882|0))|0;
        $883 = $14;
        $884 = $8;
        $885 = (($884) - ($883))|0;
        $8 = $885;
        $886 = $14;
        $887 = $6;
        $888 = (($887) + ($886)|0);
        $6 = $888;
        $889 = $14;
        $890 = $9;
        $891 = (($890) - ($889))|0;
        $9 = $891;
        $892 = $14;
        $893 = $7;
        $894 = (($893) + ($892)|0);
        $7 = $894;
        $895 = $14;
        $896 = $5;
        $897 = ((($896)) + 64|0);
        $898 = HEAP32[$897>>2]|0;
        $899 = (($898) - ($895))|0;
        HEAP32[$897>>2] = $899;
        continue L11;
       }
       else if ((label|0) == 179) {
        L164: while(1) {
         label = 0;
         $1039 = $5;
         $1040 = ((($1039)) + 104|0);
         $1041 = HEAP32[$1040>>2]|0;
         $1042 = $5;
         $1043 = ((($1042)) + 96|0);
         $1044 = HEAP32[$1043>>2]|0;
         $1045 = $5;
         $1046 = ((($1045)) + 100|0);
         $1047 = HEAP32[$1046>>2]|0;
         $1048 = (($1044) + ($1047))|0;
         $1049 = ($1041>>>0)<($1048>>>0);
         if (!($1049)) {
          break;
         }
         while(1) {
          $1050 = $10;
          $1051 = $5;
          $1052 = ((($1051)) + 84|0);
          $1053 = HEAP32[$1052>>2]|0;
          $1054 = 1 << $1053;
          $1055 = (($1054) - 1)|0;
          $1056 = $1050 & $1055;
          $1057 = $5;
          $1058 = ((($1057)) + 76|0);
          $1059 = HEAP32[$1058>>2]|0;
          $1060 = (($1059) + ($1056<<2)|0);
          ;HEAP16[$16>>1]=HEAP16[$1060>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1060+2>>1]|0;
          $1061 = ((($16)) + 1|0);
          $1062 = HEAP8[$1061>>0]|0;
          $1063 = $1062&255;
          $1064 = $11;
          $1065 = ($1063>>>0)<=($1064>>>0);
          if ($1065) {
           break;
          }
          $1066 = $8;
          $1067 = ($1066|0)==(0);
          if ($1067) {
           break L11;
          }
          $1068 = $8;
          $1069 = (($1068) + -1)|0;
          $8 = $1069;
          $1070 = $6;
          $1071 = ((($1070)) + 1|0);
          $6 = $1071;
          $1072 = HEAP8[$1070>>0]|0;
          $1073 = $1072&255;
          $1074 = $11;
          $1075 = $1073 << $1074;
          $1076 = $10;
          $1077 = (($1076) + ($1075))|0;
          $10 = $1077;
          $1078 = $11;
          $1079 = (($1078) + 8)|0;
          $11 = $1079;
         }
         $1080 = ((($16)) + 2|0);
         $1081 = HEAP16[$1080>>1]|0;
         $1082 = $1081&65535;
         $1083 = ($1082|0)<(16);
         if ($1083) {
          $1084 = ((($16)) + 1|0);
          $1085 = HEAP8[$1084>>0]|0;
          $1086 = $1085&255;
          $1087 = $10;
          $1088 = $1087 >>> $1086;
          $10 = $1088;
          $1089 = ((($16)) + 1|0);
          $1090 = HEAP8[$1089>>0]|0;
          $1091 = $1090&255;
          $1092 = $11;
          $1093 = (($1092) - ($1091))|0;
          $11 = $1093;
          $1094 = ((($16)) + 2|0);
          $1095 = HEAP16[$1094>>1]|0;
          $1096 = $5;
          $1097 = ((($1096)) + 104|0);
          $1098 = HEAP32[$1097>>2]|0;
          $1099 = (($1098) + 1)|0;
          HEAP32[$1097>>2] = $1099;
          $1100 = $5;
          $1101 = ((($1100)) + 112|0);
          $1102 = (($1101) + ($1098<<1)|0);
          HEAP16[$1102>>1] = $1095;
          label = 179;
          continue;
         }
         $1103 = ((($16)) + 2|0);
         $1104 = HEAP16[$1103>>1]|0;
         $1105 = $1104&65535;
         $1106 = ($1105|0)==(16);
         do {
          if ($1106) {
           while(1) {
            $1107 = $11;
            $1108 = ((($16)) + 1|0);
            $1109 = HEAP8[$1108>>0]|0;
            $1110 = $1109&255;
            $1111 = (($1110) + 2)|0;
            $1112 = ($1107>>>0)<($1111>>>0);
            if (!($1112)) {
             break;
            }
            $1113 = $8;
            $1114 = ($1113|0)==(0);
            if ($1114) {
             break L11;
            }
            $1115 = $8;
            $1116 = (($1115) + -1)|0;
            $8 = $1116;
            $1117 = $6;
            $1118 = ((($1117)) + 1|0);
            $6 = $1118;
            $1119 = HEAP8[$1117>>0]|0;
            $1120 = $1119&255;
            $1121 = $11;
            $1122 = $1120 << $1121;
            $1123 = $10;
            $1124 = (($1123) + ($1122))|0;
            $10 = $1124;
            $1125 = $11;
            $1126 = (($1125) + 8)|0;
            $11 = $1126;
           }
           $1127 = ((($16)) + 1|0);
           $1128 = HEAP8[$1127>>0]|0;
           $1129 = $1128&255;
           $1130 = $10;
           $1131 = $1130 >>> $1129;
           $10 = $1131;
           $1132 = ((($16)) + 1|0);
           $1133 = HEAP8[$1132>>0]|0;
           $1134 = $1133&255;
           $1135 = $11;
           $1136 = (($1135) - ($1134))|0;
           $11 = $1136;
           $1137 = $5;
           $1138 = ((($1137)) + 104|0);
           $1139 = HEAP32[$1138>>2]|0;
           $1140 = ($1139|0)==(0);
           if ($1140) {
            label = 190;
            break L164;
           }
           $1144 = $5;
           $1145 = ((($1144)) + 104|0);
           $1146 = HEAP32[$1145>>2]|0;
           $1147 = (($1146) - 1)|0;
           $1148 = $5;
           $1149 = ((($1148)) + 112|0);
           $1150 = (($1149) + ($1147<<1)|0);
           $1151 = HEAP16[$1150>>1]|0;
           $1152 = $1151&65535;
           $18 = $1152;
           $1153 = $10;
           $1154 = $1153 & 3;
           $1155 = (3 + ($1154))|0;
           $14 = $1155;
           $1156 = $10;
           $1157 = $1156 >>> 2;
           $10 = $1157;
           $1158 = $11;
           $1159 = (($1158) - 2)|0;
           $11 = $1159;
          } else {
           $1160 = ((($16)) + 2|0);
           $1161 = HEAP16[$1160>>1]|0;
           $1162 = $1161&65535;
           $1163 = ($1162|0)==(17);
           if ($1163) {
            while(1) {
             $1164 = $11;
             $1165 = ((($16)) + 1|0);
             $1166 = HEAP8[$1165>>0]|0;
             $1167 = $1166&255;
             $1168 = (($1167) + 3)|0;
             $1169 = ($1164>>>0)<($1168>>>0);
             if (!($1169)) {
              break;
             }
             $1170 = $8;
             $1171 = ($1170|0)==(0);
             if ($1171) {
              break L11;
             }
             $1172 = $8;
             $1173 = (($1172) + -1)|0;
             $8 = $1173;
             $1174 = $6;
             $1175 = ((($1174)) + 1|0);
             $6 = $1175;
             $1176 = HEAP8[$1174>>0]|0;
             $1177 = $1176&255;
             $1178 = $11;
             $1179 = $1177 << $1178;
             $1180 = $10;
             $1181 = (($1180) + ($1179))|0;
             $10 = $1181;
             $1182 = $11;
             $1183 = (($1182) + 8)|0;
             $11 = $1183;
            }
            $1184 = ((($16)) + 1|0);
            $1185 = HEAP8[$1184>>0]|0;
            $1186 = $1185&255;
            $1187 = $10;
            $1188 = $1187 >>> $1186;
            $10 = $1188;
            $1189 = ((($16)) + 1|0);
            $1190 = HEAP8[$1189>>0]|0;
            $1191 = $1190&255;
            $1192 = $11;
            $1193 = (($1192) - ($1191))|0;
            $11 = $1193;
            $18 = 0;
            $1194 = $10;
            $1195 = $1194 & 7;
            $1196 = (3 + ($1195))|0;
            $14 = $1196;
            $1197 = $10;
            $1198 = $1197 >>> 3;
            $10 = $1198;
            $1199 = $11;
            $1200 = (($1199) - 3)|0;
            $11 = $1200;
            break;
           } else {
            while(1) {
             $1201 = $11;
             $1202 = ((($16)) + 1|0);
             $1203 = HEAP8[$1202>>0]|0;
             $1204 = $1203&255;
             $1205 = (($1204) + 7)|0;
             $1206 = ($1201>>>0)<($1205>>>0);
             if (!($1206)) {
              break;
             }
             $1207 = $8;
             $1208 = ($1207|0)==(0);
             if ($1208) {
              break L11;
             }
             $1209 = $8;
             $1210 = (($1209) + -1)|0;
             $8 = $1210;
             $1211 = $6;
             $1212 = ((($1211)) + 1|0);
             $6 = $1212;
             $1213 = HEAP8[$1211>>0]|0;
             $1214 = $1213&255;
             $1215 = $11;
             $1216 = $1214 << $1215;
             $1217 = $10;
             $1218 = (($1217) + ($1216))|0;
             $10 = $1218;
             $1219 = $11;
             $1220 = (($1219) + 8)|0;
             $11 = $1220;
            }
            $1221 = ((($16)) + 1|0);
            $1222 = HEAP8[$1221>>0]|0;
            $1223 = $1222&255;
            $1224 = $10;
            $1225 = $1224 >>> $1223;
            $10 = $1225;
            $1226 = ((($16)) + 1|0);
            $1227 = HEAP8[$1226>>0]|0;
            $1228 = $1227&255;
            $1229 = $11;
            $1230 = (($1229) - ($1228))|0;
            $11 = $1230;
            $18 = 0;
            $1231 = $10;
            $1232 = $1231 & 127;
            $1233 = (11 + ($1232))|0;
            $14 = $1233;
            $1234 = $10;
            $1235 = $1234 >>> 7;
            $10 = $1235;
            $1236 = $11;
            $1237 = (($1236) - 7)|0;
            $11 = $1237;
            break;
           }
          }
         } while(0);
         $1238 = $5;
         $1239 = ((($1238)) + 104|0);
         $1240 = HEAP32[$1239>>2]|0;
         $1241 = $14;
         $1242 = (($1240) + ($1241))|0;
         $1243 = $5;
         $1244 = ((($1243)) + 96|0);
         $1245 = HEAP32[$1244>>2]|0;
         $1246 = $5;
         $1247 = ((($1246)) + 100|0);
         $1248 = HEAP32[$1247>>2]|0;
         $1249 = (($1245) + ($1248))|0;
         $1250 = ($1242>>>0)>($1249>>>0);
         if ($1250) {
          label = 202;
          break;
         }
         while(1) {
          $1254 = $14;
          $1255 = (($1254) + -1)|0;
          $14 = $1255;
          $1256 = ($1254|0)!=(0);
          if (!($1256)) {
           label = 179;
           continue L164;
          }
          $1257 = $18;
          $1258 = $1257&65535;
          $1259 = $5;
          $1260 = ((($1259)) + 104|0);
          $1261 = HEAP32[$1260>>2]|0;
          $1262 = (($1261) + 1)|0;
          HEAP32[$1260>>2] = $1262;
          $1263 = $5;
          $1264 = ((($1263)) + 112|0);
          $1265 = (($1264) + ($1261<<1)|0);
          HEAP16[$1265>>1] = $1258;
         }
        }
        if ((label|0) == 190) {
         label = 0;
         $1141 = $3;
         $1142 = ((($1141)) + 24|0);
         HEAP32[$1142>>2] = 15211;
         $1143 = $5;
         HEAP32[$1143>>2] = 29;
        }
        else if ((label|0) == 202) {
         label = 0;
         $1251 = $3;
         $1252 = ((($1251)) + 24|0);
         HEAP32[$1252>>2] = 15211;
         $1253 = $5;
         HEAP32[$1253>>2] = 29;
        }
        $1266 = $5;
        $1267 = HEAP32[$1266>>2]|0;
        $1268 = ($1267|0)==(29);
        if ($1268) {
         continue L11;
        }
        $1269 = $5;
        $1270 = ((($1269)) + 112|0);
        $1271 = ((($1270)) + 512|0);
        $1272 = HEAP16[$1271>>1]|0;
        $1273 = $1272&65535;
        $1274 = ($1273|0)==(0);
        if ($1274) {
         $1275 = $3;
         $1276 = ((($1275)) + 24|0);
         HEAP32[$1276>>2] = 15237;
         $1277 = $5;
         HEAP32[$1277>>2] = 29;
         continue L11;
        }
        $1278 = $5;
        $1279 = ((($1278)) + 1328|0);
        $1280 = $5;
        $1281 = ((($1280)) + 108|0);
        HEAP32[$1281>>2] = $1279;
        $1282 = $5;
        $1283 = ((($1282)) + 108|0);
        $1284 = HEAP32[$1283>>2]|0;
        $1285 = $5;
        $1286 = ((($1285)) + 76|0);
        HEAP32[$1286>>2] = $1284;
        $1287 = $5;
        $1288 = ((($1287)) + 84|0);
        HEAP32[$1288>>2] = 9;
        $1289 = $5;
        $1290 = ((($1289)) + 112|0);
        $1291 = $5;
        $1292 = ((($1291)) + 96|0);
        $1293 = HEAP32[$1292>>2]|0;
        $1294 = $5;
        $1295 = ((($1294)) + 108|0);
        $1296 = $5;
        $1297 = ((($1296)) + 84|0);
        $1298 = $5;
        $1299 = ((($1298)) + 752|0);
        $1300 = (_inflate_table(1,$1290,$1293,$1295,$1297,$1299)|0);
        $19 = $1300;
        $1301 = $19;
        $1302 = ($1301|0)!=(0);
        if ($1302) {
         $1303 = $3;
         $1304 = ((($1303)) + 24|0);
         HEAP32[$1304>>2] = 15274;
         $1305 = $5;
         HEAP32[$1305>>2] = 29;
         continue L11;
        }
        $1306 = $5;
        $1307 = ((($1306)) + 108|0);
        $1308 = HEAP32[$1307>>2]|0;
        $1309 = $5;
        $1310 = ((($1309)) + 80|0);
        HEAP32[$1310>>2] = $1308;
        $1311 = $5;
        $1312 = ((($1311)) + 88|0);
        HEAP32[$1312>>2] = 6;
        $1313 = $5;
        $1314 = ((($1313)) + 112|0);
        $1315 = $5;
        $1316 = ((($1315)) + 96|0);
        $1317 = HEAP32[$1316>>2]|0;
        $1318 = (($1314) + ($1317<<1)|0);
        $1319 = $5;
        $1320 = ((($1319)) + 100|0);
        $1321 = HEAP32[$1320>>2]|0;
        $1322 = $5;
        $1323 = ((($1322)) + 108|0);
        $1324 = $5;
        $1325 = ((($1324)) + 88|0);
        $1326 = $5;
        $1327 = ((($1326)) + 752|0);
        $1328 = (_inflate_table(2,$1318,$1321,$1323,$1325,$1327)|0);
        $19 = $1328;
        $1329 = $19;
        $1330 = ($1329|0)!=(0);
        if ($1330) {
         $1331 = $3;
         $1332 = ((($1331)) + 24|0);
         HEAP32[$1332>>2] = 15302;
         $1333 = $5;
         HEAP32[$1333>>2] = 29;
         continue L11;
        } else {
         $1334 = $5;
         HEAP32[$1334>>2] = 19;
         $1335 = $4;
         $1336 = ($1335|0)==(6);
         if ($1336) {
          break L11;
         } else {
          label = 213;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       label = 0;
       $339 = $5;
       $340 = ((($339)) + 16|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = $341 & 1024;
       $343 = ($342|0)!=(0);
       if ($343) {
        while(1) {
         $344 = $11;
         $345 = ($344>>>0)<(16);
         if (!($345)) {
          break;
         }
         $346 = $8;
         $347 = ($346|0)==(0);
         if ($347) {
          break L11;
         }
         $348 = $8;
         $349 = (($348) + -1)|0;
         $8 = $349;
         $350 = $6;
         $351 = ((($350)) + 1|0);
         $6 = $351;
         $352 = HEAP8[$350>>0]|0;
         $353 = $352&255;
         $354 = $11;
         $355 = $353 << $354;
         $356 = $10;
         $357 = (($356) + ($355))|0;
         $10 = $357;
         $358 = $11;
         $359 = (($358) + 8)|0;
         $11 = $359;
        }
        $360 = $10;
        $361 = $5;
        $362 = ((($361)) + 64|0);
        HEAP32[$362>>2] = $360;
        $363 = $5;
        $364 = ((($363)) + 32|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = ($365|0)!=(0|0);
        if ($366) {
         $367 = $10;
         $368 = $5;
         $369 = ((($368)) + 32|0);
         $370 = HEAP32[$369>>2]|0;
         $371 = ((($370)) + 20|0);
         HEAP32[$371>>2] = $367;
        }
        $372 = $5;
        $373 = ((($372)) + 16|0);
        $374 = HEAP32[$373>>2]|0;
        $375 = $374 & 512;
        $376 = ($375|0)!=(0);
        if ($376) {
         $377 = $10;
         $378 = $377&255;
         HEAP8[$20>>0] = $378;
         $379 = $10;
         $380 = $379 >>> 8;
         $381 = $380&255;
         $382 = ((($20)) + 1|0);
         HEAP8[$382>>0] = $381;
         $383 = $5;
         $384 = ((($383)) + 24|0);
         $385 = HEAP32[$384>>2]|0;
         $386 = (_crc32($385,$20,2)|0);
         $387 = $5;
         $388 = ((($387)) + 24|0);
         HEAP32[$388>>2] = $386;
        }
        $10 = 0;
        $11 = 0;
       } else {
        $389 = $5;
        $390 = ((($389)) + 32|0);
        $391 = HEAP32[$390>>2]|0;
        $392 = ($391|0)!=(0|0);
        if ($392) {
         $393 = $5;
         $394 = ((($393)) + 32|0);
         $395 = HEAP32[$394>>2]|0;
         $396 = ((($395)) + 16|0);
         HEAP32[$396>>2] = 0;
        }
       }
       $397 = $5;
       HEAP32[$397>>2] = 5;
       label = 70;
      }
      else if ((label|0) == 133) {
       label = 0;
       $768 = $5;
       $769 = ((($768)) + 4|0);
       $770 = HEAP32[$769>>2]|0;
       $771 = ($770|0)!=(0);
       if ($771) {
        $772 = $11;
        $773 = $772 & 7;
        $774 = $10;
        $775 = $774 >>> $773;
        $10 = $775;
        $776 = $11;
        $777 = $776 & 7;
        $778 = $11;
        $779 = (($778) - ($777))|0;
        $11 = $779;
        $780 = $5;
        HEAP32[$780>>2] = 26;
        continue;
       }
       while(1) {
        $781 = $11;
        $782 = ($781>>>0)<(3);
        if (!($782)) {
         break;
        }
        $783 = $8;
        $784 = ($783|0)==(0);
        if ($784) {
         break L11;
        }
        $785 = $8;
        $786 = (($785) + -1)|0;
        $8 = $786;
        $787 = $6;
        $788 = ((($787)) + 1|0);
        $6 = $788;
        $789 = HEAP8[$787>>0]|0;
        $790 = $789&255;
        $791 = $11;
        $792 = $790 << $791;
        $793 = $10;
        $794 = (($793) + ($792))|0;
        $10 = $794;
        $795 = $11;
        $796 = (($795) + 8)|0;
        $11 = $796;
       }
       $797 = $10;
       $798 = $797 & 1;
       $799 = $5;
       $800 = ((($799)) + 4|0);
       HEAP32[$800>>2] = $798;
       $801 = $10;
       $802 = $801 >>> 1;
       $10 = $802;
       $803 = $11;
       $804 = (($803) - 1)|0;
       $11 = $804;
       $805 = $10;
       $806 = $805 & 3;
       switch ($806|0) {
       case 0:  {
        $807 = $5;
        HEAP32[$807>>2] = 13;
        break;
       }
       case 1:  {
        $808 = $5;
        _fixedtables($808);
        $809 = $5;
        HEAP32[$809>>2] = 19;
        $810 = $4;
        $811 = ($810|0)==(6);
        if ($811) {
         label = 141;
         break L11;
        }
        break;
       }
       case 2:  {
        $816 = $5;
        HEAP32[$816>>2] = 16;
        break;
       }
       case 3:  {
        $817 = $3;
        $818 = ((($817)) + 24|0);
        HEAP32[$818>>2] = 15102;
        $819 = $5;
        HEAP32[$819>>2] = 29;
        break;
       }
       default: {
        label = 144;
        break L11;
       }
       }
       $820 = $10;
       $821 = $820 >>> 2;
       $10 = $821;
       $822 = $11;
       $823 = (($822) - 2)|0;
       $11 = $823;
       continue;
      }
      else if ((label|0) == 213) {
       label = 0;
       $1337 = $5;
       HEAP32[$1337>>2] = 20;
       label = 214;
      }
      do {
       if ((label|0) == 70) {
        label = 0;
        $398 = $5;
        $399 = ((($398)) + 16|0);
        $400 = HEAP32[$399>>2]|0;
        $401 = $400 & 1024;
        $402 = ($401|0)!=(0);
        if ($402) {
         $403 = $5;
         $404 = ((($403)) + 64|0);
         $405 = HEAP32[$404>>2]|0;
         $14 = $405;
         $406 = $14;
         $407 = $8;
         $408 = ($406>>>0)>($407>>>0);
         if ($408) {
          $409 = $8;
          $14 = $409;
         }
         $410 = $14;
         $411 = ($410|0)!=(0);
         if ($411) {
          $412 = $5;
          $413 = ((($412)) + 32|0);
          $414 = HEAP32[$413>>2]|0;
          $415 = ($414|0)!=(0|0);
          if ($415) {
           $416 = $5;
           $417 = ((($416)) + 32|0);
           $418 = HEAP32[$417>>2]|0;
           $419 = ((($418)) + 16|0);
           $420 = HEAP32[$419>>2]|0;
           $421 = ($420|0)!=(0|0);
           if ($421) {
            $422 = $5;
            $423 = ((($422)) + 32|0);
            $424 = HEAP32[$423>>2]|0;
            $425 = ((($424)) + 20|0);
            $426 = HEAP32[$425>>2]|0;
            $427 = $5;
            $428 = ((($427)) + 64|0);
            $429 = HEAP32[$428>>2]|0;
            $430 = (($426) - ($429))|0;
            $18 = $430;
            $431 = $5;
            $432 = ((($431)) + 32|0);
            $433 = HEAP32[$432>>2]|0;
            $434 = ((($433)) + 16|0);
            $435 = HEAP32[$434>>2]|0;
            $436 = $18;
            $437 = (($435) + ($436)|0);
            $438 = $6;
            $439 = $18;
            $440 = $14;
            $441 = (($439) + ($440))|0;
            $442 = $5;
            $443 = ((($442)) + 32|0);
            $444 = HEAP32[$443>>2]|0;
            $445 = ((($444)) + 24|0);
            $446 = HEAP32[$445>>2]|0;
            $447 = ($441>>>0)>($446>>>0);
            if ($447) {
             $448 = $5;
             $449 = ((($448)) + 32|0);
             $450 = HEAP32[$449>>2]|0;
             $451 = ((($450)) + 24|0);
             $452 = HEAP32[$451>>2]|0;
             $453 = $18;
             $454 = (($452) - ($453))|0;
             $456 = $454;
            } else {
             $455 = $14;
             $456 = $455;
            }
            _memcpy(($437|0),($438|0),($456|0))|0;
           }
          }
          $457 = $5;
          $458 = ((($457)) + 16|0);
          $459 = HEAP32[$458>>2]|0;
          $460 = $459 & 512;
          $461 = ($460|0)!=(0);
          if ($461) {
           $462 = $5;
           $463 = ((($462)) + 24|0);
           $464 = HEAP32[$463>>2]|0;
           $465 = $6;
           $466 = $14;
           $467 = (_crc32($464,$465,$466)|0);
           $468 = $5;
           $469 = ((($468)) + 24|0);
           HEAP32[$469>>2] = $467;
          }
          $470 = $14;
          $471 = $8;
          $472 = (($471) - ($470))|0;
          $8 = $472;
          $473 = $14;
          $474 = $6;
          $475 = (($474) + ($473)|0);
          $6 = $475;
          $476 = $14;
          $477 = $5;
          $478 = ((($477)) + 64|0);
          $479 = HEAP32[$478>>2]|0;
          $480 = (($479) - ($476))|0;
          HEAP32[$478>>2] = $480;
         }
         $481 = $5;
         $482 = ((($481)) + 64|0);
         $483 = HEAP32[$482>>2]|0;
         $484 = ($483|0)!=(0);
         if ($484) {
          break L11;
         }
        }
        $485 = $5;
        $486 = ((($485)) + 64|0);
        HEAP32[$486>>2] = 0;
        $487 = $5;
        HEAP32[$487>>2] = 6;
        label = 85;
       }
       else if ((label|0) == 214) {
        label = 0;
        $1338 = $8;
        $1339 = ($1338>>>0)>=(6);
        $1340 = $9;
        $1341 = ($1340>>>0)>=(258);
        $or$cond6 = $1339 & $1341;
        if ($or$cond6) {
         $1342 = $7;
         $1343 = $3;
         $1344 = ((($1343)) + 12|0);
         HEAP32[$1344>>2] = $1342;
         $1345 = $9;
         $1346 = $3;
         $1347 = ((($1346)) + 16|0);
         HEAP32[$1347>>2] = $1345;
         $1348 = $6;
         $1349 = $3;
         HEAP32[$1349>>2] = $1348;
         $1350 = $8;
         $1351 = $3;
         $1352 = ((($1351)) + 4|0);
         HEAP32[$1352>>2] = $1350;
         $1353 = $10;
         $1354 = $5;
         $1355 = ((($1354)) + 56|0);
         HEAP32[$1355>>2] = $1353;
         $1356 = $11;
         $1357 = $5;
         $1358 = ((($1357)) + 60|0);
         HEAP32[$1358>>2] = $1356;
         $1359 = $3;
         $1360 = $13;
         _inflate_fast($1359,$1360);
         $1361 = $3;
         $1362 = ((($1361)) + 12|0);
         $1363 = HEAP32[$1362>>2]|0;
         $7 = $1363;
         $1364 = $3;
         $1365 = ((($1364)) + 16|0);
         $1366 = HEAP32[$1365>>2]|0;
         $9 = $1366;
         $1367 = $3;
         $1368 = HEAP32[$1367>>2]|0;
         $6 = $1368;
         $1369 = $3;
         $1370 = ((($1369)) + 4|0);
         $1371 = HEAP32[$1370>>2]|0;
         $8 = $1371;
         $1372 = $5;
         $1373 = ((($1372)) + 56|0);
         $1374 = HEAP32[$1373>>2]|0;
         $10 = $1374;
         $1375 = $5;
         $1376 = ((($1375)) + 60|0);
         $1377 = HEAP32[$1376>>2]|0;
         $11 = $1377;
         $1378 = $5;
         $1379 = HEAP32[$1378>>2]|0;
         $1380 = ($1379|0)==(11);
         if (!($1380)) {
          continue L11;
         }
         $1381 = $5;
         $1382 = ((($1381)) + 7108|0);
         HEAP32[$1382>>2] = -1;
         continue L11;
        }
        $1383 = $5;
        $1384 = ((($1383)) + 7108|0);
        HEAP32[$1384>>2] = 0;
        while(1) {
         $1385 = $10;
         $1386 = $5;
         $1387 = ((($1386)) + 84|0);
         $1388 = HEAP32[$1387>>2]|0;
         $1389 = 1 << $1388;
         $1390 = (($1389) - 1)|0;
         $1391 = $1385 & $1390;
         $1392 = $5;
         $1393 = ((($1392)) + 76|0);
         $1394 = HEAP32[$1393>>2]|0;
         $1395 = (($1394) + ($1391<<2)|0);
         ;HEAP16[$16>>1]=HEAP16[$1395>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1395+2>>1]|0;
         $1396 = ((($16)) + 1|0);
         $1397 = HEAP8[$1396>>0]|0;
         $1398 = $1397&255;
         $1399 = $11;
         $1400 = ($1398>>>0)<=($1399>>>0);
         if ($1400) {
          break;
         }
         $1401 = $8;
         $1402 = ($1401|0)==(0);
         if ($1402) {
          break L11;
         }
         $1403 = $8;
         $1404 = (($1403) + -1)|0;
         $8 = $1404;
         $1405 = $6;
         $1406 = ((($1405)) + 1|0);
         $6 = $1406;
         $1407 = HEAP8[$1405>>0]|0;
         $1408 = $1407&255;
         $1409 = $11;
         $1410 = $1408 << $1409;
         $1411 = $10;
         $1412 = (($1411) + ($1410))|0;
         $10 = $1412;
         $1413 = $11;
         $1414 = (($1413) + 8)|0;
         $11 = $1414;
        }
        $1415 = HEAP8[$16>>0]|0;
        $1416 = $1415&255;
        $1417 = ($1416|0)!=(0);
        if ($1417) {
         $1418 = HEAP8[$16>>0]|0;
         $1419 = $1418&255;
         $1420 = $1419 & 240;
         $1421 = ($1420|0)==(0);
         if ($1421) {
          ;HEAP16[$17>>1]=HEAP16[$16>>1]|0;HEAP16[$17+2>>1]=HEAP16[$16+2>>1]|0;
          while(1) {
           $1422 = ((($17)) + 2|0);
           $1423 = HEAP16[$1422>>1]|0;
           $1424 = $1423&65535;
           $1425 = $10;
           $1426 = ((($17)) + 1|0);
           $1427 = HEAP8[$1426>>0]|0;
           $1428 = $1427&255;
           $1429 = HEAP8[$17>>0]|0;
           $1430 = $1429&255;
           $1431 = (($1428) + ($1430))|0;
           $1432 = 1 << $1431;
           $1433 = (($1432) - 1)|0;
           $1434 = $1425 & $1433;
           $1435 = ((($17)) + 1|0);
           $1436 = HEAP8[$1435>>0]|0;
           $1437 = $1436&255;
           $1438 = $1434 >>> $1437;
           $1439 = (($1424) + ($1438))|0;
           $1440 = $5;
           $1441 = ((($1440)) + 76|0);
           $1442 = HEAP32[$1441>>2]|0;
           $1443 = (($1442) + ($1439<<2)|0);
           ;HEAP16[$16>>1]=HEAP16[$1443>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1443+2>>1]|0;
           $1444 = ((($17)) + 1|0);
           $1445 = HEAP8[$1444>>0]|0;
           $1446 = $1445&255;
           $1447 = ((($16)) + 1|0);
           $1448 = HEAP8[$1447>>0]|0;
           $1449 = $1448&255;
           $1450 = (($1446) + ($1449))|0;
           $1451 = $11;
           $1452 = ($1450>>>0)<=($1451>>>0);
           if ($1452) {
            break;
           }
           $1453 = $8;
           $1454 = ($1453|0)==(0);
           if ($1454) {
            break L11;
           }
           $1455 = $8;
           $1456 = (($1455) + -1)|0;
           $8 = $1456;
           $1457 = $6;
           $1458 = ((($1457)) + 1|0);
           $6 = $1458;
           $1459 = HEAP8[$1457>>0]|0;
           $1460 = $1459&255;
           $1461 = $11;
           $1462 = $1460 << $1461;
           $1463 = $10;
           $1464 = (($1463) + ($1462))|0;
           $10 = $1464;
           $1465 = $11;
           $1466 = (($1465) + 8)|0;
           $11 = $1466;
          }
          $1467 = ((($17)) + 1|0);
          $1468 = HEAP8[$1467>>0]|0;
          $1469 = $1468&255;
          $1470 = $10;
          $1471 = $1470 >>> $1469;
          $10 = $1471;
          $1472 = ((($17)) + 1|0);
          $1473 = HEAP8[$1472>>0]|0;
          $1474 = $1473&255;
          $1475 = $11;
          $1476 = (($1475) - ($1474))|0;
          $11 = $1476;
          $1477 = ((($17)) + 1|0);
          $1478 = HEAP8[$1477>>0]|0;
          $1479 = $1478&255;
          $1480 = $5;
          $1481 = ((($1480)) + 7108|0);
          $1482 = HEAP32[$1481>>2]|0;
          $1483 = (($1482) + ($1479))|0;
          HEAP32[$1481>>2] = $1483;
         }
        }
        $1484 = ((($16)) + 1|0);
        $1485 = HEAP8[$1484>>0]|0;
        $1486 = $1485&255;
        $1487 = $10;
        $1488 = $1487 >>> $1486;
        $10 = $1488;
        $1489 = ((($16)) + 1|0);
        $1490 = HEAP8[$1489>>0]|0;
        $1491 = $1490&255;
        $1492 = $11;
        $1493 = (($1492) - ($1491))|0;
        $11 = $1493;
        $1494 = ((($16)) + 1|0);
        $1495 = HEAP8[$1494>>0]|0;
        $1496 = $1495&255;
        $1497 = $5;
        $1498 = ((($1497)) + 7108|0);
        $1499 = HEAP32[$1498>>2]|0;
        $1500 = (($1499) + ($1496))|0;
        HEAP32[$1498>>2] = $1500;
        $1501 = ((($16)) + 2|0);
        $1502 = HEAP16[$1501>>1]|0;
        $1503 = $1502&65535;
        $1504 = $5;
        $1505 = ((($1504)) + 64|0);
        HEAP32[$1505>>2] = $1503;
        $1506 = HEAP8[$16>>0]|0;
        $1507 = $1506&255;
        $1508 = ($1507|0)==(0);
        if ($1508) {
         $1509 = $5;
         HEAP32[$1509>>2] = 25;
         continue L11;
        }
        $1510 = HEAP8[$16>>0]|0;
        $1511 = $1510&255;
        $1512 = $1511 & 32;
        $1513 = ($1512|0)!=(0);
        if ($1513) {
         $1514 = $5;
         $1515 = ((($1514)) + 7108|0);
         HEAP32[$1515>>2] = -1;
         $1516 = $5;
         HEAP32[$1516>>2] = 11;
         continue L11;
        }
        $1517 = HEAP8[$16>>0]|0;
        $1518 = $1517&255;
        $1519 = $1518 & 64;
        $1520 = ($1519|0)!=(0);
        if ($1520) {
         $1521 = $3;
         $1522 = ((($1521)) + 24|0);
         HEAP32[$1522>>2] = 15420;
         $1523 = $5;
         HEAP32[$1523>>2] = 29;
         continue L11;
        } else {
         $1524 = HEAP8[$16>>0]|0;
         $1525 = $1524&255;
         $1526 = $1525 & 15;
         $1527 = $5;
         $1528 = ((($1527)) + 72|0);
         HEAP32[$1528>>2] = $1526;
         $1529 = $5;
         HEAP32[$1529>>2] = 21;
         label = 235;
         break;
        }
       }
      } while(0);
      if ((label|0) == 85) {
       label = 0;
       $488 = $5;
       $489 = ((($488)) + 16|0);
       $490 = HEAP32[$489>>2]|0;
       $491 = $490 & 2048;
       $492 = ($491|0)!=(0);
       if ($492) {
        $493 = $8;
        $494 = ($493|0)==(0);
        if ($494) {
         break;
        }
        $14 = 0;
        while(1) {
         $495 = $14;
         $496 = (($495) + 1)|0;
         $14 = $496;
         $497 = $6;
         $498 = (($497) + ($495)|0);
         $499 = HEAP8[$498>>0]|0;
         $500 = $499&255;
         $18 = $500;
         $501 = $5;
         $502 = ((($501)) + 32|0);
         $503 = HEAP32[$502>>2]|0;
         $504 = ($503|0)!=(0|0);
         if ($504) {
          $505 = $5;
          $506 = ((($505)) + 32|0);
          $507 = HEAP32[$506>>2]|0;
          $508 = ((($507)) + 28|0);
          $509 = HEAP32[$508>>2]|0;
          $510 = ($509|0)!=(0|0);
          if ($510) {
           $511 = $5;
           $512 = ((($511)) + 64|0);
           $513 = HEAP32[$512>>2]|0;
           $514 = $5;
           $515 = ((($514)) + 32|0);
           $516 = HEAP32[$515>>2]|0;
           $517 = ((($516)) + 32|0);
           $518 = HEAP32[$517>>2]|0;
           $519 = ($513>>>0)<($518>>>0);
           if ($519) {
            $520 = $18;
            $521 = $520&255;
            $522 = $5;
            $523 = ((($522)) + 64|0);
            $524 = HEAP32[$523>>2]|0;
            $525 = (($524) + 1)|0;
            HEAP32[$523>>2] = $525;
            $526 = $5;
            $527 = ((($526)) + 32|0);
            $528 = HEAP32[$527>>2]|0;
            $529 = ((($528)) + 28|0);
            $530 = HEAP32[$529>>2]|0;
            $531 = (($530) + ($524)|0);
            HEAP8[$531>>0] = $521;
           }
          }
         }
         $532 = $18;
         $533 = ($532|0)!=(0);
         if (!($533)) {
          break;
         }
         $534 = $14;
         $535 = $8;
         $536 = ($534>>>0)<($535>>>0);
         if (!($536)) {
          break;
         }
        }
        $537 = $5;
        $538 = ((($537)) + 16|0);
        $539 = HEAP32[$538>>2]|0;
        $540 = $539 & 512;
        $541 = ($540|0)!=(0);
        if ($541) {
         $542 = $5;
         $543 = ((($542)) + 24|0);
         $544 = HEAP32[$543>>2]|0;
         $545 = $6;
         $546 = $14;
         $547 = (_crc32($544,$545,$546)|0);
         $548 = $5;
         $549 = ((($548)) + 24|0);
         HEAP32[$549>>2] = $547;
        }
        $550 = $14;
        $551 = $8;
        $552 = (($551) - ($550))|0;
        $8 = $552;
        $553 = $14;
        $554 = $6;
        $555 = (($554) + ($553)|0);
        $6 = $555;
        $556 = $18;
        $557 = ($556|0)!=(0);
        if ($557) {
         break;
        }
       } else {
        $558 = $5;
        $559 = ((($558)) + 32|0);
        $560 = HEAP32[$559>>2]|0;
        $561 = ($560|0)!=(0|0);
        if ($561) {
         $562 = $5;
         $563 = ((($562)) + 32|0);
         $564 = HEAP32[$563>>2]|0;
         $565 = ((($564)) + 28|0);
         HEAP32[$565>>2] = 0;
        }
       }
       $566 = $5;
       $567 = ((($566)) + 64|0);
       HEAP32[$567>>2] = 0;
       $568 = $5;
       HEAP32[$568>>2] = 7;
       label = 100;
      }
      else if ((label|0) == 235) {
       label = 0;
       $1530 = $5;
       $1531 = ((($1530)) + 72|0);
       $1532 = HEAP32[$1531>>2]|0;
       $1533 = ($1532|0)!=(0);
       if ($1533) {
        while(1) {
         $1534 = $11;
         $1535 = $5;
         $1536 = ((($1535)) + 72|0);
         $1537 = HEAP32[$1536>>2]|0;
         $1538 = ($1534>>>0)<($1537>>>0);
         if (!($1538)) {
          break;
         }
         $1539 = $8;
         $1540 = ($1539|0)==(0);
         if ($1540) {
          break L11;
         }
         $1541 = $8;
         $1542 = (($1541) + -1)|0;
         $8 = $1542;
         $1543 = $6;
         $1544 = ((($1543)) + 1|0);
         $6 = $1544;
         $1545 = HEAP8[$1543>>0]|0;
         $1546 = $1545&255;
         $1547 = $11;
         $1548 = $1546 << $1547;
         $1549 = $10;
         $1550 = (($1549) + ($1548))|0;
         $10 = $1550;
         $1551 = $11;
         $1552 = (($1551) + 8)|0;
         $11 = $1552;
        }
        $1553 = $10;
        $1554 = $5;
        $1555 = ((($1554)) + 72|0);
        $1556 = HEAP32[$1555>>2]|0;
        $1557 = 1 << $1556;
        $1558 = (($1557) - 1)|0;
        $1559 = $1553 & $1558;
        $1560 = $5;
        $1561 = ((($1560)) + 64|0);
        $1562 = HEAP32[$1561>>2]|0;
        $1563 = (($1562) + ($1559))|0;
        HEAP32[$1561>>2] = $1563;
        $1564 = $5;
        $1565 = ((($1564)) + 72|0);
        $1566 = HEAP32[$1565>>2]|0;
        $1567 = $10;
        $1568 = $1567 >>> $1566;
        $10 = $1568;
        $1569 = $5;
        $1570 = ((($1569)) + 72|0);
        $1571 = HEAP32[$1570>>2]|0;
        $1572 = $11;
        $1573 = (($1572) - ($1571))|0;
        $11 = $1573;
        $1574 = $5;
        $1575 = ((($1574)) + 72|0);
        $1576 = HEAP32[$1575>>2]|0;
        $1577 = $5;
        $1578 = ((($1577)) + 7108|0);
        $1579 = HEAP32[$1578>>2]|0;
        $1580 = (($1579) + ($1576))|0;
        HEAP32[$1578>>2] = $1580;
       }
       $1581 = $5;
       $1582 = ((($1581)) + 64|0);
       $1583 = HEAP32[$1582>>2]|0;
       $1584 = $5;
       $1585 = ((($1584)) + 7112|0);
       HEAP32[$1585>>2] = $1583;
       $1586 = $5;
       HEAP32[$1586>>2] = 22;
       label = 241;
      }
      do {
       if ((label|0) == 100) {
        label = 0;
        $569 = $5;
        $570 = ((($569)) + 16|0);
        $571 = HEAP32[$570>>2]|0;
        $572 = $571 & 4096;
        $573 = ($572|0)!=(0);
        if ($573) {
         $574 = $8;
         $575 = ($574|0)==(0);
         if ($575) {
          break L11;
         }
         $14 = 0;
         while(1) {
          $576 = $14;
          $577 = (($576) + 1)|0;
          $14 = $577;
          $578 = $6;
          $579 = (($578) + ($576)|0);
          $580 = HEAP8[$579>>0]|0;
          $581 = $580&255;
          $18 = $581;
          $582 = $5;
          $583 = ((($582)) + 32|0);
          $584 = HEAP32[$583>>2]|0;
          $585 = ($584|0)!=(0|0);
          if ($585) {
           $586 = $5;
           $587 = ((($586)) + 32|0);
           $588 = HEAP32[$587>>2]|0;
           $589 = ((($588)) + 36|0);
           $590 = HEAP32[$589>>2]|0;
           $591 = ($590|0)!=(0|0);
           if ($591) {
            $592 = $5;
            $593 = ((($592)) + 64|0);
            $594 = HEAP32[$593>>2]|0;
            $595 = $5;
            $596 = ((($595)) + 32|0);
            $597 = HEAP32[$596>>2]|0;
            $598 = ((($597)) + 40|0);
            $599 = HEAP32[$598>>2]|0;
            $600 = ($594>>>0)<($599>>>0);
            if ($600) {
             $601 = $18;
             $602 = $601&255;
             $603 = $5;
             $604 = ((($603)) + 64|0);
             $605 = HEAP32[$604>>2]|0;
             $606 = (($605) + 1)|0;
             HEAP32[$604>>2] = $606;
             $607 = $5;
             $608 = ((($607)) + 32|0);
             $609 = HEAP32[$608>>2]|0;
             $610 = ((($609)) + 36|0);
             $611 = HEAP32[$610>>2]|0;
             $612 = (($611) + ($605)|0);
             HEAP8[$612>>0] = $602;
            }
           }
          }
          $613 = $18;
          $614 = ($613|0)!=(0);
          if (!($614)) {
           break;
          }
          $615 = $14;
          $616 = $8;
          $617 = ($615>>>0)<($616>>>0);
          if (!($617)) {
           break;
          }
         }
         $618 = $5;
         $619 = ((($618)) + 16|0);
         $620 = HEAP32[$619>>2]|0;
         $621 = $620 & 512;
         $622 = ($621|0)!=(0);
         if ($622) {
          $623 = $5;
          $624 = ((($623)) + 24|0);
          $625 = HEAP32[$624>>2]|0;
          $626 = $6;
          $627 = $14;
          $628 = (_crc32($625,$626,$627)|0);
          $629 = $5;
          $630 = ((($629)) + 24|0);
          HEAP32[$630>>2] = $628;
         }
         $631 = $14;
         $632 = $8;
         $633 = (($632) - ($631))|0;
         $8 = $633;
         $634 = $14;
         $635 = $6;
         $636 = (($635) + ($634)|0);
         $6 = $636;
         $637 = $18;
         $638 = ($637|0)!=(0);
         if ($638) {
          break L11;
         }
        } else {
         $639 = $5;
         $640 = ((($639)) + 32|0);
         $641 = HEAP32[$640>>2]|0;
         $642 = ($641|0)!=(0|0);
         if ($642) {
          $643 = $5;
          $644 = ((($643)) + 32|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ((($645)) + 36|0);
          HEAP32[$646>>2] = 0;
         }
        }
        $647 = $5;
        HEAP32[$647>>2] = 8;
        label = 115;
       }
       else if ((label|0) == 241) {
        while(1) {
         label = 0;
         $1587 = $10;
         $1588 = $5;
         $1589 = ((($1588)) + 88|0);
         $1590 = HEAP32[$1589>>2]|0;
         $1591 = 1 << $1590;
         $1592 = (($1591) - 1)|0;
         $1593 = $1587 & $1592;
         $1594 = $5;
         $1595 = ((($1594)) + 80|0);
         $1596 = HEAP32[$1595>>2]|0;
         $1597 = (($1596) + ($1593<<2)|0);
         ;HEAP16[$16>>1]=HEAP16[$1597>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1597+2>>1]|0;
         $1598 = ((($16)) + 1|0);
         $1599 = HEAP8[$1598>>0]|0;
         $1600 = $1599&255;
         $1601 = $11;
         $1602 = ($1600>>>0)<=($1601>>>0);
         if ($1602) {
          break;
         }
         $1603 = $8;
         $1604 = ($1603|0)==(0);
         if ($1604) {
          break L11;
         }
         $1605 = $8;
         $1606 = (($1605) + -1)|0;
         $8 = $1606;
         $1607 = $6;
         $1608 = ((($1607)) + 1|0);
         $6 = $1608;
         $1609 = HEAP8[$1607>>0]|0;
         $1610 = $1609&255;
         $1611 = $11;
         $1612 = $1610 << $1611;
         $1613 = $10;
         $1614 = (($1613) + ($1612))|0;
         $10 = $1614;
         $1615 = $11;
         $1616 = (($1615) + 8)|0;
         $11 = $1616;
         label = 241;
        }
        $1617 = HEAP8[$16>>0]|0;
        $1618 = $1617&255;
        $1619 = $1618 & 240;
        $1620 = ($1619|0)==(0);
        if ($1620) {
         ;HEAP16[$17>>1]=HEAP16[$16>>1]|0;HEAP16[$17+2>>1]=HEAP16[$16+2>>1]|0;
         while(1) {
          $1621 = ((($17)) + 2|0);
          $1622 = HEAP16[$1621>>1]|0;
          $1623 = $1622&65535;
          $1624 = $10;
          $1625 = ((($17)) + 1|0);
          $1626 = HEAP8[$1625>>0]|0;
          $1627 = $1626&255;
          $1628 = HEAP8[$17>>0]|0;
          $1629 = $1628&255;
          $1630 = (($1627) + ($1629))|0;
          $1631 = 1 << $1630;
          $1632 = (($1631) - 1)|0;
          $1633 = $1624 & $1632;
          $1634 = ((($17)) + 1|0);
          $1635 = HEAP8[$1634>>0]|0;
          $1636 = $1635&255;
          $1637 = $1633 >>> $1636;
          $1638 = (($1623) + ($1637))|0;
          $1639 = $5;
          $1640 = ((($1639)) + 80|0);
          $1641 = HEAP32[$1640>>2]|0;
          $1642 = (($1641) + ($1638<<2)|0);
          ;HEAP16[$16>>1]=HEAP16[$1642>>1]|0;HEAP16[$16+2>>1]=HEAP16[$1642+2>>1]|0;
          $1643 = ((($17)) + 1|0);
          $1644 = HEAP8[$1643>>0]|0;
          $1645 = $1644&255;
          $1646 = ((($16)) + 1|0);
          $1647 = HEAP8[$1646>>0]|0;
          $1648 = $1647&255;
          $1649 = (($1645) + ($1648))|0;
          $1650 = $11;
          $1651 = ($1649>>>0)<=($1650>>>0);
          if ($1651) {
           break;
          }
          $1652 = $8;
          $1653 = ($1652|0)==(0);
          if ($1653) {
           break L11;
          }
          $1654 = $8;
          $1655 = (($1654) + -1)|0;
          $8 = $1655;
          $1656 = $6;
          $1657 = ((($1656)) + 1|0);
          $6 = $1657;
          $1658 = HEAP8[$1656>>0]|0;
          $1659 = $1658&255;
          $1660 = $11;
          $1661 = $1659 << $1660;
          $1662 = $10;
          $1663 = (($1662) + ($1661))|0;
          $10 = $1663;
          $1664 = $11;
          $1665 = (($1664) + 8)|0;
          $11 = $1665;
         }
         $1666 = ((($17)) + 1|0);
         $1667 = HEAP8[$1666>>0]|0;
         $1668 = $1667&255;
         $1669 = $10;
         $1670 = $1669 >>> $1668;
         $10 = $1670;
         $1671 = ((($17)) + 1|0);
         $1672 = HEAP8[$1671>>0]|0;
         $1673 = $1672&255;
         $1674 = $11;
         $1675 = (($1674) - ($1673))|0;
         $11 = $1675;
         $1676 = ((($17)) + 1|0);
         $1677 = HEAP8[$1676>>0]|0;
         $1678 = $1677&255;
         $1679 = $5;
         $1680 = ((($1679)) + 7108|0);
         $1681 = HEAP32[$1680>>2]|0;
         $1682 = (($1681) + ($1678))|0;
         HEAP32[$1680>>2] = $1682;
        }
        $1683 = ((($16)) + 1|0);
        $1684 = HEAP8[$1683>>0]|0;
        $1685 = $1684&255;
        $1686 = $10;
        $1687 = $1686 >>> $1685;
        $10 = $1687;
        $1688 = ((($16)) + 1|0);
        $1689 = HEAP8[$1688>>0]|0;
        $1690 = $1689&255;
        $1691 = $11;
        $1692 = (($1691) - ($1690))|0;
        $11 = $1692;
        $1693 = ((($16)) + 1|0);
        $1694 = HEAP8[$1693>>0]|0;
        $1695 = $1694&255;
        $1696 = $5;
        $1697 = ((($1696)) + 7108|0);
        $1698 = HEAP32[$1697>>2]|0;
        $1699 = (($1698) + ($1695))|0;
        HEAP32[$1697>>2] = $1699;
        $1700 = HEAP8[$16>>0]|0;
        $1701 = $1700&255;
        $1702 = $1701 & 64;
        $1703 = ($1702|0)!=(0);
        if ($1703) {
         $1704 = $3;
         $1705 = ((($1704)) + 24|0);
         HEAP32[$1705>>2] = 15398;
         $1706 = $5;
         HEAP32[$1706>>2] = 29;
         continue L11;
        } else {
         $1707 = ((($16)) + 2|0);
         $1708 = HEAP16[$1707>>1]|0;
         $1709 = $1708&65535;
         $1710 = $5;
         $1711 = ((($1710)) + 68|0);
         HEAP32[$1711>>2] = $1709;
         $1712 = HEAP8[$16>>0]|0;
         $1713 = $1712&255;
         $1714 = $1713 & 15;
         $1715 = $5;
         $1716 = ((($1715)) + 72|0);
         HEAP32[$1716>>2] = $1714;
         $1717 = $5;
         HEAP32[$1717>>2] = 23;
         label = 253;
         break;
        }
       }
      } while(0);
      if ((label|0) == 115) {
       label = 0;
       $648 = $5;
       $649 = ((($648)) + 16|0);
       $650 = HEAP32[$649>>2]|0;
       $651 = $650 & 512;
       $652 = ($651|0)!=(0);
       do {
        if ($652) {
         while(1) {
          $653 = $11;
          $654 = ($653>>>0)<(16);
          if (!($654)) {
           break;
          }
          $655 = $8;
          $656 = ($655|0)==(0);
          if ($656) {
           break L11;
          }
          $657 = $8;
          $658 = (($657) + -1)|0;
          $8 = $658;
          $659 = $6;
          $660 = ((($659)) + 1|0);
          $6 = $660;
          $661 = HEAP8[$659>>0]|0;
          $662 = $661&255;
          $663 = $11;
          $664 = $662 << $663;
          $665 = $10;
          $666 = (($665) + ($664))|0;
          $10 = $666;
          $667 = $11;
          $668 = (($667) + 8)|0;
          $11 = $668;
         }
         $669 = $10;
         $670 = $5;
         $671 = ((($670)) + 24|0);
         $672 = HEAP32[$671>>2]|0;
         $673 = $672 & 65535;
         $674 = ($669|0)!=($673|0);
         if ($674) {
          $675 = $3;
          $676 = ((($675)) + 24|0);
          HEAP32[$676>>2] = 15082;
          $677 = $5;
          HEAP32[$677>>2] = 29;
          continue L11;
         } else {
          $10 = 0;
          $11 = 0;
          break;
         }
        }
       } while(0);
       $678 = $5;
       $679 = ((($678)) + 32|0);
       $680 = HEAP32[$679>>2]|0;
       $681 = ($680|0)!=(0|0);
       if ($681) {
        $682 = $5;
        $683 = ((($682)) + 16|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = $684 >> 9;
        $686 = $685 & 1;
        $687 = $5;
        $688 = ((($687)) + 32|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = ((($689)) + 44|0);
        HEAP32[$690>>2] = $686;
        $691 = $5;
        $692 = ((($691)) + 32|0);
        $693 = HEAP32[$692>>2]|0;
        $694 = ((($693)) + 48|0);
        HEAP32[$694>>2] = 1;
       }
       $695 = (_crc32(0,0,0)|0);
       $696 = $5;
       $697 = ((($696)) + 24|0);
       HEAP32[$697>>2] = $695;
       $698 = $3;
       $699 = ((($698)) + 48|0);
       HEAP32[$699>>2] = $695;
       $700 = $5;
       HEAP32[$700>>2] = 11;
       continue;
      }
      else if ((label|0) == 253) {
       label = 0;
       $1718 = $5;
       $1719 = ((($1718)) + 72|0);
       $1720 = HEAP32[$1719>>2]|0;
       $1721 = ($1720|0)!=(0);
       if ($1721) {
        while(1) {
         $1722 = $11;
         $1723 = $5;
         $1724 = ((($1723)) + 72|0);
         $1725 = HEAP32[$1724>>2]|0;
         $1726 = ($1722>>>0)<($1725>>>0);
         if (!($1726)) {
          break;
         }
         $1727 = $8;
         $1728 = ($1727|0)==(0);
         if ($1728) {
          break L11;
         }
         $1729 = $8;
         $1730 = (($1729) + -1)|0;
         $8 = $1730;
         $1731 = $6;
         $1732 = ((($1731)) + 1|0);
         $6 = $1732;
         $1733 = HEAP8[$1731>>0]|0;
         $1734 = $1733&255;
         $1735 = $11;
         $1736 = $1734 << $1735;
         $1737 = $10;
         $1738 = (($1737) + ($1736))|0;
         $10 = $1738;
         $1739 = $11;
         $1740 = (($1739) + 8)|0;
         $11 = $1740;
        }
        $1741 = $10;
        $1742 = $5;
        $1743 = ((($1742)) + 72|0);
        $1744 = HEAP32[$1743>>2]|0;
        $1745 = 1 << $1744;
        $1746 = (($1745) - 1)|0;
        $1747 = $1741 & $1746;
        $1748 = $5;
        $1749 = ((($1748)) + 68|0);
        $1750 = HEAP32[$1749>>2]|0;
        $1751 = (($1750) + ($1747))|0;
        HEAP32[$1749>>2] = $1751;
        $1752 = $5;
        $1753 = ((($1752)) + 72|0);
        $1754 = HEAP32[$1753>>2]|0;
        $1755 = $10;
        $1756 = $1755 >>> $1754;
        $10 = $1756;
        $1757 = $5;
        $1758 = ((($1757)) + 72|0);
        $1759 = HEAP32[$1758>>2]|0;
        $1760 = $11;
        $1761 = (($1760) - ($1759))|0;
        $11 = $1761;
        $1762 = $5;
        $1763 = ((($1762)) + 72|0);
        $1764 = HEAP32[$1763>>2]|0;
        $1765 = $5;
        $1766 = ((($1765)) + 7108|0);
        $1767 = HEAP32[$1766>>2]|0;
        $1768 = (($1767) + ($1764))|0;
        HEAP32[$1766>>2] = $1768;
       }
       $1769 = $5;
       HEAP32[$1769>>2] = 24;
      }
      $1770 = $9;
      $1771 = ($1770|0)==(0);
      if ($1771) {
       break;
      }
      $1772 = $13;
      $1773 = $9;
      $1774 = (($1772) - ($1773))|0;
      $14 = $1774;
      $1775 = $5;
      $1776 = ((($1775)) + 68|0);
      $1777 = HEAP32[$1776>>2]|0;
      $1778 = $14;
      $1779 = ($1777>>>0)>($1778>>>0);
      if ($1779) {
       $1780 = $5;
       $1781 = ((($1780)) + 68|0);
       $1782 = HEAP32[$1781>>2]|0;
       $1783 = $14;
       $1784 = (($1782) - ($1783))|0;
       $14 = $1784;
       $1785 = $14;
       $1786 = $5;
       $1787 = ((($1786)) + 44|0);
       $1788 = HEAP32[$1787>>2]|0;
       $1789 = ($1785>>>0)>($1788>>>0);
       if ($1789) {
        $1790 = $5;
        $1791 = ((($1790)) + 7104|0);
        $1792 = HEAP32[$1791>>2]|0;
        $1793 = ($1792|0)!=(0);
        if ($1793) {
         $1794 = $3;
         $1795 = ((($1794)) + 24|0);
         HEAP32[$1795>>2] = 15368;
         $1796 = $5;
         HEAP32[$1796>>2] = 29;
         continue;
        }
       }
       $1797 = $14;
       $1798 = $5;
       $1799 = ((($1798)) + 48|0);
       $1800 = HEAP32[$1799>>2]|0;
       $1801 = ($1797>>>0)>($1800>>>0);
       $1802 = $5;
       if ($1801) {
        $1803 = ((($1802)) + 48|0);
        $1804 = HEAP32[$1803>>2]|0;
        $1805 = $14;
        $1806 = (($1805) - ($1804))|0;
        $14 = $1806;
        $1807 = $5;
        $1808 = ((($1807)) + 52|0);
        $1809 = HEAP32[$1808>>2]|0;
        $1810 = $5;
        $1811 = ((($1810)) + 40|0);
        $1812 = HEAP32[$1811>>2]|0;
        $1813 = $14;
        $1814 = (($1812) - ($1813))|0;
        $1815 = (($1809) + ($1814)|0);
        $15 = $1815;
       } else {
        $1816 = ((($1802)) + 52|0);
        $1817 = HEAP32[$1816>>2]|0;
        $1818 = $5;
        $1819 = ((($1818)) + 48|0);
        $1820 = HEAP32[$1819>>2]|0;
        $1821 = $14;
        $1822 = (($1820) - ($1821))|0;
        $1823 = (($1817) + ($1822)|0);
        $15 = $1823;
       }
       $1824 = $14;
       $1825 = $5;
       $1826 = ((($1825)) + 64|0);
       $1827 = HEAP32[$1826>>2]|0;
       $1828 = ($1824>>>0)>($1827>>>0);
       if ($1828) {
        $1829 = $5;
        $1830 = ((($1829)) + 64|0);
        $1831 = HEAP32[$1830>>2]|0;
        $14 = $1831;
       }
      } else {
       $1832 = $7;
       $1833 = $5;
       $1834 = ((($1833)) + 68|0);
       $1835 = HEAP32[$1834>>2]|0;
       $1836 = (0 - ($1835))|0;
       $1837 = (($1832) + ($1836)|0);
       $15 = $1837;
       $1838 = $5;
       $1839 = ((($1838)) + 64|0);
       $1840 = HEAP32[$1839>>2]|0;
       $14 = $1840;
      }
      $1841 = $14;
      $1842 = $9;
      $1843 = ($1841>>>0)>($1842>>>0);
      if ($1843) {
       $1844 = $9;
       $14 = $1844;
      }
      $1845 = $14;
      $1846 = $9;
      $1847 = (($1846) - ($1845))|0;
      $9 = $1847;
      $1848 = $14;
      $1849 = $5;
      $1850 = ((($1849)) + 64|0);
      $1851 = HEAP32[$1850>>2]|0;
      $1852 = (($1851) - ($1848))|0;
      HEAP32[$1850>>2] = $1852;
      while(1) {
       $1853 = $15;
       $1854 = ((($1853)) + 1|0);
       $15 = $1854;
       $1855 = HEAP8[$1853>>0]|0;
       $1856 = $7;
       $1857 = ((($1856)) + 1|0);
       $7 = $1857;
       HEAP8[$1856>>0] = $1855;
       $1858 = $14;
       $1859 = (($1858) + -1)|0;
       $14 = $1859;
       $1860 = ($1859|0)!=(0);
       if (!($1860)) {
        break;
       }
      }
      $1861 = $5;
      $1862 = ((($1861)) + 64|0);
      $1863 = HEAP32[$1862>>2]|0;
      $1864 = ($1863|0)==(0);
      if (!($1864)) {
       continue;
      }
      $1865 = $5;
      HEAP32[$1865>>2] = 20;
     }
     if ((label|0) == 130) {
      $741 = $7;
      $742 = $3;
      $743 = ((($742)) + 12|0);
      HEAP32[$743>>2] = $741;
      $744 = $9;
      $745 = $3;
      $746 = ((($745)) + 16|0);
      HEAP32[$746>>2] = $744;
      $747 = $6;
      $748 = $3;
      HEAP32[$748>>2] = $747;
      $749 = $8;
      $750 = $3;
      $751 = ((($750)) + 4|0);
      HEAP32[$751>>2] = $749;
      $752 = $10;
      $753 = $5;
      $754 = ((($753)) + 56|0);
      HEAP32[$754>>2] = $752;
      $755 = $11;
      $756 = $5;
      $757 = ((($756)) + 60|0);
      HEAP32[$757>>2] = $755;
      $2 = 2;
      $2125 = $2;
      STACKTOP = sp;return ($2125|0);
     }
     else if ((label|0) == 141) {
      $812 = $10;
      $813 = $812 >>> 2;
      $10 = $813;
      $814 = $11;
      $815 = (($814) - 2)|0;
      $11 = $815;
     }
     else if ((label|0) == 144) {
      // unreachable;
     }
     else if ((label|0) == 300) {
      $10 = 0;
      $11 = 0;
      label = 301;
     }
     else if ((label|0) == 303) {
      $19 = -3;
     }
     else if ((label|0) == 304) {
      $2 = -4;
      $2125 = $2;
      STACKTOP = sp;return ($2125|0);
     }
     else if ((label|0) == 305) {
      $2 = -2;
      $2125 = $2;
      STACKTOP = sp;return ($2125|0);
     }
     if ((label|0) == 301) {
      $1992 = $5;
      HEAP32[$1992>>2] = 28;
      label = 302;
     }
     if ((label|0) == 302) {
      $19 = 1;
     }
     $1993 = $7;
     $1994 = $3;
     $1995 = ((($1994)) + 12|0);
     HEAP32[$1995>>2] = $1993;
     $1996 = $9;
     $1997 = $3;
     $1998 = ((($1997)) + 16|0);
     HEAP32[$1998>>2] = $1996;
     $1999 = $6;
     $2000 = $3;
     HEAP32[$2000>>2] = $1999;
     $2001 = $8;
     $2002 = $3;
     $2003 = ((($2002)) + 4|0);
     HEAP32[$2003>>2] = $2001;
     $2004 = $10;
     $2005 = $5;
     $2006 = ((($2005)) + 56|0);
     HEAP32[$2006>>2] = $2004;
     $2007 = $11;
     $2008 = $5;
     $2009 = ((($2008)) + 60|0);
     HEAP32[$2009>>2] = $2007;
     $2010 = $5;
     $2011 = ((($2010)) + 40|0);
     $2012 = HEAP32[$2011>>2]|0;
     $2013 = ($2012|0)!=(0);
     if ($2013) {
      label = 310;
     } else {
      $2014 = $13;
      $2015 = $3;
      $2016 = ((($2015)) + 16|0);
      $2017 = HEAP32[$2016>>2]|0;
      $2018 = ($2014|0)!=($2017|0);
      if ($2018) {
       $2019 = $5;
       $2020 = HEAP32[$2019>>2]|0;
       $2021 = ($2020>>>0)<(29);
       if ($2021) {
        $2022 = $5;
        $2023 = HEAP32[$2022>>2]|0;
        $2024 = ($2023>>>0)<(26);
        $2025 = $4;
        $2026 = ($2025|0)!=(4);
        $or$cond8 = $2024 | $2026;
        if ($or$cond8) {
         label = 310;
        }
       }
      }
     }
     if ((label|0) == 310) {
      $2027 = $3;
      $2028 = $3;
      $2029 = ((($2028)) + 12|0);
      $2030 = HEAP32[$2029>>2]|0;
      $2031 = $13;
      $2032 = $3;
      $2033 = ((($2032)) + 16|0);
      $2034 = HEAP32[$2033>>2]|0;
      $2035 = (($2031) - ($2034))|0;
      $2036 = (_updatewindow($2027,$2030,$2035)|0);
      $2037 = ($2036|0)!=(0);
      if ($2037) {
       $2038 = $5;
       HEAP32[$2038>>2] = 30;
       $2 = -4;
       $2125 = $2;
       STACKTOP = sp;return ($2125|0);
      }
     }
     $2039 = $3;
     $2040 = ((($2039)) + 4|0);
     $2041 = HEAP32[$2040>>2]|0;
     $2042 = $12;
     $2043 = (($2042) - ($2041))|0;
     $12 = $2043;
     $2044 = $3;
     $2045 = ((($2044)) + 16|0);
     $2046 = HEAP32[$2045>>2]|0;
     $2047 = $13;
     $2048 = (($2047) - ($2046))|0;
     $13 = $2048;
     $2049 = $12;
     $2050 = $3;
     $2051 = ((($2050)) + 8|0);
     $2052 = HEAP32[$2051>>2]|0;
     $2053 = (($2052) + ($2049))|0;
     HEAP32[$2051>>2] = $2053;
     $2054 = $13;
     $2055 = $3;
     $2056 = ((($2055)) + 20|0);
     $2057 = HEAP32[$2056>>2]|0;
     $2058 = (($2057) + ($2054))|0;
     HEAP32[$2056>>2] = $2058;
     $2059 = $13;
     $2060 = $5;
     $2061 = ((($2060)) + 28|0);
     $2062 = HEAP32[$2061>>2]|0;
     $2063 = (($2062) + ($2059))|0;
     HEAP32[$2061>>2] = $2063;
     $2064 = $5;
     $2065 = ((($2064)) + 8|0);
     $2066 = HEAP32[$2065>>2]|0;
     $2067 = ($2066|0)!=(0);
     $2068 = $13;
     $2069 = ($2068|0)!=(0);
     $or$cond10 = $2067 & $2069;
     if ($or$cond10) {
      $2070 = $5;
      $2071 = ((($2070)) + 16|0);
      $2072 = HEAP32[$2071>>2]|0;
      $2073 = ($2072|0)!=(0);
      $2074 = $5;
      $2075 = ((($2074)) + 24|0);
      $2076 = HEAP32[$2075>>2]|0;
      $2077 = $3;
      $2078 = ((($2077)) + 12|0);
      $2079 = HEAP32[$2078>>2]|0;
      $2080 = $13;
      $2081 = (0 - ($2080))|0;
      $2082 = (($2079) + ($2081)|0);
      $2083 = $13;
      if ($2073) {
       $2084 = (_crc32($2076,$2082,$2083)|0);
       $2088 = $2084;
      } else {
       $2085 = (_adler32($2076,$2082,$2083)|0);
       $2088 = $2085;
      }
      $2086 = $5;
      $2087 = ((($2086)) + 24|0);
      HEAP32[$2087>>2] = $2088;
      $2089 = $3;
      $2090 = ((($2089)) + 48|0);
      HEAP32[$2090>>2] = $2088;
     }
     $2091 = $5;
     $2092 = ((($2091)) + 60|0);
     $2093 = HEAP32[$2092>>2]|0;
     $2094 = $5;
     $2095 = ((($2094)) + 4|0);
     $2096 = HEAP32[$2095>>2]|0;
     $2097 = ($2096|0)!=(0);
     $2098 = $2097 ? 64 : 0;
     $2099 = (($2093) + ($2098))|0;
     $2100 = $5;
     $2101 = HEAP32[$2100>>2]|0;
     $2102 = ($2101|0)==(11);
     $2103 = $2102 ? 128 : 0;
     $2104 = (($2099) + ($2103))|0;
     $2105 = $5;
     $2106 = HEAP32[$2105>>2]|0;
     $2107 = ($2106|0)==(19);
     if ($2107) {
      $2111 = 1;
     } else {
      $2108 = $5;
      $2109 = HEAP32[$2108>>2]|0;
      $2110 = ($2109|0)==(14);
      $2111 = $2110;
     }
     $2112 = $2111 ? 256 : 0;
     $2113 = (($2104) + ($2112))|0;
     $2114 = $3;
     $2115 = ((($2114)) + 44|0);
     HEAP32[$2115>>2] = $2113;
     $2116 = $12;
     $2117 = ($2116|0)==(0);
     $2118 = $13;
     $2119 = ($2118|0)==(0);
     $or$cond12 = $2117 & $2119;
     $2120 = $4;
     $2121 = ($2120|0)==(4);
     $or$cond14 = $or$cond12 | $2121;
     $2122 = $19;
     $2123 = ($2122|0)==(0);
     $or$cond16 = $or$cond14 & $2123;
     if ($or$cond16) {
      $19 = -5;
     }
     $2124 = $19;
     $2 = $2124;
     $2125 = $2;
     STACKTOP = sp;return ($2125|0);
    }
   }
  }
 } while(0);
 $2 = -2;
 $2125 = $2;
 STACKTOP = sp;return ($2125|0);
}
function _fixedtables($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 76|0);
 HEAP32[$3>>2] = 10882;
 $4 = $1;
 $5 = ((($4)) + 84|0);
 HEAP32[$5>>2] = 9;
 $6 = $1;
 $7 = ((($6)) + 80|0);
 HEAP32[$7>>2] = 12930;
 $8 = $1;
 $9 = ((($8)) + 88|0);
 HEAP32[$9>>2] = 5;
 STACKTOP = sp;return;
}
function _inflate_table($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $27 = sp + 168|0;
 $32 = sp + 136|0;
 $33 = sp + 104|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0;
 while(1) {
  $34 = $13;
  $35 = ($34>>>0)<=(15);
  if (!($35)) {
   break;
  }
  $36 = $13;
  $37 = (($32) + ($36<<1)|0);
  HEAP16[$37>>1] = 0;
  $38 = $13;
  $39 = (($38) + 1)|0;
  $13 = $39;
 }
 $14 = 0;
 while(1) {
  $40 = $14;
  $41 = $9;
  $42 = ($40>>>0)<($41>>>0);
  if (!($42)) {
   break;
  }
  $43 = $14;
  $44 = $8;
  $45 = (($44) + ($43<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = (($32) + ($47<<1)|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = (($49) + 1)<<16>>16;
  HEAP16[$48>>1] = $50;
  $51 = $14;
  $52 = (($51) + 1)|0;
  $14 = $52;
 }
 $53 = $11;
 $54 = HEAP32[$53>>2]|0;
 $17 = $54;
 $16 = 15;
 while(1) {
  $55 = $16;
  $56 = ($55>>>0)>=(1);
  if (!($56)) {
   break;
  }
  $57 = $16;
  $58 = (($32) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = ($60|0)!=(0);
  if ($61) {
   break;
  }
  $62 = $16;
  $63 = (($62) + -1)|0;
  $16 = $63;
 }
 $64 = $17;
 $65 = $16;
 $66 = ($64>>>0)>($65>>>0);
 if ($66) {
  $67 = $16;
  $17 = $67;
 }
 $68 = $16;
 $69 = ($68|0)==(0);
 if ($69) {
  HEAP8[$27>>0] = 64;
  $70 = ((($27)) + 1|0);
  HEAP8[$70>>0] = 1;
  $71 = ((($27)) + 2|0);
  HEAP16[$71>>1] = 0;
  $72 = $10;
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 4|0);
  HEAP32[$72>>2] = $74;
  ;HEAP16[$73>>1]=HEAP16[$27>>1]|0;HEAP16[$73+2>>1]=HEAP16[$27+2>>1]|0;
  $75 = $10;
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($76)) + 4|0);
  HEAP32[$75>>2] = $77;
  ;HEAP16[$76>>1]=HEAP16[$27>>1]|0;HEAP16[$76+2>>1]=HEAP16[$27+2>>1]|0;
  $78 = $11;
  HEAP32[$78>>2] = 1;
  $6 = 0;
  $371 = $6;
  STACKTOP = sp;return ($371|0);
 }
 $15 = 1;
 while(1) {
  $79 = $15;
  $80 = $16;
  $81 = ($79>>>0)<($80>>>0);
  if (!($81)) {
   break;
  }
  $82 = $15;
  $83 = (($32) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84&65535;
  $86 = ($85|0)!=(0);
  if ($86) {
   break;
  }
  $87 = $15;
  $88 = (($87) + 1)|0;
  $15 = $88;
 }
 $89 = $17;
 $90 = $15;
 $91 = ($89>>>0)<($90>>>0);
 if ($91) {
  $92 = $15;
  $17 = $92;
 }
 $20 = 1;
 $13 = 1;
 while(1) {
  $93 = $13;
  $94 = ($93>>>0)<=(15);
  $95 = $20;
  if (!($94)) {
   break;
  }
  $96 = $95 << 1;
  $20 = $96;
  $97 = $13;
  $98 = (($32) + ($97<<1)|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99&65535;
  $101 = $20;
  $102 = (($101) - ($100))|0;
  $20 = $102;
  $103 = $20;
  $104 = ($103|0)<(0);
  if ($104) {
   label = 24;
   break;
  }
  $105 = $13;
  $106 = (($105) + 1)|0;
  $13 = $106;
 }
 if ((label|0) == 24) {
  $6 = -1;
  $371 = $6;
  STACKTOP = sp;return ($371|0);
 }
 $107 = ($95|0)>(0);
 if ($107) {
  $108 = $7;
  $109 = ($108|0)==(0);
  $110 = $16;
  $111 = ($110|0)!=(1);
  $or$cond = $109 | $111;
  if ($or$cond) {
   $6 = -1;
   $371 = $6;
   STACKTOP = sp;return ($371|0);
  }
 }
 $112 = ((($33)) + 2|0);
 HEAP16[$112>>1] = 0;
 $13 = 1;
 while(1) {
  $113 = $13;
  $114 = ($113>>>0)<(15);
  if (!($114)) {
   break;
  }
  $115 = $13;
  $116 = (($33) + ($115<<1)|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117&65535;
  $119 = $13;
  $120 = (($32) + ($119<<1)|0);
  $121 = HEAP16[$120>>1]|0;
  $122 = $121&65535;
  $123 = (($118) + ($122))|0;
  $124 = $123&65535;
  $125 = $13;
  $126 = (($125) + 1)|0;
  $127 = (($33) + ($126<<1)|0);
  HEAP16[$127>>1] = $124;
  $128 = $13;
  $129 = (($128) + 1)|0;
  $13 = $129;
 }
 $14 = 0;
 while(1) {
  $130 = $14;
  $131 = $9;
  $132 = ($130>>>0)<($131>>>0);
  if (!($132)) {
   break;
  }
  $133 = $14;
  $134 = $8;
  $135 = (($134) + ($133<<1)|0);
  $136 = HEAP16[$135>>1]|0;
  $137 = $136&65535;
  $138 = ($137|0)!=(0);
  if ($138) {
   $139 = $14;
   $140 = $139&65535;
   $141 = $14;
   $142 = $8;
   $143 = (($142) + ($141<<1)|0);
   $144 = HEAP16[$143>>1]|0;
   $145 = $144&65535;
   $146 = (($33) + ($145<<1)|0);
   $147 = HEAP16[$146>>1]|0;
   $148 = (($147) + 1)<<16>>16;
   HEAP16[$146>>1] = $148;
   $149 = $147&65535;
   $150 = $12;
   $151 = (($150) + ($149<<1)|0);
   HEAP16[$151>>1] = $140;
  }
  $152 = $14;
  $153 = (($152) + 1)|0;
  $14 = $153;
 }
 $154 = $7;
 switch ($154|0) {
 case 0:  {
  $155 = $12;
  $30 = $155;
  $29 = $155;
  $31 = 19;
  break;
 }
 case 1:  {
  $29 = 10630;
  $156 = $29;
  $157 = ((($156)) + -514|0);
  $29 = $157;
  $30 = 10692;
  $158 = $30;
  $159 = ((($158)) + -514|0);
  $30 = $159;
  $31 = 256;
  break;
 }
 default: {
  $29 = 10754;
  $30 = 10818;
  $31 = -1;
 }
 }
 $22 = 0;
 $14 = 0;
 $160 = $15;
 $13 = $160;
 $161 = $10;
 $162 = HEAP32[$161>>2]|0;
 $28 = $162;
 $163 = $17;
 $18 = $163;
 $19 = 0;
 $25 = -1;
 $164 = $17;
 $165 = 1 << $164;
 $21 = $165;
 $166 = $21;
 $167 = (($166) - 1)|0;
 $26 = $167;
 $168 = $7;
 $169 = ($168|0)==(1);
 $170 = $21;
 $171 = ($170>>>0)>(852);
 $or$cond3 = $169 & $171;
 if (!($or$cond3)) {
  $172 = $7;
  $173 = ($172|0)==(2);
  $174 = $21;
  $175 = ($174>>>0)>(592);
  $or$cond5 = $173 & $175;
  if (!($or$cond5)) {
   while(1) {
    $176 = $13;
    $177 = $19;
    $178 = (($176) - ($177))|0;
    $179 = $178&255;
    $180 = ((($27)) + 1|0);
    HEAP8[$180>>0] = $179;
    $181 = $14;
    $182 = $12;
    $183 = (($182) + ($181<<1)|0);
    $184 = HEAP16[$183>>1]|0;
    $185 = $184&65535;
    $186 = $31;
    $187 = ($185|0)<($186|0);
    do {
     if ($187) {
      HEAP8[$27>>0] = 0;
      $188 = $14;
      $189 = $12;
      $190 = (($189) + ($188<<1)|0);
      $191 = HEAP16[$190>>1]|0;
      $192 = ((($27)) + 2|0);
      HEAP16[$192>>1] = $191;
     } else {
      $193 = $14;
      $194 = $12;
      $195 = (($194) + ($193<<1)|0);
      $196 = HEAP16[$195>>1]|0;
      $197 = $196&65535;
      $198 = $31;
      $199 = ($197|0)>($198|0);
      if ($199) {
       $200 = $14;
       $201 = $12;
       $202 = (($201) + ($200<<1)|0);
       $203 = HEAP16[$202>>1]|0;
       $204 = $203&65535;
       $205 = $30;
       $206 = (($205) + ($204<<1)|0);
       $207 = HEAP16[$206>>1]|0;
       $208 = $207&255;
       HEAP8[$27>>0] = $208;
       $209 = $14;
       $210 = $12;
       $211 = (($210) + ($209<<1)|0);
       $212 = HEAP16[$211>>1]|0;
       $213 = $212&65535;
       $214 = $29;
       $215 = (($214) + ($213<<1)|0);
       $216 = HEAP16[$215>>1]|0;
       $217 = ((($27)) + 2|0);
       HEAP16[$217>>1] = $216;
       break;
      } else {
       HEAP8[$27>>0] = 96;
       $218 = ((($27)) + 2|0);
       HEAP16[$218>>1] = 0;
       break;
      }
     }
    } while(0);
    $219 = $13;
    $220 = $19;
    $221 = (($219) - ($220))|0;
    $222 = 1 << $221;
    $23 = $222;
    $223 = $18;
    $224 = 1 << $223;
    $24 = $224;
    $225 = $24;
    $15 = $225;
    while(1) {
     $226 = $23;
     $227 = $24;
     $228 = (($227) - ($226))|0;
     $24 = $228;
     $229 = $22;
     $230 = $19;
     $231 = $229 >>> $230;
     $232 = $24;
     $233 = (($231) + ($232))|0;
     $234 = $28;
     $235 = (($234) + ($233<<2)|0);
     ;HEAP16[$235>>1]=HEAP16[$27>>1]|0;HEAP16[$235+2>>1]=HEAP16[$27+2>>1]|0;
     $236 = $24;
     $237 = ($236|0)!=(0);
     if (!($237)) {
      break;
     }
    }
    $238 = $13;
    $239 = (($238) - 1)|0;
    $240 = 1 << $239;
    $23 = $240;
    while(1) {
     $241 = $22;
     $242 = $23;
     $243 = $241 & $242;
     $244 = ($243|0)!=(0);
     $245 = $23;
     if (!($244)) {
      break;
     }
     $246 = $245 >>> 1;
     $23 = $246;
    }
    $247 = ($245|0)!=(0);
    if ($247) {
     $248 = $23;
     $249 = (($248) - 1)|0;
     $250 = $22;
     $251 = $250 & $249;
     $22 = $251;
     $252 = $23;
     $253 = $22;
     $254 = (($253) + ($252))|0;
     $22 = $254;
    } else {
     $22 = 0;
    }
    $255 = $14;
    $256 = (($255) + 1)|0;
    $14 = $256;
    $257 = $13;
    $258 = (($32) + ($257<<1)|0);
    $259 = HEAP16[$258>>1]|0;
    $260 = (($259) + -1)<<16>>16;
    HEAP16[$258>>1] = $260;
    $261 = $260&65535;
    $262 = ($261|0)==(0);
    if ($262) {
     $263 = $13;
     $264 = $16;
     $265 = ($263|0)==($264|0);
     if ($265) {
      break;
     }
     $266 = $14;
     $267 = $12;
     $268 = (($267) + ($266<<1)|0);
     $269 = HEAP16[$268>>1]|0;
     $270 = $269&65535;
     $271 = $8;
     $272 = (($271) + ($270<<1)|0);
     $273 = HEAP16[$272>>1]|0;
     $274 = $273&65535;
     $13 = $274;
    }
    $275 = $13;
    $276 = $17;
    $277 = ($275>>>0)>($276>>>0);
    if (!($277)) {
     continue;
    }
    $278 = $22;
    $279 = $26;
    $280 = $278 & $279;
    $281 = $25;
    $282 = ($280|0)!=($281|0);
    if (!($282)) {
     continue;
    }
    $283 = $19;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $17;
     $19 = $285;
    }
    $286 = $15;
    $287 = $28;
    $288 = (($287) + ($286<<2)|0);
    $28 = $288;
    $289 = $13;
    $290 = $19;
    $291 = (($289) - ($290))|0;
    $18 = $291;
    $292 = $18;
    $293 = 1 << $292;
    $20 = $293;
    while(1) {
     $294 = $18;
     $295 = $19;
     $296 = (($294) + ($295))|0;
     $297 = $16;
     $298 = ($296>>>0)<($297>>>0);
     if (!($298)) {
      break;
     }
     $299 = $18;
     $300 = $19;
     $301 = (($299) + ($300))|0;
     $302 = (($32) + ($301<<1)|0);
     $303 = HEAP16[$302>>1]|0;
     $304 = $303&65535;
     $305 = $20;
     $306 = (($305) - ($304))|0;
     $20 = $306;
     $307 = $20;
     $308 = ($307|0)<=(0);
     if ($308) {
      break;
     }
     $309 = $18;
     $310 = (($309) + 1)|0;
     $18 = $310;
     $311 = $20;
     $312 = $311 << 1;
     $20 = $312;
    }
    $313 = $18;
    $314 = 1 << $313;
    $315 = $21;
    $316 = (($315) + ($314))|0;
    $21 = $316;
    $317 = $7;
    $318 = ($317|0)==(1);
    $319 = $21;
    $320 = ($319>>>0)>(852);
    $or$cond7 = $318 & $320;
    if ($or$cond7) {
     label = 70;
     break;
    }
    $321 = $7;
    $322 = ($321|0)==(2);
    $323 = $21;
    $324 = ($323>>>0)>(592);
    $or$cond9 = $322 & $324;
    if ($or$cond9) {
     label = 70;
     break;
    }
    $325 = $22;
    $326 = $26;
    $327 = $325 & $326;
    $25 = $327;
    $328 = $18;
    $329 = $328&255;
    $330 = $25;
    $331 = $10;
    $332 = HEAP32[$331>>2]|0;
    $333 = (($332) + ($330<<2)|0);
    HEAP8[$333>>0] = $329;
    $334 = $17;
    $335 = $334&255;
    $336 = $25;
    $337 = $10;
    $338 = HEAP32[$337>>2]|0;
    $339 = (($338) + ($336<<2)|0);
    $340 = ((($339)) + 1|0);
    HEAP8[$340>>0] = $335;
    $341 = $28;
    $342 = $10;
    $343 = HEAP32[$342>>2]|0;
    $344 = $341;
    $345 = $343;
    $346 = (($344) - ($345))|0;
    $347 = (($346|0) / 4)&-1;
    $348 = $347&65535;
    $349 = $25;
    $350 = $10;
    $351 = HEAP32[$350>>2]|0;
    $352 = (($351) + ($349<<2)|0);
    $353 = ((($352)) + 2|0);
    HEAP16[$353>>1] = $348;
   }
   if ((label|0) == 70) {
    $6 = 1;
    $371 = $6;
    STACKTOP = sp;return ($371|0);
   }
   $354 = $22;
   $355 = ($354|0)!=(0);
   if ($355) {
    HEAP8[$27>>0] = 64;
    $356 = $13;
    $357 = $19;
    $358 = (($356) - ($357))|0;
    $359 = $358&255;
    $360 = ((($27)) + 1|0);
    HEAP8[$360>>0] = $359;
    $361 = ((($27)) + 2|0);
    HEAP16[$361>>1] = 0;
    $362 = $22;
    $363 = $28;
    $364 = (($363) + ($362<<2)|0);
    ;HEAP16[$364>>1]=HEAP16[$27>>1]|0;HEAP16[$364+2>>1]=HEAP16[$27+2>>1]|0;
   }
   $365 = $21;
   $366 = $10;
   $367 = HEAP32[$366>>2]|0;
   $368 = (($367) + ($365<<2)|0);
   HEAP32[$366>>2] = $368;
   $369 = $17;
   $370 = $11;
   HEAP32[$370>>2] = $369;
   $6 = 0;
   $371 = $6;
   STACKTOP = sp;return ($371|0);
  }
 }
 $6 = 1;
 $371 = $6;
 STACKTOP = sp;return ($371|0);
}
function _inflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $20 = sp + 88|0;
 $2 = $0;
 $3 = $1;
 $25 = $2;
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $4 = $27;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + -1|0);
 $5 = $30;
 $31 = $5;
 $32 = $2;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) - 5)|0;
 $36 = (($31) + ($35)|0);
 $6 = $36;
 $37 = $2;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + -1|0);
 $7 = $40;
 $41 = $7;
 $42 = $3;
 $43 = $2;
 $44 = ((($43)) + 16|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($42) - ($45))|0;
 $47 = (0 - ($46))|0;
 $48 = (($41) + ($47)|0);
 $8 = $48;
 $49 = $7;
 $50 = $2;
 $51 = ((($50)) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) - 257)|0;
 $54 = (($49) + ($53)|0);
 $9 = $54;
 $55 = $4;
 $56 = ((($55)) + 40|0);
 $57 = HEAP32[$56>>2]|0;
 $10 = $57;
 $58 = $4;
 $59 = ((($58)) + 44|0);
 $60 = HEAP32[$59>>2]|0;
 $11 = $60;
 $61 = $4;
 $62 = ((($61)) + 48|0);
 $63 = HEAP32[$62>>2]|0;
 $12 = $63;
 $64 = $4;
 $65 = ((($64)) + 52|0);
 $66 = HEAP32[$65>>2]|0;
 $13 = $66;
 $67 = $4;
 $68 = ((($67)) + 56|0);
 $69 = HEAP32[$68>>2]|0;
 $14 = $69;
 $70 = $4;
 $71 = ((($70)) + 60|0);
 $72 = HEAP32[$71>>2]|0;
 $15 = $72;
 $73 = $4;
 $74 = ((($73)) + 76|0);
 $75 = HEAP32[$74>>2]|0;
 $16 = $75;
 $76 = $4;
 $77 = ((($76)) + 80|0);
 $78 = HEAP32[$77>>2]|0;
 $17 = $78;
 $79 = $4;
 $80 = ((($79)) + 84|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = 1 << $81;
 $83 = (($82) - 1)|0;
 $18 = $83;
 $84 = $4;
 $85 = ((($84)) + 88|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = 1 << $86;
 $88 = (($87) - 1)|0;
 $19 = $88;
 L1: while(1) {
  $89 = $15;
  $90 = ($89>>>0)<(15);
  if ($90) {
   $91 = $5;
   $92 = ((($91)) + 1|0);
   $5 = $92;
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $15;
   $96 = $94 << $95;
   $97 = $14;
   $98 = (($97) + ($96))|0;
   $14 = $98;
   $99 = $15;
   $100 = (($99) + 8)|0;
   $15 = $100;
   $101 = $5;
   $102 = ((($101)) + 1|0);
   $5 = $102;
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = $15;
   $106 = $104 << $105;
   $107 = $14;
   $108 = (($107) + ($106))|0;
   $14 = $108;
   $109 = $15;
   $110 = (($109) + 8)|0;
   $15 = $110;
  }
  $111 = $14;
  $112 = $18;
  $113 = $111 & $112;
  $114 = $16;
  $115 = (($114) + ($113<<2)|0);
  ;HEAP16[$20>>1]=HEAP16[$115>>1]|0;HEAP16[$20+2>>1]=HEAP16[$115+2>>1]|0;
  while(1) {
   $116 = ((($20)) + 1|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $21 = $118;
   $119 = $21;
   $120 = $14;
   $121 = $120 >>> $119;
   $14 = $121;
   $122 = $21;
   $123 = $15;
   $124 = (($123) - ($122))|0;
   $15 = $124;
   $125 = HEAP8[$20>>0]|0;
   $126 = $125&255;
   $21 = $126;
   $127 = $21;
   $128 = ($127|0)==(0);
   if ($128) {
    label = 6;
    break;
   }
   $134 = $21;
   $135 = $134 & 16;
   $136 = ($135|0)!=(0);
   if ($136) {
    label = 8;
    break;
   }
   $461 = $21;
   $462 = $461 & 64;
   $463 = ($462|0)==(0);
   if (!($463)) {
    label = 55;
    break L1;
   }
   $464 = ((($20)) + 2|0);
   $465 = HEAP16[$464>>1]|0;
   $466 = $465&65535;
   $467 = $14;
   $468 = $21;
   $469 = 1 << $468;
   $470 = (($469) - 1)|0;
   $471 = $467 & $470;
   $472 = (($466) + ($471))|0;
   $473 = $16;
   $474 = (($473) + ($472<<2)|0);
   ;HEAP16[$20>>1]=HEAP16[$474>>1]|0;HEAP16[$20+2>>1]=HEAP16[$474+2>>1]|0;
  }
  do {
   if ((label|0) == 6) {
    label = 0;
    $129 = ((($20)) + 2|0);
    $130 = HEAP16[$129>>1]|0;
    $131 = $130&255;
    $132 = $7;
    $133 = ((($132)) + 1|0);
    $7 = $133;
    HEAP8[$133>>0] = $131;
   }
   else if ((label|0) == 8) {
    label = 0;
    $137 = ((($20)) + 2|0);
    $138 = HEAP16[$137>>1]|0;
    $139 = $138&65535;
    $22 = $139;
    $140 = $21;
    $141 = $140 & 15;
    $21 = $141;
    $142 = $21;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = $15;
     $145 = $21;
     $146 = ($144>>>0)<($145>>>0);
     if ($146) {
      $147 = $5;
      $148 = ((($147)) + 1|0);
      $5 = $148;
      $149 = HEAP8[$148>>0]|0;
      $150 = $149&255;
      $151 = $15;
      $152 = $150 << $151;
      $153 = $14;
      $154 = (($153) + ($152))|0;
      $14 = $154;
      $155 = $15;
      $156 = (($155) + 8)|0;
      $15 = $156;
     }
     $157 = $14;
     $158 = $21;
     $159 = 1 << $158;
     $160 = (($159) - 1)|0;
     $161 = $157 & $160;
     $162 = $22;
     $163 = (($162) + ($161))|0;
     $22 = $163;
     $164 = $21;
     $165 = $14;
     $166 = $165 >>> $164;
     $14 = $166;
     $167 = $21;
     $168 = $15;
     $169 = (($168) - ($167))|0;
     $15 = $169;
    }
    $170 = $15;
    $171 = ($170>>>0)<(15);
    if ($171) {
     $172 = $5;
     $173 = ((($172)) + 1|0);
     $5 = $173;
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = $15;
     $177 = $175 << $176;
     $178 = $14;
     $179 = (($178) + ($177))|0;
     $14 = $179;
     $180 = $15;
     $181 = (($180) + 8)|0;
     $15 = $181;
     $182 = $5;
     $183 = ((($182)) + 1|0);
     $5 = $183;
     $184 = HEAP8[$183>>0]|0;
     $185 = $184&255;
     $186 = $15;
     $187 = $185 << $186;
     $188 = $14;
     $189 = (($188) + ($187))|0;
     $14 = $189;
     $190 = $15;
     $191 = (($190) + 8)|0;
     $15 = $191;
    }
    $192 = $14;
    $193 = $19;
    $194 = $192 & $193;
    $195 = $17;
    $196 = (($195) + ($194<<2)|0);
    ;HEAP16[$20>>1]=HEAP16[$196>>1]|0;HEAP16[$20+2>>1]=HEAP16[$196+2>>1]|0;
    while(1) {
     $197 = ((($20)) + 1|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198&255;
     $21 = $199;
     $200 = $21;
     $201 = $14;
     $202 = $201 >>> $200;
     $14 = $202;
     $203 = $21;
     $204 = $15;
     $205 = (($204) - ($203))|0;
     $15 = $205;
     $206 = HEAP8[$20>>0]|0;
     $207 = $206&255;
     $21 = $207;
     $208 = $21;
     $209 = $208 & 16;
     $210 = ($209|0)!=(0);
     if ($210) {
      break;
     }
     $444 = $21;
     $445 = $444 & 64;
     $446 = ($445|0)==(0);
     if (!($446)) {
      label = 52;
      break L1;
     }
     $447 = ((($20)) + 2|0);
     $448 = HEAP16[$447>>1]|0;
     $449 = $448&65535;
     $450 = $14;
     $451 = $21;
     $452 = 1 << $451;
     $453 = (($452) - 1)|0;
     $454 = $450 & $453;
     $455 = (($449) + ($454))|0;
     $456 = $17;
     $457 = (($456) + ($455<<2)|0);
     ;HEAP16[$20>>1]=HEAP16[$457>>1]|0;HEAP16[$20+2>>1]=HEAP16[$457+2>>1]|0;
    }
    $211 = ((($20)) + 2|0);
    $212 = HEAP16[$211>>1]|0;
    $213 = $212&65535;
    $23 = $213;
    $214 = $21;
    $215 = $214 & 15;
    $21 = $215;
    $216 = $15;
    $217 = $21;
    $218 = ($216>>>0)<($217>>>0);
    if ($218) {
     $219 = $5;
     $220 = ((($219)) + 1|0);
     $5 = $220;
     $221 = HEAP8[$220>>0]|0;
     $222 = $221&255;
     $223 = $15;
     $224 = $222 << $223;
     $225 = $14;
     $226 = (($225) + ($224))|0;
     $14 = $226;
     $227 = $15;
     $228 = (($227) + 8)|0;
     $15 = $228;
     $229 = $15;
     $230 = $21;
     $231 = ($229>>>0)<($230>>>0);
     if ($231) {
      $232 = $5;
      $233 = ((($232)) + 1|0);
      $5 = $233;
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $15;
      $237 = $235 << $236;
      $238 = $14;
      $239 = (($238) + ($237))|0;
      $14 = $239;
      $240 = $15;
      $241 = (($240) + 8)|0;
      $15 = $241;
     }
    }
    $242 = $14;
    $243 = $21;
    $244 = 1 << $243;
    $245 = (($244) - 1)|0;
    $246 = $242 & $245;
    $247 = $23;
    $248 = (($247) + ($246))|0;
    $23 = $248;
    $249 = $21;
    $250 = $14;
    $251 = $250 >>> $249;
    $14 = $251;
    $252 = $21;
    $253 = $15;
    $254 = (($253) - ($252))|0;
    $15 = $254;
    $255 = $7;
    $256 = $8;
    $257 = $255;
    $258 = $256;
    $259 = (($257) - ($258))|0;
    $21 = $259;
    $260 = $23;
    $261 = $21;
    $262 = ($260>>>0)>($261>>>0);
    if (!($262)) {
     $407 = $7;
     $408 = $23;
     $409 = (0 - ($408))|0;
     $410 = (($407) + ($409)|0);
     $24 = $410;
     while(1) {
      $411 = $24;
      $412 = ((($411)) + 1|0);
      $24 = $412;
      $413 = HEAP8[$412>>0]|0;
      $414 = $7;
      $415 = ((($414)) + 1|0);
      $7 = $415;
      HEAP8[$415>>0] = $413;
      $416 = $24;
      $417 = ((($416)) + 1|0);
      $24 = $417;
      $418 = HEAP8[$417>>0]|0;
      $419 = $7;
      $420 = ((($419)) + 1|0);
      $7 = $420;
      HEAP8[$420>>0] = $418;
      $421 = $24;
      $422 = ((($421)) + 1|0);
      $24 = $422;
      $423 = HEAP8[$422>>0]|0;
      $424 = $7;
      $425 = ((($424)) + 1|0);
      $7 = $425;
      HEAP8[$425>>0] = $423;
      $426 = $22;
      $427 = (($426) - 3)|0;
      $22 = $427;
      $428 = $22;
      $429 = ($428>>>0)>(2);
      if (!($429)) {
       break;
      }
     }
     $430 = $22;
     $431 = ($430|0)!=(0);
     if (!($431)) {
      break;
     }
     $432 = $24;
     $433 = ((($432)) + 1|0);
     $24 = $433;
     $434 = HEAP8[$433>>0]|0;
     $435 = $7;
     $436 = ((($435)) + 1|0);
     $7 = $436;
     HEAP8[$436>>0] = $434;
     $437 = $22;
     $438 = ($437>>>0)>(1);
     if (!($438)) {
      break;
     }
     $439 = $24;
     $440 = ((($439)) + 1|0);
     $24 = $440;
     $441 = HEAP8[$440>>0]|0;
     $442 = $7;
     $443 = ((($442)) + 1|0);
     $7 = $443;
     HEAP8[$443>>0] = $441;
     break;
    }
    $263 = $23;
    $264 = $21;
    $265 = (($263) - ($264))|0;
    $21 = $265;
    $266 = $21;
    $267 = $11;
    $268 = ($266>>>0)>($267>>>0);
    if ($268) {
     $269 = $4;
     $270 = ((($269)) + 7104|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = ($271|0)!=(0);
     if ($272) {
      label = 22;
      break L1;
     }
    }
    $276 = $13;
    $277 = ((($276)) + -1|0);
    $24 = $277;
    $278 = $12;
    $279 = ($278|0)==(0);
    do {
     if ($279) {
      $280 = $10;
      $281 = $21;
      $282 = (($280) - ($281))|0;
      $283 = $24;
      $284 = (($283) + ($282)|0);
      $24 = $284;
      $285 = $21;
      $286 = $22;
      $287 = ($285>>>0)<($286>>>0);
      if ($287) {
       $288 = $21;
       $289 = $22;
       $290 = (($289) - ($288))|0;
       $22 = $290;
       while(1) {
        $291 = $24;
        $292 = ((($291)) + 1|0);
        $24 = $292;
        $293 = HEAP8[$292>>0]|0;
        $294 = $7;
        $295 = ((($294)) + 1|0);
        $7 = $295;
        HEAP8[$295>>0] = $293;
        $296 = $21;
        $297 = (($296) + -1)|0;
        $21 = $297;
        $298 = ($297|0)!=(0);
        if (!($298)) {
         break;
        }
       }
       $299 = $7;
       $300 = $23;
       $301 = (0 - ($300))|0;
       $302 = (($299) + ($301)|0);
       $24 = $302;
      }
     } else {
      $303 = $12;
      $304 = $21;
      $305 = ($303>>>0)<($304>>>0);
      if (!($305)) {
       $351 = $12;
       $352 = $21;
       $353 = (($351) - ($352))|0;
       $354 = $24;
       $355 = (($354) + ($353)|0);
       $24 = $355;
       $356 = $21;
       $357 = $22;
       $358 = ($356>>>0)<($357>>>0);
       if (!($358)) {
        break;
       }
       $359 = $21;
       $360 = $22;
       $361 = (($360) - ($359))|0;
       $22 = $361;
       while(1) {
        $362 = $24;
        $363 = ((($362)) + 1|0);
        $24 = $363;
        $364 = HEAP8[$363>>0]|0;
        $365 = $7;
        $366 = ((($365)) + 1|0);
        $7 = $366;
        HEAP8[$366>>0] = $364;
        $367 = $21;
        $368 = (($367) + -1)|0;
        $21 = $368;
        $369 = ($368|0)!=(0);
        if (!($369)) {
         break;
        }
       }
       $370 = $7;
       $371 = $23;
       $372 = (0 - ($371))|0;
       $373 = (($370) + ($372)|0);
       $24 = $373;
       break;
      }
      $306 = $10;
      $307 = $12;
      $308 = (($306) + ($307))|0;
      $309 = $21;
      $310 = (($308) - ($309))|0;
      $311 = $24;
      $312 = (($311) + ($310)|0);
      $24 = $312;
      $313 = $12;
      $314 = $21;
      $315 = (($314) - ($313))|0;
      $21 = $315;
      $316 = $21;
      $317 = $22;
      $318 = ($316>>>0)<($317>>>0);
      if ($318) {
       $319 = $21;
       $320 = $22;
       $321 = (($320) - ($319))|0;
       $22 = $321;
       while(1) {
        $322 = $24;
        $323 = ((($322)) + 1|0);
        $24 = $323;
        $324 = HEAP8[$323>>0]|0;
        $325 = $7;
        $326 = ((($325)) + 1|0);
        $7 = $326;
        HEAP8[$326>>0] = $324;
        $327 = $21;
        $328 = (($327) + -1)|0;
        $21 = $328;
        $329 = ($328|0)!=(0);
        if (!($329)) {
         break;
        }
       }
       $330 = $13;
       $331 = ((($330)) + -1|0);
       $24 = $331;
       $332 = $12;
       $333 = $22;
       $334 = ($332>>>0)<($333>>>0);
       if ($334) {
        $335 = $12;
        $21 = $335;
        $336 = $21;
        $337 = $22;
        $338 = (($337) - ($336))|0;
        $22 = $338;
        while(1) {
         $339 = $24;
         $340 = ((($339)) + 1|0);
         $24 = $340;
         $341 = HEAP8[$340>>0]|0;
         $342 = $7;
         $343 = ((($342)) + 1|0);
         $7 = $343;
         HEAP8[$343>>0] = $341;
         $344 = $21;
         $345 = (($344) + -1)|0;
         $21 = $345;
         $346 = ($345|0)!=(0);
         if (!($346)) {
          break;
         }
        }
        $347 = $7;
        $348 = $23;
        $349 = (0 - ($348))|0;
        $350 = (($347) + ($349)|0);
        $24 = $350;
       }
      }
     }
    } while(0);
    while(1) {
     $374 = $22;
     $375 = ($374>>>0)>(2);
     if (!($375)) {
      break;
     }
     $376 = $24;
     $377 = ((($376)) + 1|0);
     $24 = $377;
     $378 = HEAP8[$377>>0]|0;
     $379 = $7;
     $380 = ((($379)) + 1|0);
     $7 = $380;
     HEAP8[$380>>0] = $378;
     $381 = $24;
     $382 = ((($381)) + 1|0);
     $24 = $382;
     $383 = HEAP8[$382>>0]|0;
     $384 = $7;
     $385 = ((($384)) + 1|0);
     $7 = $385;
     HEAP8[$385>>0] = $383;
     $386 = $24;
     $387 = ((($386)) + 1|0);
     $24 = $387;
     $388 = HEAP8[$387>>0]|0;
     $389 = $7;
     $390 = ((($389)) + 1|0);
     $7 = $390;
     HEAP8[$390>>0] = $388;
     $391 = $22;
     $392 = (($391) - 3)|0;
     $22 = $392;
    }
    $393 = $22;
    $394 = ($393|0)!=(0);
    if ($394) {
     $395 = $24;
     $396 = ((($395)) + 1|0);
     $24 = $396;
     $397 = HEAP8[$396>>0]|0;
     $398 = $7;
     $399 = ((($398)) + 1|0);
     $7 = $399;
     HEAP8[$399>>0] = $397;
     $400 = $22;
     $401 = ($400>>>0)>(1);
     if ($401) {
      $402 = $24;
      $403 = ((($402)) + 1|0);
      $24 = $403;
      $404 = HEAP8[$403>>0]|0;
      $405 = $7;
      $406 = ((($405)) + 1|0);
      $7 = $406;
      HEAP8[$406>>0] = $404;
     }
    }
   }
  } while(0);
  $482 = $5;
  $483 = $6;
  $484 = ($482>>>0)<($483>>>0);
  if (!($484)) {
   break;
  }
  $485 = $7;
  $486 = $9;
  $487 = ($485>>>0)<($486>>>0);
  if (!($487)) {
   break;
  }
 }
 do {
  if ((label|0) == 22) {
   $273 = $2;
   $274 = ((($273)) + 24|0);
   HEAP32[$274>>2] = 15368;
   $275 = $4;
   HEAP32[$275>>2] = 29;
  }
  else if ((label|0) == 52) {
   $458 = $2;
   $459 = ((($458)) + 24|0);
   HEAP32[$459>>2] = 15398;
   $460 = $4;
   HEAP32[$460>>2] = 29;
  }
  else if ((label|0) == 55) {
   $475 = $21;
   $476 = $475 & 32;
   $477 = ($476|0)!=(0);
   if ($477) {
    $478 = $4;
    HEAP32[$478>>2] = 11;
    break;
   } else {
    $479 = $2;
    $480 = ((($479)) + 24|0);
    HEAP32[$480>>2] = 15420;
    $481 = $4;
    HEAP32[$481>>2] = 29;
    break;
   }
  }
 } while(0);
 $488 = $15;
 $489 = $488 >>> 3;
 $22 = $489;
 $490 = $22;
 $491 = $5;
 $492 = (0 - ($490))|0;
 $493 = (($491) + ($492)|0);
 $5 = $493;
 $494 = $22;
 $495 = $494 << 3;
 $496 = $15;
 $497 = (($496) - ($495))|0;
 $15 = $497;
 $498 = $15;
 $499 = 1 << $498;
 $500 = (($499) - 1)|0;
 $501 = $14;
 $502 = $501 & $500;
 $14 = $502;
 $503 = $5;
 $504 = ((($503)) + 1|0);
 $505 = $2;
 HEAP32[$505>>2] = $504;
 $506 = $7;
 $507 = ((($506)) + 1|0);
 $508 = $2;
 $509 = ((($508)) + 12|0);
 HEAP32[$509>>2] = $507;
 $510 = $5;
 $511 = $6;
 $512 = ($510>>>0)<($511>>>0);
 if ($512) {
  $513 = $6;
  $514 = $5;
  $515 = $513;
  $516 = $514;
  $517 = (($515) - ($516))|0;
  $518 = (5 + ($517))|0;
  $527 = $518;
 } else {
  $519 = $5;
  $520 = $6;
  $521 = $519;
  $522 = $520;
  $523 = (($521) - ($522))|0;
  $524 = (5 - ($523))|0;
  $527 = $524;
 }
 $525 = $2;
 $526 = ((($525)) + 4|0);
 HEAP32[$526>>2] = $527;
 $528 = $7;
 $529 = $9;
 $530 = ($528>>>0)<($529>>>0);
 if ($530) {
  $531 = $9;
  $532 = $7;
  $533 = $531;
  $534 = $532;
  $535 = (($533) - ($534))|0;
  $536 = (257 + ($535))|0;
  $545 = $536;
  $543 = $2;
  $544 = ((($543)) + 16|0);
  HEAP32[$544>>2] = $545;
  $546 = $14;
  $547 = $4;
  $548 = ((($547)) + 56|0);
  HEAP32[$548>>2] = $546;
  $549 = $15;
  $550 = $4;
  $551 = ((($550)) + 60|0);
  HEAP32[$551>>2] = $549;
  STACKTOP = sp;return;
 } else {
  $537 = $7;
  $538 = $9;
  $539 = $537;
  $540 = $538;
  $541 = (($539) - ($540))|0;
  $542 = (257 - ($541))|0;
  $545 = $542;
  $543 = $2;
  $544 = ((($543)) + 16|0);
  HEAP32[$544>>2] = $545;
  $546 = $14;
  $547 = $4;
  $548 = ((($547)) + 56|0);
  HEAP32[$548>>2] = $546;
  $549 = $15;
  $550 = $4;
  $551 = ((($550)) + 60|0);
  HEAP32[$551>>2] = $549;
  STACKTOP = sp;return;
 }
}
function _updatewindow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 $12 = $7;
 $13 = ((($12)) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $4;
  $20 = ((($19)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $7;
  $23 = ((($22)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = 1 << $24;
  $26 = (FUNCTION_TABLE_iiii[$18 & 15]($21,$25,1)|0);
  $27 = $7;
  $28 = ((($27)) + 52|0);
  HEAP32[$28>>2] = $26;
  $29 = $7;
  $30 = ((($29)) + 52|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $3 = 1;
   $140 = $3;
   STACKTOP = sp;return ($140|0);
  }
 }
 $33 = $7;
 $34 = ((($33)) + 40|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = $7;
  $38 = ((($37)) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = 1 << $39;
  $41 = $7;
  $42 = ((($41)) + 40|0);
  HEAP32[$42>>2] = $40;
  $43 = $7;
  $44 = ((($43)) + 48|0);
  HEAP32[$44>>2] = 0;
  $45 = $7;
  $46 = ((($45)) + 44|0);
  HEAP32[$46>>2] = 0;
 }
 $47 = $6;
 $48 = $7;
 $49 = ((($48)) + 40|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($47>>>0)>=($50>>>0);
 $52 = $7;
 do {
  if ($51) {
   $53 = ((($52)) + 52|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $5;
   $56 = $7;
   $57 = ((($56)) + 40|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (0 - ($58))|0;
   $60 = (($55) + ($59)|0);
   $61 = $7;
   $62 = ((($61)) + 40|0);
   $63 = HEAP32[$62>>2]|0;
   _memcpy(($54|0),($60|0),($63|0))|0;
   $64 = $7;
   $65 = ((($64)) + 48|0);
   HEAP32[$65>>2] = 0;
   $66 = $7;
   $67 = ((($66)) + 40|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $7;
   $70 = ((($69)) + 44|0);
   HEAP32[$70>>2] = $68;
  } else {
   $71 = ((($52)) + 40|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $7;
   $74 = ((($73)) + 48|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($72) - ($75))|0;
   $8 = $76;
   $77 = $8;
   $78 = $6;
   $79 = ($77>>>0)>($78>>>0);
   if ($79) {
    $80 = $6;
    $8 = $80;
   }
   $81 = $7;
   $82 = ((($81)) + 52|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $7;
   $85 = ((($84)) + 48|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($83) + ($86)|0);
   $88 = $5;
   $89 = $6;
   $90 = (0 - ($89))|0;
   $91 = (($88) + ($90)|0);
   $92 = $8;
   _memcpy(($87|0),($91|0),($92|0))|0;
   $93 = $8;
   $94 = $6;
   $95 = (($94) - ($93))|0;
   $6 = $95;
   $96 = $6;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $7;
    $99 = ((($98)) + 52|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $5;
    $102 = $6;
    $103 = (0 - ($102))|0;
    $104 = (($101) + ($103)|0);
    $105 = $6;
    _memcpy(($100|0),($104|0),($105|0))|0;
    $106 = $6;
    $107 = $7;
    $108 = ((($107)) + 48|0);
    HEAP32[$108>>2] = $106;
    $109 = $7;
    $110 = ((($109)) + 40|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $7;
    $113 = ((($112)) + 44|0);
    HEAP32[$113>>2] = $111;
    break;
   }
   $114 = $8;
   $115 = $7;
   $116 = ((($115)) + 48|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + ($114))|0;
   HEAP32[$116>>2] = $118;
   $119 = $7;
   $120 = ((($119)) + 48|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $7;
   $123 = ((($122)) + 40|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($121|0)==($124|0);
   if ($125) {
    $126 = $7;
    $127 = ((($126)) + 48|0);
    HEAP32[$127>>2] = 0;
   }
   $128 = $7;
   $129 = ((($128)) + 44|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $7;
   $132 = ((($131)) + 40|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($130>>>0)<($133>>>0);
   if ($134) {
    $135 = $8;
    $136 = $7;
    $137 = ((($136)) + 44|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + ($135))|0;
    HEAP32[$137>>2] = $139;
   }
  }
 } while(0);
 $3 = 0;
 $140 = $3;
 STACKTOP = sp;return ($140|0);
}
function _gz_look($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 84|0);
 $3 = $5;
 $6 = $2;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = $2;
   $11 = ((($10)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_malloc($12)|0);
   $14 = $2;
   $15 = ((($14)) + 32|0);
   HEAP32[$15>>2] = $13;
   $16 = $2;
   $17 = ((($16)) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 << 1;
   $20 = (_malloc($19)|0);
   $21 = $2;
   $22 = ((($21)) + 36|0);
   HEAP32[$22>>2] = $20;
   $23 = $2;
   $24 = ((($23)) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = $2;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if (!($30)) {
     $46 = $2;
     $47 = ((($46)) + 28|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $2;
     $50 = ((($49)) + 24|0);
     HEAP32[$50>>2] = $48;
     $51 = $2;
     $52 = ((($51)) + 84|0);
     $53 = ((($52)) + 32|0);
     HEAP32[$53>>2] = 0;
     $54 = $2;
     $55 = ((($54)) + 84|0);
     $56 = ((($55)) + 36|0);
     HEAP32[$56>>2] = 0;
     $57 = $2;
     $58 = ((($57)) + 84|0);
     $59 = ((($58)) + 40|0);
     HEAP32[$59>>2] = 0;
     $60 = $2;
     $61 = ((($60)) + 84|0);
     $62 = ((($61)) + 4|0);
     HEAP32[$62>>2] = 0;
     $63 = $2;
     $64 = ((($63)) + 84|0);
     HEAP32[$64>>2] = 0;
     $65 = $2;
     $66 = ((($65)) + 84|0);
     $67 = (_inflateInit2_($66,31,15516,56)|0);
     $68 = ($67|0)!=(0);
     if (!($68)) {
      break;
     }
     $69 = $2;
     $70 = ((($69)) + 36|0);
     $71 = HEAP32[$70>>2]|0;
     _free($71);
     $72 = $2;
     $73 = ((($72)) + 32|0);
     $74 = HEAP32[$73>>2]|0;
     _free($74);
     $75 = $2;
     $76 = ((($75)) + 24|0);
     HEAP32[$76>>2] = 0;
     $77 = $2;
     _gz_error($77,-4,14951);
     $1 = -1;
     $145 = $1;
     STACKTOP = sp;return ($145|0);
    }
   }
   $31 = $2;
   $32 = ((($31)) + 36|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   if ($34) {
    $35 = $2;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    _free($37);
   }
   $38 = $2;
   $39 = ((($38)) + 32|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0|0);
   if ($41) {
    $42 = $2;
    $43 = ((($42)) + 32|0);
    $44 = HEAP32[$43>>2]|0;
    _free($44);
   }
   $45 = $2;
   _gz_error($45,-4,14951);
   $1 = -1;
   $145 = $1;
   STACKTOP = sp;return ($145|0);
  }
 } while(0);
 $78 = $3;
 $79 = ((($78)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80>>>0)<(2);
 if ($81) {
  $82 = $2;
  $83 = (_gz_avail($82)|0);
  $84 = ($83|0)==(-1);
  if ($84) {
   $1 = -1;
   $145 = $1;
   STACKTOP = sp;return ($145|0);
  }
  $85 = $3;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)==(0);
  if ($88) {
   $1 = 0;
   $145 = $1;
   STACKTOP = sp;return ($145|0);
  }
 }
 $89 = $3;
 $90 = ((($89)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91>>>0)>(1);
 if ($92) {
  $93 = $3;
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = ($96|0)==(31);
  if ($97) {
   $98 = $3;
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($99)) + 1|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = ($102|0)==(139);
   if ($103) {
    $104 = $3;
    (_inflateReset($104)|0);
    $105 = $2;
    $106 = ((($105)) + 44|0);
    HEAP32[$106>>2] = 2;
    $107 = $2;
    $108 = ((($107)) + 40|0);
    HEAP32[$108>>2] = 0;
    $1 = 0;
    $145 = $1;
    STACKTOP = sp;return ($145|0);
   }
  }
 }
 $109 = $2;
 $110 = ((($109)) + 40|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = $3;
  $114 = ((($113)) + 4|0);
  HEAP32[$114>>2] = 0;
  $115 = $2;
  $116 = ((($115)) + 52|0);
  HEAP32[$116>>2] = 1;
  $117 = $2;
  HEAP32[$117>>2] = 0;
  $1 = 0;
  $145 = $1;
  STACKTOP = sp;return ($145|0);
 }
 $118 = $2;
 $119 = ((($118)) + 36|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $2;
 $122 = ((($121)) + 4|0);
 HEAP32[$122>>2] = $120;
 $123 = $3;
 $124 = ((($123)) + 4|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $2;
  $128 = ((($127)) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $3;
  $131 = HEAP32[$130>>2]|0;
  $132 = $3;
  $133 = ((($132)) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  _memcpy(($129|0),($131|0),($134|0))|0;
  $135 = $3;
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $2;
  HEAP32[$138>>2] = $137;
  $139 = $3;
  $140 = ((($139)) + 4|0);
  HEAP32[$140>>2] = 0;
 }
 $141 = $2;
 $142 = ((($141)) + 44|0);
 HEAP32[$142>>2] = 1;
 $143 = $2;
 $144 = ((($143)) + 40|0);
 HEAP32[$144>>2] = 1;
 $1 = 0;
 $145 = $1;
 STACKTOP = sp;return ($145|0);
}
function _inflateInit2_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = $7;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = HEAP8[15516]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($15|0)!=($17|0);
  $19 = $8;
  $20 = ($19|0)!=(56);
  $or$cond = $18 | $20;
  if (!($or$cond)) {
   $21 = $5;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $4 = -2;
    $68 = $4;
    STACKTOP = sp;return ($68|0);
   }
   $23 = $5;
   $24 = ((($23)) + 24|0);
   HEAP32[$24>>2] = 0;
   $25 = $5;
   $26 = ((($25)) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $29 = $5;
    $30 = ((($29)) + 32|0);
    HEAP32[$30>>2] = 9;
    $31 = $5;
    $32 = ((($31)) + 40|0);
    HEAP32[$32>>2] = 0;
   }
   $33 = $5;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if ($36) {
    $37 = $5;
    $38 = ((($37)) + 36|0);
    HEAP32[$38>>2] = 10;
   }
   $39 = $5;
   $40 = ((($39)) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $5;
   $43 = ((($42)) + 40|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_iiii[$41 & 15]($44,1,7116)|0);
   $10 = $45;
   $46 = $10;
   $47 = ($46|0)==(0|0);
   if ($47) {
    $4 = -4;
    $68 = $4;
    STACKTOP = sp;return ($68|0);
   }
   $48 = $10;
   $49 = $5;
   $50 = ((($49)) + 28|0);
   HEAP32[$50>>2] = $48;
   $51 = $10;
   $52 = ((($51)) + 52|0);
   HEAP32[$52>>2] = 0;
   $53 = $5;
   $54 = $6;
   $55 = (_inflateReset2($53,$54)|0);
   $9 = $55;
   $56 = $9;
   $57 = ($56|0)!=(0);
   if ($57) {
    $58 = $5;
    $59 = ((($58)) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $5;
    $62 = ((($61)) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $10;
    FUNCTION_TABLE_vii[$60 & 15]($63,$64);
    $65 = $5;
    $66 = ((($65)) + 28|0);
    HEAP32[$66>>2] = 0;
   }
   $67 = $9;
   $4 = $67;
   $68 = $4;
   STACKTOP = sp;return ($68|0);
  }
 }
 $4 = -6;
 $68 = $4;
 STACKTOP = sp;return ($68|0);
}
function _inflateReset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $2;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = $2;
   $11 = ((($10)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $3 = $12;
   $13 = $3;
   $14 = ((($13)) + 40|0);
   HEAP32[$14>>2] = 0;
   $15 = $3;
   $16 = ((($15)) + 44|0);
   HEAP32[$16>>2] = 0;
   $17 = $3;
   $18 = ((($17)) + 48|0);
   HEAP32[$18>>2] = 0;
   $19 = $2;
   $20 = (_inflateResetKeep($19)|0);
   $1 = $20;
   $21 = $1;
   STACKTOP = sp;return ($21|0);
  }
 }
 $1 = -2;
 $21 = $1;
 STACKTOP = sp;return ($21|0);
}
function _inflateResetKeep($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = $2;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = $2;
   $11 = ((($10)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $3 = $12;
   $13 = $3;
   $14 = ((($13)) + 28|0);
   HEAP32[$14>>2] = 0;
   $15 = $2;
   $16 = ((($15)) + 20|0);
   HEAP32[$16>>2] = 0;
   $17 = $2;
   $18 = ((($17)) + 8|0);
   HEAP32[$18>>2] = 0;
   $19 = $2;
   $20 = ((($19)) + 24|0);
   HEAP32[$20>>2] = 0;
   $21 = $3;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $3;
    $26 = ((($25)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 & 1;
    $29 = $2;
    $30 = ((($29)) + 48|0);
    HEAP32[$30>>2] = $28;
   }
   $31 = $3;
   HEAP32[$31>>2] = 0;
   $32 = $3;
   $33 = ((($32)) + 4|0);
   HEAP32[$33>>2] = 0;
   $34 = $3;
   $35 = ((($34)) + 12|0);
   HEAP32[$35>>2] = 0;
   $36 = $3;
   $37 = ((($36)) + 20|0);
   HEAP32[$37>>2] = 32768;
   $38 = $3;
   $39 = ((($38)) + 32|0);
   HEAP32[$39>>2] = 0;
   $40 = $3;
   $41 = ((($40)) + 56|0);
   HEAP32[$41>>2] = 0;
   $42 = $3;
   $43 = ((($42)) + 60|0);
   HEAP32[$43>>2] = 0;
   $44 = $3;
   $45 = ((($44)) + 1328|0);
   $46 = $3;
   $47 = ((($46)) + 108|0);
   HEAP32[$47>>2] = $45;
   $48 = $3;
   $49 = ((($48)) + 80|0);
   HEAP32[$49>>2] = $45;
   $50 = $3;
   $51 = ((($50)) + 76|0);
   HEAP32[$51>>2] = $45;
   $52 = $3;
   $53 = ((($52)) + 7104|0);
   HEAP32[$53>>2] = 1;
   $54 = $3;
   $55 = ((($54)) + 7108|0);
   HEAP32[$55>>2] = -1;
   $1 = 0;
   $56 = $1;
   STACKTOP = sp;return ($56|0);
  }
 }
 $1 = -2;
 $56 = $1;
 STACKTOP = sp;return ($56|0);
}
function _inflateReset2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $3;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = $3;
   $14 = ((($13)) + 28|0);
   $15 = HEAP32[$14>>2]|0;
   $6 = $15;
   $16 = $4;
   $17 = ($16|0)<(0);
   if ($17) {
    $5 = 0;
    $18 = $4;
    $19 = (0 - ($18))|0;
    $4 = $19;
   } else {
    $20 = $4;
    $21 = $20 >> 4;
    $22 = (($21) + 1)|0;
    $5 = $22;
    $23 = $4;
    $24 = ($23|0)<(48);
    if ($24) {
     $25 = $4;
     $26 = $25 & 15;
     $4 = $26;
    }
   }
   $27 = $4;
   $28 = ($27|0)!=(0);
   if ($28) {
    $29 = $4;
    $30 = ($29|0)<(8);
    $31 = $4;
    $32 = ($31|0)>(15);
    $or$cond = $30 | $32;
    if ($or$cond) {
     $2 = -2;
     $61 = $2;
     STACKTOP = sp;return ($61|0);
    }
   }
   $33 = $6;
   $34 = ((($33)) + 52|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)!=(0|0);
   if ($36) {
    $37 = $6;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $4;
    $41 = ($39|0)!=($40|0);
    if ($41) {
     $42 = $3;
     $43 = ((($42)) + 36|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $3;
     $46 = ((($45)) + 40|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $6;
     $49 = ((($48)) + 52|0);
     $50 = HEAP32[$49>>2]|0;
     FUNCTION_TABLE_vii[$44 & 15]($47,$50);
     $51 = $6;
     $52 = ((($51)) + 52|0);
     HEAP32[$52>>2] = 0;
    }
   }
   $53 = $5;
   $54 = $6;
   $55 = ((($54)) + 8|0);
   HEAP32[$55>>2] = $53;
   $56 = $4;
   $57 = $6;
   $58 = ((($57)) + 36|0);
   HEAP32[$58>>2] = $56;
   $59 = $3;
   $60 = (_inflateReset($59)|0);
   $2 = $60;
   $61 = $2;
   STACKTOP = sp;return ($61|0);
  }
 }
 $2 = -2;
 $61 = $2;
 STACKTOP = sp;return ($61|0);
}
function _gzgetc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $6 = $2;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $1 = -1;
  $44 = $1;
  STACKTOP = sp;return ($44|0);
 }
 $8 = $2;
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(7247);
 do {
  if (!($12)) {
   $13 = $5;
   $14 = ((($13)) + 76|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $5;
    $18 = ((($17)) + 76|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)!=(-5);
    if ($20) {
     break;
    }
   }
   $21 = $5;
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = $5;
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + -1)|0;
    HEAP32[$24>>2] = $26;
    $27 = $5;
    $28 = ((($27)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 1)|0;
    HEAP32[$28>>2] = $30;
    $31 = $5;
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($33)) + 1|0);
    HEAP32[$32>>2] = $34;
    $35 = HEAP8[$33>>0]|0;
    $36 = $35&255;
    $1 = $36;
    $44 = $1;
    STACKTOP = sp;return ($44|0);
   } else {
    $37 = $2;
    $38 = (_gzread($37,$4,1)|0);
    $3 = $38;
    $39 = $3;
    $40 = ($39|0)<(1);
    $41 = HEAP8[$4>>0]|0;
    $42 = $41&255;
    $43 = $40 ? -1 : $42;
    $1 = $43;
    $44 = $1;
    STACKTOP = sp;return ($44|0);
   }
  }
 } while(0);
 $1 = -1;
 $44 = $1;
 STACKTOP = sp;return ($44|0);
}
function _gzungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $2 = -1;
  $123 = $2;
  STACKTOP = sp;return ($123|0);
 }
 $10 = $4;
 $5 = $10;
 $11 = $5;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(7247);
 do {
  if (!($14)) {
   $15 = $5;
   $16 = ((($15)) + 76|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $5;
    $20 = ((($19)) + 76|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)!=(-5);
    if ($22) {
     break;
    }
   }
   $23 = $5;
   $24 = ((($23)) + 72|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $5;
    $28 = ((($27)) + 72|0);
    HEAP32[$28>>2] = 0;
    $29 = $5;
    $30 = $5;
    $31 = ((($30)) + 68|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (_gz_skip($29,$32)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     $2 = -1;
     $123 = $2;
     STACKTOP = sp;return ($123|0);
    }
   }
   $35 = $3;
   $36 = ($35|0)<(0);
   if ($36) {
    $2 = -1;
    $123 = $2;
    STACKTOP = sp;return ($123|0);
   }
   $37 = $5;
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0);
   $40 = $5;
   if ($39) {
    HEAP32[$40>>2] = 1;
    $41 = $5;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $5;
    $45 = ((($44)) + 24|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 << 1;
    $48 = (($43) + ($47)|0);
    $49 = ((($48)) + -1|0);
    $50 = $5;
    $51 = ((($50)) + 4|0);
    HEAP32[$51>>2] = $49;
    $52 = $3;
    $53 = $52&255;
    $54 = $5;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    HEAP8[$56>>0] = $53;
    $57 = $5;
    $58 = ((($57)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + -1)|0;
    HEAP32[$58>>2] = $60;
    $61 = $5;
    $62 = ((($61)) + 56|0);
    HEAP32[$62>>2] = 0;
    $63 = $3;
    $2 = $63;
    $123 = $2;
    STACKTOP = sp;return ($123|0);
   }
   $64 = HEAP32[$40>>2]|0;
   $65 = $5;
   $66 = ((($65)) + 24|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 << 1;
   $69 = ($64|0)==($68|0);
   $70 = $5;
   if ($69) {
    _gz_error($70,-3,15448);
    $2 = -1;
    $123 = $2;
    STACKTOP = sp;return ($123|0);
   }
   $71 = ((($70)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $5;
   $74 = ((($73)) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($72|0)==($75|0);
   if ($76) {
    $77 = $5;
    $78 = ((($77)) + 36|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $5;
    $81 = HEAP32[$80>>2]|0;
    $82 = (($79) + ($81)|0);
    $6 = $82;
    $83 = $5;
    $84 = ((($83)) + 36|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $5;
    $87 = ((($86)) + 24|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $88 << 1;
    $90 = (($85) + ($89)|0);
    $7 = $90;
    while(1) {
     $91 = $6;
     $92 = $5;
     $93 = ((($92)) + 36|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($91>>>0)>($94>>>0);
     if (!($95)) {
      break;
     }
     $96 = $6;
     $97 = ((($96)) + -1|0);
     $6 = $97;
     $98 = HEAP8[$97>>0]|0;
     $99 = $7;
     $100 = ((($99)) + -1|0);
     $7 = $100;
     HEAP8[$100>>0] = $98;
    }
    $101 = $7;
    $102 = $5;
    $103 = ((($102)) + 4|0);
    HEAP32[$103>>2] = $101;
   }
   $104 = $5;
   $105 = HEAP32[$104>>2]|0;
   $106 = (($105) + 1)|0;
   HEAP32[$104>>2] = $106;
   $107 = $5;
   $108 = ((($107)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ((($109)) + -1|0);
   HEAP32[$108>>2] = $110;
   $111 = $3;
   $112 = $111&255;
   $113 = $5;
   $114 = ((($113)) + 4|0);
   $115 = HEAP32[$114>>2]|0;
   HEAP8[$115>>0] = $112;
   $116 = $5;
   $117 = ((($116)) + 8|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (($118) + -1)|0;
   HEAP32[$117>>2] = $119;
   $120 = $5;
   $121 = ((($120)) + 56|0);
   HEAP32[$121>>2] = 0;
   $122 = $3;
   $2 = $122;
   $123 = $2;
   STACKTOP = sp;return ($123|0);
  }
 } while(0);
 $2 = -1;
 $123 = $2;
 STACKTOP = sp;return ($123|0);
}
function _gzgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = ($12|0)==(0|0);
 $14 = $5;
 $15 = ($14|0)==(0|0);
 $or$cond = $13 | $15;
 $16 = $6;
 $17 = ($16|0)<(1);
 $or$cond3 = $or$cond | $17;
 if ($or$cond3) {
  $3 = 0;
  $116 = $3;
  STACKTOP = sp;return ($116|0);
 }
 $18 = $4;
 $11 = $18;
 $19 = $11;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(7247);
 do {
  if (!($22)) {
   $23 = $11;
   $24 = ((($23)) + 76|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $11;
    $28 = ((($27)) + 76|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)!=(-5);
    if ($30) {
     break;
    }
   }
   $31 = $11;
   $32 = ((($31)) + 72|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $11;
    $36 = ((($35)) + 72|0);
    HEAP32[$36>>2] = 0;
    $37 = $11;
    $38 = $11;
    $39 = ((($38)) + 68|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (_gz_skip($37,$40)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     $3 = 0;
     $116 = $3;
     STACKTOP = sp;return ($116|0);
    }
   }
   $43 = $5;
   $9 = $43;
   $44 = $6;
   $45 = (($44) - 1)|0;
   $7 = $45;
   $46 = $7;
   $47 = ($46|0)!=(0);
   L15: do {
    if ($47) {
     while(1) {
      $48 = $11;
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)==(0);
      if ($50) {
       $51 = $11;
       $52 = (_gz_fetch($51)|0);
       $53 = ($52|0)==(-1);
       if ($53) {
        break;
       }
      }
      $54 = $11;
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)==(0);
      $57 = $11;
      if ($56) {
       label = 15;
       break;
      }
      $59 = HEAP32[$57>>2]|0;
      $60 = $7;
      $61 = ($59>>>0)>($60>>>0);
      if ($61) {
       $62 = $7;
       $65 = $62;
      } else {
       $63 = $11;
       $64 = HEAP32[$63>>2]|0;
       $65 = $64;
      }
      $8 = $65;
      $66 = $11;
      $67 = ((($66)) + 4|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = $8;
      $70 = (_memchr($68,10,$69)|0);
      $10 = $70;
      $71 = $10;
      $72 = ($71|0)!=(0|0);
      if ($72) {
       $73 = $10;
       $74 = $11;
       $75 = ((($74)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $73;
       $78 = $76;
       $79 = (($77) - ($78))|0;
       $80 = (($79) + 1)|0;
       $8 = $80;
      }
      $81 = $5;
      $82 = $11;
      $83 = ((($82)) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $8;
      _memcpy(($81|0),($84|0),($85|0))|0;
      $86 = $8;
      $87 = $11;
      $88 = HEAP32[$87>>2]|0;
      $89 = (($88) - ($86))|0;
      HEAP32[$87>>2] = $89;
      $90 = $8;
      $91 = $11;
      $92 = ((($91)) + 4|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($93) + ($90)|0);
      HEAP32[$92>>2] = $94;
      $95 = $8;
      $96 = $11;
      $97 = ((($96)) + 8|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (($98) + ($95))|0;
      HEAP32[$97>>2] = $99;
      $100 = $8;
      $101 = $7;
      $102 = (($101) - ($100))|0;
      $7 = $102;
      $103 = $8;
      $104 = $5;
      $105 = (($104) + ($103)|0);
      $5 = $105;
      $106 = $7;
      $107 = ($106|0)!=(0);
      $108 = $10;
      $109 = ($108|0)==(0|0);
      $110 = $107 ? $109 : 0;
      if (!($110)) {
       break L15;
      }
     }
     if ((label|0) == 15) {
      $58 = ((($57)) + 56|0);
      HEAP32[$58>>2] = 1;
      break;
     }
     $3 = 0;
     $116 = $3;
     STACKTOP = sp;return ($116|0);
    }
   } while(0);
   $111 = $5;
   $112 = $9;
   $113 = ($111|0)==($112|0);
   if ($113) {
    $3 = 0;
    $116 = $3;
    STACKTOP = sp;return ($116|0);
   } else {
    $114 = $5;
    HEAP8[$114>>0] = 0;
    $115 = $9;
    $3 = $115;
    $116 = $3;
    STACKTOP = sp;return ($116|0);
   }
  }
 } while(0);
 $3 = 0;
 $116 = $3;
 STACKTOP = sp;return ($116|0);
}
function _gzwrite($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $6;
 $7 = $12;
 $13 = $4;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $3 = 0;
  $135 = $3;
  STACKTOP = sp;return ($135|0);
 }
 $15 = $4;
 $8 = $15;
 $16 = $8;
 $17 = ((($16)) + 84|0);
 $9 = $17;
 $18 = $8;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(31153);
 if (!($21)) {
  $22 = $8;
  $23 = ((($22)) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   $26 = $6;
   $27 = ($26|0)<(0);
   if ($27) {
    $28 = $8;
    _gz_error($28,-3,15479);
    $3 = 0;
    $135 = $3;
    STACKTOP = sp;return ($135|0);
   }
   $29 = $6;
   $30 = ($29|0)==(0);
   if ($30) {
    $3 = 0;
    $135 = $3;
    STACKTOP = sp;return ($135|0);
   }
   $31 = $8;
   $32 = ((($31)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = $8;
    $36 = (_gz_init($35)|0);
    $37 = ($36|0)==(-1);
    if ($37) {
     $3 = 0;
     $135 = $3;
     STACKTOP = sp;return ($135|0);
    }
   }
   $38 = $8;
   $39 = ((($38)) + 72|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $8;
    $43 = ((($42)) + 72|0);
    HEAP32[$43>>2] = 0;
    $44 = $8;
    $45 = $8;
    $46 = ((($45)) + 68|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (_gz_zero($44,$47)|0);
    $49 = ($48|0)==(-1);
    if ($49) {
     $3 = 0;
     $135 = $3;
     STACKTOP = sp;return ($135|0);
    }
   }
   $50 = $6;
   $51 = $8;
   $52 = ((($51)) + 24|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($50>>>0)<($53>>>0);
   L26: do {
    if ($54) {
     while(1) {
      $55 = $9;
      $56 = ((($55)) + 4|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0);
      if ($58) {
       $59 = $8;
       $60 = ((($59)) + 32|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = $9;
       HEAP32[$62>>2] = $61;
      }
      $63 = $9;
      $64 = HEAP32[$63>>2]|0;
      $65 = $9;
      $66 = ((($65)) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($64) + ($67)|0);
      $69 = $8;
      $70 = ((($69)) + 32|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = $68;
      $73 = $71;
      $74 = (($72) - ($73))|0;
      $10 = $74;
      $75 = $8;
      $76 = ((($75)) + 24|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = $10;
      $79 = (($77) - ($78))|0;
      $11 = $79;
      $80 = $11;
      $81 = $6;
      $82 = ($80>>>0)>($81>>>0);
      if ($82) {
       $83 = $6;
       $11 = $83;
      }
      $84 = $8;
      $85 = ((($84)) + 32|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $10;
      $88 = (($86) + ($87)|0);
      $89 = $5;
      $90 = $11;
      _memcpy(($88|0),($89|0),($90|0))|0;
      $91 = $11;
      $92 = $9;
      $93 = ((($92)) + 4|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = (($94) + ($91))|0;
      HEAP32[$93>>2] = $95;
      $96 = $11;
      $97 = $8;
      $98 = ((($97)) + 8|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (($99) + ($96))|0;
      HEAP32[$98>>2] = $100;
      $101 = $5;
      $102 = $11;
      $103 = (($101) + ($102)|0);
      $5 = $103;
      $104 = $11;
      $105 = $6;
      $106 = (($105) - ($104))|0;
      $6 = $106;
      $107 = $6;
      $108 = ($107|0)!=(0);
      if ($108) {
       $109 = $8;
       $110 = (_gz_comp($109,0)|0);
       $111 = ($110|0)==(-1);
       if ($111) {
        break;
       }
      }
      $112 = $6;
      $113 = ($112|0)!=(0);
      if (!($113)) {
       break L26;
      }
     }
     $3 = 0;
     $135 = $3;
     STACKTOP = sp;return ($135|0);
    } else {
     $114 = $9;
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=(0);
     if ($117) {
      $118 = $8;
      $119 = (_gz_comp($118,0)|0);
      $120 = ($119|0)==(-1);
      if ($120) {
       $3 = 0;
       $135 = $3;
       STACKTOP = sp;return ($135|0);
      }
     }
     $121 = $6;
     $122 = $9;
     $123 = ((($122)) + 4|0);
     HEAP32[$123>>2] = $121;
     $124 = $5;
     $125 = $9;
     HEAP32[$125>>2] = $124;
     $126 = $6;
     $127 = $8;
     $128 = ((($127)) + 8|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($129) + ($126))|0;
     HEAP32[$128>>2] = $130;
     $131 = $8;
     $132 = (_gz_comp($131,0)|0);
     $133 = ($132|0)==(-1);
     if ($133) {
      $3 = 0;
      $135 = $3;
      STACKTOP = sp;return ($135|0);
     }
    }
   } while(0);
   $134 = $7;
   $3 = $134;
   $135 = $3;
   STACKTOP = sp;return ($135|0);
  }
 }
 $3 = 0;
 $135 = $3;
 STACKTOP = sp;return ($135|0);
}
function _gzputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $2 = -1;
  $87 = $2;
  STACKTOP = sp;return ($87|0);
 }
 $11 = $3;
 $7 = $11;
 $12 = $7;
 $13 = ((($12)) + 84|0);
 $8 = $13;
 $14 = $7;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(31153);
 if (!($17)) {
  $18 = $7;
  $19 = ((($18)) + 76|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $22 = $7;
   $23 = ((($22)) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $7;
    $27 = ((($26)) + 72|0);
    HEAP32[$27>>2] = 0;
    $28 = $7;
    $29 = $7;
    $30 = ((($29)) + 68|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (_gz_zero($28,$31)|0);
    $33 = ($32|0)==(-1);
    if ($33) {
     $2 = -1;
     $87 = $2;
     STACKTOP = sp;return ($87|0);
    }
   }
   $34 = $7;
   $35 = ((($34)) + 24|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $8;
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = $7;
     $43 = ((($42)) + 32|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $8;
     HEAP32[$45>>2] = $44;
    }
    $46 = $8;
    $47 = HEAP32[$46>>2]|0;
    $48 = $8;
    $49 = ((($48)) + 4|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($47) + ($50)|0);
    $52 = $7;
    $53 = ((($52)) + 32|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $51;
    $56 = $54;
    $57 = (($55) - ($56))|0;
    $5 = $57;
    $58 = $5;
    $59 = $7;
    $60 = ((($59)) + 24|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($58>>>0)<($61>>>0);
    if ($62) {
     $63 = $4;
     $64 = $63&255;
     $65 = $5;
     $66 = $7;
     $67 = ((($66)) + 32|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + ($65)|0);
     HEAP8[$69>>0] = $64;
     $70 = $8;
     $71 = ((($70)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (($72) + 1)|0;
     HEAP32[$71>>2] = $73;
     $74 = $7;
     $75 = ((($74)) + 8|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) + 1)|0;
     HEAP32[$75>>2] = $77;
     $78 = $4;
     $79 = $78 & 255;
     $2 = $79;
     $87 = $2;
     STACKTOP = sp;return ($87|0);
    }
   }
   $80 = $4;
   $81 = $80&255;
   HEAP8[$6>>0] = $81;
   $82 = $3;
   $83 = (_gzwrite($82,$6,1)|0);
   $84 = ($83|0)!=(1);
   if ($84) {
    $2 = -1;
    $87 = $2;
    STACKTOP = sp;return ($87|0);
   } else {
    $85 = $4;
    $86 = $85 & 255;
    $2 = $86;
    $87 = $2;
    STACKTOP = sp;return ($87|0);
   }
  }
 }
 $2 = -1;
 $87 = $2;
 STACKTOP = sp;return ($87|0);
}
function _gzputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = (_strlen($6)|0);
 $5 = $7;
 $8 = $2;
 $9 = $3;
 $10 = $5;
 $11 = (_gzwrite($8,$9,$10)|0);
 $4 = $11;
 $12 = $4;
 $13 = ($12|0)==(0);
 $14 = $5;
 $15 = ($14|0)!=(0);
 $or$cond = $13 & $15;
 $16 = $4;
 $17 = $or$cond ? -1 : $16;
 STACKTOP = sp;return ($17|0);
}
function _gzvprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $3 = -1;
  $93 = $3;
  STACKTOP = sp;return ($93|0);
 }
 $13 = $4;
 $9 = $13;
 $14 = $9;
 $15 = ((($14)) + 84|0);
 $10 = $15;
 $16 = $9;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(31153);
 if (!($19)) {
  $20 = $9;
  $21 = ((($20)) + 76|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   $24 = $9;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $9;
    $29 = (_gz_init($28)|0);
    $30 = ($29|0)==(-1);
    if ($30) {
     $3 = 0;
     $93 = $3;
     STACKTOP = sp;return ($93|0);
    }
   }
   $31 = $9;
   $32 = ((($31)) + 72|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $9;
    $36 = ((($35)) + 72|0);
    HEAP32[$36>>2] = 0;
    $37 = $9;
    $38 = $9;
    $39 = ((($38)) + 68|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (_gz_zero($37,$40)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     $3 = 0;
     $93 = $3;
     STACKTOP = sp;return ($93|0);
    }
   }
   $43 = $10;
   $44 = ((($43)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)!=(0);
   if ($46) {
    $47 = $9;
    $48 = (_gz_comp($47,0)|0);
    $49 = ($48|0)==(-1);
    if ($49) {
     $3 = 0;
     $93 = $3;
     STACKTOP = sp;return ($93|0);
    }
   }
   $50 = $9;
   $51 = ((($50)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $7 = $52;
   $53 = $7;
   $54 = (($53) - 1)|0;
   $55 = $9;
   $56 = ((($55)) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + ($54)|0);
   HEAP8[$58>>0] = 0;
   $59 = $9;
   $60 = ((($59)) + 32|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $7;
   $63 = $5;
   $64 = $6;
   $65 = (_vsnprintf($61,$62,$63,$64)|0);
   $8 = $65;
   $66 = $8;
   $67 = ($66|0)<=(0);
   if (!($67)) {
    $68 = $8;
    $69 = $7;
    $70 = ($68|0)>=($69|0);
    if (!($70)) {
     $71 = $7;
     $72 = (($71) - 1)|0;
     $73 = $9;
     $74 = ((($73)) + 32|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (($75) + ($72)|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77&255;
     $79 = ($78|0)!=(0);
     if (!($79)) {
      $80 = $8;
      $81 = $10;
      $82 = ((($81)) + 4|0);
      HEAP32[$82>>2] = $80;
      $83 = $9;
      $84 = ((($83)) + 32|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = $10;
      HEAP32[$86>>2] = $85;
      $87 = $8;
      $88 = $9;
      $89 = ((($88)) + 8|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($90) + ($87))|0;
      HEAP32[$89>>2] = $91;
      $92 = $8;
      $3 = $92;
      $93 = $3;
      STACKTOP = sp;return ($93|0);
     }
    }
   }
   $3 = 0;
   $93 = $3;
   STACKTOP = sp;return ($93|0);
  }
 }
 $3 = 0;
 $93 = $3;
 STACKTOP = sp;return ($93|0);
}
function _gzprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = $varargs;
 $6 = $2;
 $7 = $3;
 $8 = (_gzvprintf($6,$7,$4)|0);
 $5 = $8;
 $9 = $5;
 STACKTOP = sp;return ($9|0);
}
function _inflateInit_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_inflateInit2_($6,15,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _inflateSetDictionary($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = $4;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = $4;
   $17 = ((($16)) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $7 = $18;
   $19 = $7;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = $7;
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)!=(10);
    if ($25) {
     $3 = -2;
     $49 = $3;
     STACKTOP = sp;return ($49|0);
    }
   }
   $26 = $7;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(10);
   if ($28) {
    $29 = (_adler32(0,0,0)|0);
    $8 = $29;
    $30 = $8;
    $31 = $5;
    $32 = $6;
    $33 = (_adler32($30,$31,$32)|0);
    $8 = $33;
    $34 = $8;
    $35 = $7;
    $36 = ((($35)) + 24|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($34|0)!=($37|0);
    if ($38) {
     $3 = -3;
     $49 = $3;
     STACKTOP = sp;return ($49|0);
    }
   }
   $39 = $4;
   $40 = $5;
   $41 = $6;
   $42 = (($40) + ($41)|0);
   $43 = $6;
   $44 = (_updatewindow($39,$42,$43)|0);
   $9 = $44;
   $45 = $9;
   $46 = ($45|0)!=(0);
   $47 = $7;
   if ($46) {
    HEAP32[$47>>2] = 30;
    $3 = -4;
    $49 = $3;
    STACKTOP = sp;return ($49|0);
   } else {
    $48 = ((($47)) + 12|0);
    HEAP32[$48>>2] = 1;
    $3 = 0;
    $49 = $3;
    STACKTOP = sp;return ($49|0);
   }
  }
 }
 $3 = -2;
 $49 = $3;
 STACKTOP = sp;return ($49|0);
}
function _inflateSync($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 24|0;
 $2 = $0;
 $8 = $2;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = $2;
  $11 = ((($10)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = $2;
   $15 = ((($14)) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $7 = $16;
   $17 = $2;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = $7;
    $22 = ((($21)) + 60|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23>>>0)<(8);
    if ($24) {
     $1 = -5;
     $108 = $1;
     STACKTOP = sp;return ($108|0);
    }
   }
   $25 = $7;
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)!=(31);
   if ($27) {
    $28 = $7;
    HEAP32[$28>>2] = 31;
    $29 = $7;
    $30 = ((($29)) + 60|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 & 7;
    $33 = $7;
    $34 = ((($33)) + 56|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 << $32;
    HEAP32[$34>>2] = $36;
    $37 = $7;
    $38 = ((($37)) + 60|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $39 & 7;
    $41 = $7;
    $42 = ((($41)) + 60|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) - ($40))|0;
    HEAP32[$42>>2] = $44;
    $3 = 0;
    while(1) {
     $45 = $7;
     $46 = ((($45)) + 60|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)>=(8);
     $49 = $7;
     if (!($48)) {
      break;
     }
     $50 = ((($49)) + 56|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $51&255;
     $53 = $3;
     $54 = (($53) + 1)|0;
     $3 = $54;
     $55 = (($6) + ($53)|0);
     HEAP8[$55>>0] = $52;
     $56 = $7;
     $57 = ((($56)) + 56|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $58 >>> 8;
     HEAP32[$57>>2] = $59;
     $60 = $7;
     $61 = ((($60)) + 60|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) - 8)|0;
     HEAP32[$61>>2] = $63;
    }
    $64 = ((($49)) + 104|0);
    HEAP32[$64>>2] = 0;
    $65 = $7;
    $66 = ((($65)) + 104|0);
    $67 = $3;
    (_syncsearch($66,$6,$67)|0);
   }
   $68 = $7;
   $69 = ((($68)) + 104|0);
   $70 = $2;
   $71 = HEAP32[$70>>2]|0;
   $72 = $2;
   $73 = ((($72)) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (_syncsearch($69,$71,$74)|0);
   $3 = $75;
   $76 = $3;
   $77 = $2;
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) - ($76))|0;
   HEAP32[$78>>2] = $80;
   $81 = $3;
   $82 = $2;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + ($81)|0);
   HEAP32[$82>>2] = $84;
   $85 = $3;
   $86 = $2;
   $87 = ((($86)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + ($85))|0;
   HEAP32[$87>>2] = $89;
   $90 = $7;
   $91 = ((($90)) + 104|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)!=(4);
   if ($93) {
    $1 = -3;
    $108 = $1;
    STACKTOP = sp;return ($108|0);
   } else {
    $94 = $2;
    $95 = ((($94)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $4 = $96;
    $97 = $2;
    $98 = ((($97)) + 20|0);
    $99 = HEAP32[$98>>2]|0;
    $5 = $99;
    $100 = $2;
    (_inflateReset($100)|0);
    $101 = $4;
    $102 = $2;
    $103 = ((($102)) + 8|0);
    HEAP32[$103>>2] = $101;
    $104 = $5;
    $105 = $2;
    $106 = ((($105)) + 20|0);
    HEAP32[$106>>2] = $104;
    $107 = $7;
    HEAP32[$107>>2] = 11;
    $1 = 0;
    $108 = $1;
    STACKTOP = sp;return ($108|0);
   }
  }
 }
 $1 = -2;
 $108 = $1;
 STACKTOP = sp;return ($108|0);
}
function _syncsearch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $5;
  $12 = ($10>>>0)<($11>>>0);
  $13 = $6;
  $14 = ($13>>>0)<(4);
  $15 = $12 ? $14 : 0;
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $4;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $6;
  $22 = ($21>>>0)<(2);
  $23 = $22 ? 0 : 255;
  $24 = ($20|0)==($23|0);
  do {
   if ($24) {
    $25 = $6;
    $26 = (($25) + 1)|0;
    $6 = $26;
   } else {
    $27 = $7;
    $28 = $4;
    $29 = (($28) + ($27)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ($30<<24>>24)!=(0);
    if ($31) {
     $6 = 0;
     break;
    } else {
     $32 = $6;
     $33 = (4 - ($32))|0;
     $6 = $33;
     break;
    }
   }
  } while(0);
  $34 = $7;
  $35 = (($34) + 1)|0;
  $7 = $35;
 }
 $36 = $6;
 $37 = $3;
 HEAP32[$37>>2] = $36;
 $38 = $7;
 STACKTOP = sp;return ($38|0);
}
function _uncompress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 HEAP32[$9>>2] = $11;
 $12 = $8;
 $13 = ((($9)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($9)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $8;
 $17 = ($15|0)!=($16|0);
 if ($17) {
  $4 = -5;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $18 = $5;
 $19 = ((($9)) + 12|0);
 HEAP32[$19>>2] = $18;
 $20 = $6;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($9)) + 16|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($9)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $6;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24|0)!=($26|0);
 if ($27) {
  $4 = -5;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $28 = ((($9)) + 32|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($9)) + 36|0);
 HEAP32[$29>>2] = 0;
 $30 = (_inflateInit_($9,15516,56)|0);
 $10 = $30;
 $31 = $10;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $10;
  $4 = $33;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $34 = (_inflate($9,4)|0);
 $10 = $34;
 $35 = $10;
 $36 = ($35|0)!=(1);
 if (!($36)) {
  $45 = ((($9)) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  HEAP32[$47>>2] = $46;
  $48 = (_inflateEnd($9)|0);
  $10 = $48;
  $49 = $10;
  $4 = $49;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 (_inflateEnd($9)|0);
 $37 = $10;
 $38 = ($37|0)==(2);
 do {
  if (!($38)) {
   $39 = $10;
   $40 = ($39|0)==(-5);
   if ($40) {
    $41 = ((($9)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0);
    if ($43) {
     break;
    }
   }
   $44 = $10;
   $4 = $44;
   $50 = $4;
   STACKTOP = sp;return ($50|0);
  }
 } while(0);
 $4 = -3;
 $50 = $4;
 STACKTOP = sp;return ($50|0);
}
function _zlibVersion() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15516|0);
}
function _zlibCompileFlags() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $1 = $0;
 $2 = (($1) + 1)|0;
 $0 = $2;
 $3 = $0;
 $4 = (($3) + 4)|0;
 $0 = $4;
 $5 = $0;
 $6 = (($5) + 16)|0;
 $0 = $6;
 $7 = $0;
 $8 = (($7) + 64)|0;
 $0 = $8;
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 7;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4490]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 18004;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[4490]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((11|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function _cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=9208; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 15]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((15522 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 16002;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 16002;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 16002;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 16002 : (16004);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (16003);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 16002;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 16002;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 16012;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 16019;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (16020) : (16025);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (16022);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (15986 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(16054,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(16054,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 16038 : 16042;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 16046 : 16050;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 16002;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (15986 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (16002 + ($255)|0);
    $$332 = $or$cond282 ? 16002 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 16002;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 15]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (16056 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 16144;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 16144;
  } else {
   $$01113 = 16144;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $3 = $arglist_current;
 $4 = ((0) + 4|0);
 $expanded2 = $4;
 $expanded = (($expanded2) - 1)|0;
 $5 = (($3) + ($expanded))|0;
 $6 = ((0) + 4|0);
 $expanded6 = $6;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $7 = $5 & $expanded4;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $arglist_next = ((($8)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $10 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $9;
 $11 = (___syscall5(5,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _lseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $4 = (___syscall140(140,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$3>>2]|0;
 $8 = $6 ? -1 : $7;
 STACKTOP = sp;return ($8|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall4(4,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall6(6,($vararg_buffer|0))|0);
 $2 = ($1|0)==(-4);
 $$ = $2 ? -115 : $1;
 $3 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($3|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall3(3,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2272]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[2272]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((17988)|0));
   $$02325 = HEAP32[(17984)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((17988)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 15]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[2243]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[4502]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (18048 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[4502] = $24;
     } else {
      $25 = HEAP32[(18024)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(18016)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (18048 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[4502] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(18024)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(18028)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (18048 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[4502] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(18024)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(18016)>>2] = $84;
     HEAP32[(18028)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(18012)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (18312 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(18024)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (18312 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(18012)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(18024)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(18024)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(18024)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(18028)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (18048 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[4502] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(18024)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(18016)>>2] = $$0191$i;
      HEAP32[(18028)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(18012)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (18312 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (18312 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(18016)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(18024)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (18312 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(18012)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(18024)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(18024)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(18024)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (18048 + ($425<<2)|0);
          $427 = HEAP32[4502]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[4502] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(18024)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (18312 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(18012)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(18024)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(18024)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(18016)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(18028)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(18028)>>2] = $511;
   HEAP32[(18016)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(18016)>>2] = 0;
   HEAP32[(18028)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(18020)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(18020)>>2] = $526;
  $527 = HEAP32[(18032)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(18032)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[4620]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(18488)>>2] = 4096;
  HEAP32[(18484)>>2] = 4096;
  HEAP32[(18492)>>2] = -1;
  HEAP32[(18496)>>2] = -1;
  HEAP32[(18500)>>2] = 0;
  HEAP32[(18452)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[4620] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(18488)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(18448)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(18440)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(18452)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(18032)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (18456);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(18484)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(18440)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(18448)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(18488)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(18452)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(18452)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(18440)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(18440)>>2] = $624;
  $625 = HEAP32[(18444)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(18444)>>2] = $624;
  }
  $627 = HEAP32[(18032)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(18024)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(18024)>>2] = $$748$i;
    }
    HEAP32[(18456)>>2] = $$748$i;
    HEAP32[(18460)>>2] = $$723947$i;
    HEAP32[(18468)>>2] = 0;
    $632 = HEAP32[4620]|0;
    HEAP32[(18044)>>2] = $632;
    HEAP32[(18040)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (18048 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(18032)>>2] = $646;
    HEAP32[(18020)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(18496)>>2]|0;
    HEAP32[(18036)>>2] = $652;
   } else {
    $$024370$i = (18456);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(18020)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(18032)>>2] = $676;
       HEAP32[(18020)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(18496)>>2]|0;
       HEAP32[(18036)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(18024)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(18024)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (18456);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (18456);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(18020)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(18020)>>2] = $724;
        HEAP32[(18032)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(18028)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(18016)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(18016)>>2] = $730;
         HEAP32[(18028)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (18048 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[4502]|0;
            $757 = $756 & $755;
            HEAP32[4502] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (18312 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(18012)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(18012)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(18024)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(18024)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(18024)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (18048 + ($834<<2)|0);
         $836 = HEAP32[4502]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[4502] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(18024)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (18312 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(18012)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(18012)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(18024)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(18024)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (18456);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(18032)>>2] = $944;
    HEAP32[(18020)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(18496)>>2]|0;
    HEAP32[(18036)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(18456)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(18456)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(18456)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(18456)+12>>2]|0;
    HEAP32[(18456)>>2] = $$748$i;
    HEAP32[(18460)>>2] = $$723947$i;
    HEAP32[(18468)>>2] = 0;
    HEAP32[(18464)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (18048 + ($965<<2)|0);
      $967 = HEAP32[4502]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[4502] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(18024)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (18312 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(18012)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(18012)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(18024)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(18024)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(18020)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(18020)>>2] = $1047;
   $1048 = HEAP32[(18032)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(18032)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(18024)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(18028)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(18016)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (18048 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[4502]|0;
     $38 = $37 & $36;
     HEAP32[4502] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (18312 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(18012)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(18012)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(18024)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(18024)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(18024)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(18032)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(18020)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(18020)>>2] = $123;
   HEAP32[(18032)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(18028)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(18028)>>2] = 0;
   HEAP32[(18016)>>2] = 0;
   return;
  }
  $128 = HEAP32[(18028)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(18016)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(18016)>>2] = $131;
   HEAP32[(18028)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (18048 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(18024)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[4502]|0;
     $155 = $154 & $153;
     HEAP32[4502] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(18024)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(18024)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(18024)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (18312 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(18012)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(18012)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(18024)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(18024)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(18024)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(18028)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(18016)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (18048 + ($236<<2)|0);
  $238 = HEAP32[4502]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[4502] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(18024)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (18312 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(18012)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(18012)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(18024)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(18024)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(18040)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(18040)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (18464);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(18040)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&15](a1|0,a2|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&3](a1|0,a2|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&15](a1|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}
function b4(p0) {
 p0 = p0|0; nullFunc_vi(4);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,b0,b0,___stdio_close,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,b1,b1,b1,___stdout_write,___stdio_seek,___stdio_write,_sn_write,_zcalloc,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_zcfree,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iii = [b3,_deflate_stored,_deflate_fast,_deflate_slow];
var FUNCTION_TABLE_vi = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_cleanup,b4,b4,b4,b4];

  return { _sbrk: _sbrk, _i64Subtract: _i64Subtract, _free: _free, _main: _main, _i64Add: _i64Add, _pthread_self: _pthread_self, _memset: _memset, _llvm_cttz_i32: _llvm_cttz_i32, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Shl: _bitshift64Shl, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, ___errno_location: ___errno_location, ___udivmoddi4: ___udivmoddi4, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vii: dynCall_vii, dynCall_iii: dynCall_iii, dynCall_vi: dynCall_vi };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _memset = Module["_memset"] = asm["_memset"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



